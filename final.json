{"1": {"selection_timestamp": "7/19/2022 9:45:38", "study_title": "Identification of Refused Bequest Code Smells", "study_authors": "Elvis Ligu\r\nAlexander Chatzigeorgiou\r\nTheodore Chaikalis\r\nNikolaos Ygeionomakis", "study_author_type": "Academia", "study_year": 2013.0, "study_venue": "IEEE International Conference on Software Maintenance", "study_venue_type": "Conference", "study_link": "https://drive.google.com/drive/u/1/folders/1B9Ra77S-P7v2HFwN_cFUbve2A5qDsnZu", "study_bibtex": "@inproceedings{Ligu2013,\r\n  doi = {10.1109/icsm.2013.55},\r\n  url = {https://doi.org/10.1109/icsm.2013.55},\r\n  year = {2013},\r\n  month = sep,\r\n  publisher = {{IEEE}},\r\n  author = {Elvis Ligu and Alexander Chatzigeorgiou and Theodore Chaikalis and Nikolaos Ygeionomakis},\r\n  title = {Identification of Refused Bequest Code Smells},\r\n  booktitle = {2013 {IEEE} International Conference on Software Maintenance}\r\n}", "study_summary": "The paper proposes a new method to identify code smells in Java Projects", "study_problem": "One of the major architectural problems that has received limited attention is the so called 'Refused Bequest' which refers to inappropriate use of inheritance in object-oriented systems. This code smell occurs when subclasses do not take advantage of the inherited behavior, implying that replacement by delegation should be used instead.", "study_objective": "In this paper we propose a technique for the identification of Refused Bequest code smells whose major novelty lies in the intentional introduction of errors in the inherited methods.", "study_results": "Based on the results of this approach and other structural information, an indication of the smell strength on a 'thermometer' is obtained. The proposed approach has been implemented as an Eclipse plugin.", "artifact_name": ["JDeodorant"], "artifact_description": "The plugin1 enables the user to select either an entire Java project or a particular package, execute the identification and observe the findings, ordered by smell severity. The identification relies on the representation of the project under study as an Abstract Syntax Tree (AST) provided by the Eclipse JDT API.", "artifact_link": ["https://github.com/tsantalis/JDeodorant"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": "To this end, a number of automated tools for the identification of code smells and the facilitation of software maintainers have been developed.", "artifact_type": "Plugin", "artifact_type_evidence": "The proposed approach has been implemented as an Eclipse plugin.", "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": "The plugin1 enables the user to select either an entire Java project or a particular package, execute the identification and observe the findings, ordered by smell severity.", "artifact_td_type": ["Architectural TD", "Code TD"], "artifact_td_type_evidence": "The application of a refactoring can eliminate specific architectural anomalies or principle violations, widely known as \u201ccode smells\u201d, and restore the code structure that exhibited a smell, to an acceptable level of quality.", "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": "The developed plugin has been applied on SweetHome3D (v.4.0) which is an open-source Java interior design application. Size properties are shown in Table I. The approach revealed one characteristic example shown in Fig. 5.", "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": "The developed plugin has been applied on SweetHome3D (v.4.0) which is an open-source Java interior design application. Size properties are shown in Table I. ", "artifact_advantages": "Measuring symptom severity on a smell thermometer can highlight suspect hierarchies that warrant further attention. We believe that the concept of intentionally introduced errors and\r\nthe inspection of the resulting software behavior by means of test case execution can be generalized for the detection of other architectural problems.", "artifact_limitations": "The tool is focused only in one language (JAVA)\r\nIt is able to detect just one type of smell", "artifact_gaps": "Extent the plugin to identify more types of smells.", "artifact_other_comments": null, "study_code": "1", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": "This paper proposes a methodology for the identification of the Refused Bequest smell that employs static source code analysis for the identification of suspicious hierarchies and dynamic unit test execution for the determination of subclasses that actually exhibit the smell. ", "artifact_license": "Open Source", "artifact_license_evidence": "The source code is available on Github", "artifact_automation_provided": ["Identification of code smells"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuf5omEP7otfyFHrDYVyzvgvZ204Z-Ms-GtGEqSaC9NRvsazQ2DfZ42CXtzOlJgpaDQ"}, "2": {"selection_timestamp": "7/11/2022 15:39:15", "study_title": "A multiple case study of design pattern decay, grime, and rot in evolving software systems", "study_authors": "Clemente Izurieta\r\nJames M. Bieman", "study_author_type": "Academia", "study_year": 2013.0, "study_venue": "Software Qual J", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1007/s11219-012-9175-x", "study_bibtex": "@article{Izurieta2012,\r\n  doi = {10.1007/s11219-012-9175-x},\r\n  url = {https://doi.org/10.1007/s11219-012-9175-x},\r\n  year = {2012},\r\n  month = feb,\r\n  publisher = {Springer Science and Business Media {LLC}},\r\n  volume = {21},\r\n  number = {2},\r\n  pages = {289--323},\r\n  author = {Clemente Izurieta and James M. Bieman},\r\n  title = {A multiple case study of design pattern decay,  grime,  and rot in evolving software systems},\r\n  journal = {Software Quality Journal}\r\n}", "study_summary": "This research examined the extent to which software designs actually decay, rot, and accumulate grime by studying the aging of design patterns in three successful object-oriented systems.", "study_problem": "Design pattern realizations can also rot, when changes break the structural or functional integrity of a design pattern. Design pattern rot can prevent a pattern realization from fulfilling its responsibilities, and thus represents a fault. Grime buildup does not break the structural integrity of a pattern but can reduce system testability and adaptability.", "study_objective": "This research examined the extent to which software designs actually decay, rot, and accumulate grime by studying the aging of design patterns in three successful object-oriented systems.", "study_results": "We found no evidence of design pattern rot in these systems. However, we found considerable evidence of pattern decay due to grime. Dependencies between design pattern components increased without regard for pattern intent, reducing pattern modularity, and decreasing testability and adaptability. The study of decay and grime showed that the grime that builds up around design patterns is mostly due to increases in coupling.", "artifact_name": ["JDepends", "JavaNCSS"], "artifact_description": "JDepends generates design quality metrics for the source code trees under study. JDepends calculates afferent coupling and efferent coupling only at the package level, so it supports the analysis of organizational grime.\r\n\r\nJavaNCSS is a command line utility designed to gather code metrics for\r\nprograms written in Java including cyclomatic complexity and non-commenting\r\nsource statements (NCSS).", "artifact_link": ["https://github.com/clarkware/jdepend", "", "https://github.com/nokia/javancss"], "artifact_sdlc": ["Implementation", "Evolution/Maintenance"], "artifact_sdlc_evidence": "The tools are applied in source code.", "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": "Both artifacts can run individually and provide an specific functionality.", "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": "The tools can calculate some metrics considering the source code (e.g., coupling), what indicates symptoms of TD.", "artifact_td_type": ["Not cited"], "artifact_td_type_evidence": "There is no part in the text that points the type of TD.", "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": "The study shows a case study with three software systems.", "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": "The study shows a case study with three software systems.", "artifact_advantages": "Automatically calculate code metrics", "artifact_limitations": "Restricted to Java", "artifact_gaps": "Developing refactoring techniques to contain grime is a natural progression of this research.", "artifact_other_comments": "Decay\r\nGrime\r\nRot", "study_code": "2", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": "The booth tools are used to analyze code and generate metrics based on them.", "artifact_license": "Open Source", "artifact_license_evidence": "The source code is available on Github", "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucJy1Yx2mDMFQOWHjCgBc6fZX6kn8KuC3eCXJw8tp-yqxitstJCUuDlEZnYTJD0YoA"}, "16": {"selection_timestamp": "7/11/2022 17:04:28", "study_title": "Integrating Technical Debt into MDE", "study_authors": "Faber D. Giraldo\r\nSergio Espana\r\nManuel A. Pineda\r\nWilliam J. Giraldo\r\nOscar Pastor", "study_author_type": "Academia", "study_year": 2014.0, "study_venue": "International Conference on Advanced Information Systems Engineering", "study_venue_type": "Conference", "study_link": "http://ceur-ws.org/Vol-1164/PaperDemo02.pdf", "study_bibtex": "@inproceedings{Giraldo2014,\r\n  author    = {F{\\'{a}}ber D. Giraldo and\r\n               Sergio Espa{\\~{n}}a and\r\n               Manuel A. Pineda and\r\n               William J. Giraldo and\r\n               Oscar Pastor},\r\n  editor    = {Selmin Nurcan and\r\n               Elias Pimenidis and\r\n               Oscar Pastor and\r\n               Yannis Vassiliou},\r\n  title     = {Integrating Technical Debt into {MDE}},\r\n  booktitle = {Joint Proceedings of the CAiSE 2014 Forum and CAiSE 2014 Doctoral\r\n               Consortium co-located with the 26th International Conference on Advanced\r\n               Information Systems Engineering (CAiSE 2014), Thessaloniki, Greece,\r\n               June 18-20, 2014}\r\n  year      = {2014},\r\n  url       = {http://ceur-ws.org/Vol-1164/PaperDemo02.pdf},\r\n  timestamp = {Mon, 18 Jan 2021 08:56:37 +0100},\r\n  biburl    = {https://dblp.org/rec/conf/caise/GiraldoEPGP14.bib},\r\n  bibsource = {dblp computer science bibliography, https://dblp.org}\r\n}", "study_summary": "The main contribution of the study is to provide an initial effort on integrating MDE and Technical debt. Authors developed a plugin to to verify models using SonarQube", "study_problem": "Two issues pose challenges to the inclusion of technical debt into MDE. (i) Different authors provide conflicting conceptions of quality in model management within MDE evironments[5]. (ii) The MDE literature often neglects techniques for source code analysis and quality control. Therefore, in model-driven developments it is difficult to perform an analysis of the state of the project that is important for technical debt management: establishing what has been done, what remains to be done, how much work has been left undone.", "study_objective": "The SonarQube tool was used, so that the quality check was performed directly on projects created with Eclipse Modeling Framework (EMF) instead of traditionals source code projects.", "study_results": "In this work,\r\n\r\nXML was used as the model specification language to verify in SonarQube due to the creation of EMF metamodels in XMI (XML Metadata Interchange) and that SonarQube offers a plugin to assess the XML language. After this, our work focused on the definition of model rules as an XSD schema (XML Schema Definition) and the integration between EMF-SonarQube in order that these metrics were directly validated by SonarQube; and subsequently, this tool determined the technical debt that the analyzed EMF models could contain.", "artifact_name": ["SonarQube"], "artifact_description": "SonarQube offers an issues report where it indicates the number of errors\r\nfound; and consequently, the error list distributed in order of importance from\r\nhighest to lowest:\r\n\r\n\u2013 Blocker: they are the most serious errors; they should have the highest priority to review.\r\n\u2013 Critical: they are design errors which affect quality or performance of the\r\nproject (model errors can be classified in this category).\r\n\u2013 Major: although these errors do not affect performance, they require to be\r\nfixed for quality concerns.\r\n\u2013 Minor: they are minor errors that do not affect the operation of the project.\r\n\u2013 Info: they are reporting errors, not dangerous.", "artifact_link": ["https://www.sonarqube.org/"], "artifact_sdlc": ["Implementation"], "artifact_sdlc_evidence": "In MDE, models are designed to generate code, therefore, the use of this tool should be done during the implementation (in this study)", "artifact_type": "Tool", "artifact_type_evidence": "Authors define SonarQube as a tool.", "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": "With a set of rules, SonarQube can identify violations and calculate the effort to correct the issues.", "artifact_td_type": ["Not cited"], "artifact_td_type_evidence": "The TD type is not cited by the authors. Moreover, it is not possible map the models of MDE into a TD type.", "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "It is possible to use the tool as an eclipse plugin,  allowing the visualization of TD.", "artifact_limitations": "It is limited to analyze models.", "artifact_gaps": "Implement the features to other languages.", "artifact_other_comments": null, "study_code": "16", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": "The authors used SonarQube to check models.", "artifact_license": "Open Source", "artifact_license_evidence": "There is a version of SonarQube open source", "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueSys_7Ej2GFGBPd-THzqrjpRS5r1ybl3V8Vo3mRScgmneDVxesszW5OtmFjLpM93Q"}, "29": {"selection_timestamp": "7/12/2022 10:20:01", "study_title": "(Automated) Software Modularization Using Community Detection", "study_authors": "Klaus Marius Hansen\r\nKonstantinos Manikas", "study_author_type": "Academia", "study_year": 2015.0, "study_venue": "European Conference on Software Architecture", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1007/978-3-319-23727-5_8", "study_bibtex": "@INCOLLECTION{Hansen2015,\r\n  title     = \"(automated) software modularization using community detection\",\r\n  booktitle = \"Software Architecture\",\r\n  author    = \"Hansen, Klaus Marius and Manikas, Konstantinos\",\r\n  publisher = \"Springer International Publishing\",\r\n  pages     = \"95--102\",\r\n  series    = \"Lecture notes in computer science\",\r\n  year      =  2015,\r\n  address   = \"Cham\"\r\n}\r\n\r\n", "study_summary": "The study proposes a new method to optimize the modularity of a system, by measuring it.", "study_problem": "The modularity and the module structure is an important part of the software architecture of software systems. It has an effect on, among other, development effort, change impact, and technical debt.", "study_objective": "In particular, we propose the use of Newman modularity with an Erd \u030bos-R \u0301enyi null-model for measuring software modularity and the Reichardt and Bornholdt community detection algorithm that propose a convenient framework for community detection and thus for optimised software modularity.", "study_results": "Our results reveal that our optimisation improved Newman modularity for all systems, that\r\ncoupling decreased for 99 of the systems, and that coherence increased for 102\r\nof the systems.", "artifact_name": ["louvain-igraph"], "artifact_description": " The core function is find_partition which finds the optimal partition using the louvain algorithm [1] for a number of different methods. The methods currently implemented are (1) modularity [2], (2) Reichardt and Bornholdt's model using the configuration null model and the Erd\u00f6s-R\u00e9nyi null model [3], (3) the constant Potts model (CPM) [4], (4) Significance [5], and finally (5) Surprise [6]. In addition, it supports multiplex partition optimisation allowing community detection on for example negative links [7] or multiple time slices [8]. It also provides some support for community detection on bipartite graphs. See the documentation for more information.", "artifact_link": ["https://github.com/vtraag/louvain-igraph"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": "They use Java classes to evaluate the modularity of the system.", "artifact_type": "Package", "artifact_type_evidence": "This package implements the louvain algorithm in C++ and exposes it to python. It relies on (python-)igraph for it to function.", "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": "The core function is find_partition which finds the optimal partition using the louvain algorithm [1] for a number of different methods.", "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": "The modularity and the module structure is an important part of the software\r\narchitecture of software systems.", "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": "In the following section we explain the design of our study. We conducted a\r\ntechnology-oriented quasi-experiment", "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": "In the following section we explain the design of our study. We conducted a\r\ntechnology-oriented quasi-experiment", "artifact_advantages": "It can automatically verify the level o modularity of a system", "artifact_limitations": "Not cited", "artifact_gaps": "Not cited", "artifact_other_comments": null, "study_code": "29", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": "The package calculates the modularity of the system.", "artifact_license": "Open Source", "artifact_license_evidence": "The source code is available on Github", "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufJom340DSy7rXBqSNJ4u4DpZLBhbWQaHdIgv5THSWvTvdgz7r-nowjL4GWMf-92Nw"}, "76": {"selection_timestamp": "7/12/2022 12:11:28", "study_title": "Tool support for evaluating architectural debt of an existing system: An experience report", "study_authors": "Francesca Arcelli Fontana\r\nRiccardo Roveda\r\nMarco Zanoni", "study_author_type": "Academia", "study_year": 2016.0, "study_venue": "ACM/SIGAPP Symposium on Applied Computing", "study_venue_type": "Conference", "study_link": "http://dx.doi.org/10.1145/2851613.2851963", "study_bibtex": "@INPROCEEDINGS{Fontana2016-mt,\r\n  title           = \"Tool support for evaluating architectural debt of an\r\n                     existing system\",\r\n  booktitle       = \"Proceedings of the 31st Annual {ACM} Symposium on Applied\r\n                     Computing\",\r\n  author          = \"Fontana, Francesca Arcelli and Roveda, Riccardo and\r\n                     Zanoni, Marco\",\r\n  publisher       = \"ACM\",\r\n  month           =  apr,\r\n  year            =  2016,\r\n  address         = \"New York, NY, USA\",\r\n  copyright       = \"http://www.acm.org/publications/policies/copyright\\_policy\\#Background\",\r\n  conference      = \"SAC 2016: Symposium on Applied Computing\",\r\n  location        = \"Pisa Italy\"\r\n}\r\n", "study_summary": "The study proposes a comparison among three different tools for evaluating Architectural debt  ", "study_problem": "Architectural erosion and degradation [6] of an application lead to architectural debt, and cause problems to the maintainability and evolution of the application. These problems have to be identified and then solved through the right refactoring and reengineering steps.", "study_objective": "This paper aims to describe our experimentation using these tools, by ana-\r\nlyzing different systems.", "study_results": "We found that Sonargraph provides the largest set of useful functions for the considered task.", "artifact_name": ["Sonargraph-Quality", "SonarQube", "inFusion"], "artifact_description": "(Sonargraph) Moreover, the tool computes different metrics and detects violations to programming best practices. The only supported architectural smells are cyclic dependencies.\r\n\r\n(SonarQube) Its main features are checking large sets of coding and design rules and gathering metrics.\r\n\r\n(inFusion) inFusion supports the evaluation of software quality with a focus on code smells, called Design Flaws, which are detected by evaluating different metrics.", "artifact_link": ["https://www.hello2morrow.com/products/sonargraph", "http://www.sonarqube.org", "http://www.intooitus.com/products/infusion"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": "The tools analyze source code.", "artifact_type": "Tool", "artifact_type_evidence": "Many tools, both commercial and academic, are available, offering functionalities useful for software quality and architecture assessment. According to our knowledge, a few tools provide a Technical Debt or Quality Index.", "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": "In this paper, we described our experience in using three tools able to provide a quality/debt index, with the aim of evaluating the architectural debt and the overall quality of a software project.", "artificat_evidence_level": "Expert Opinion", "artifact_evidence_level_evidence": "In this paper, we described our experience in using three tools able to provide a quality/debt index, with the aim of evaluating the architectural debt and the overall quality of a software project. ", "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": "In this paper, we described our experience in using three tools able to provide a quality/debt index, with the aim of evaluating the architectural debt and the overall quality of a software project.", "artifact_advantages": "We think that this experience report can be useful to developers or maintainers to have a summary on the state of tools in identifying architectural debt, and to tools\u2019 developers to improve their tools.", "artifact_limitations": "For example, we found that the available Indexes summarizing the quality or debt of the projects are not directly useful when evaluating a single project. These measures cannot be interpreted with the aim to understand the overall quality of the analyzed project on a global scale.\r\n\r\nOf consequence, we think that these Indexes are currently useful only on a relative scale, in the case a single team evaluates an entire portfolio of applications.", "artifact_gaps": "Compare other tools.", "artifact_other_comments": null, "study_code": "76", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": "(Sonargraph) Moreover, the tool computes different metrics and detects violations to programming best practices. The only supported architectural smells are cyclic dependencies.\r\n\r\n(SonarQube) Its main features are checking large sets of coding and design rules and gathering metrics.\r\n\r\n(inFusion) inFusion supports the evaluation of software quality with a focus on code smells, called Design Flaws, which are detected by evaluating different metrics.", "artifact_license": "SonarQube  (Open Source), Other (Commercial)", "artifact_license_evidence": "We found SonarQube, Sonargraph, and inFusion (the first is open source, the others commercial).", "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudCnP6_0IVlgy2ZW8aYluDT7_zlNXvj34y2pfnIas2lZyn1NW9y1Dll5B4UhmmqRUY"}, "88": {"selection_timestamp": "7/12/2022 14:11:40", "study_title": "Technical Debt Indexes provided by tools: a preliminary discussion", "study_authors": "Francesca Arcelli Fontana\r\nRiccardo Roveda\r\nMarco Zanoni", "study_author_type": "Academia", "study_year": 2016.0, "study_venue": "International Workshop on Managing Technical Debt", "study_venue_type": "Workshop", "study_link": "https://doi.org/10.1109/MTD.2016.11", "study_bibtex": "@INPROCEEDINGS{Fontana2016-ag,\r\n  title           = \"Technical debt indexes provided by tools: A preliminary\r\n                     discussion\",\r\n  booktitle       = \"2016 {IEEE} 8th International Workshop on Managing\r\n                     Technical Debt ({MTD})\",\r\n  author          = \"Fontana, Francesca Arcelli and Roveda, Riccardo and\r\n                     Zanoni, Marco\",\r\n  publisher       = \"IEEE\",\r\n  month           =  oct,\r\n  year            =  2016,\r\n  conference      = \"2016 IEEE 8th International Workshop on Managing Technical\r\n                     Debt (MTD)\",\r\n  location        = \"Raleigh, NC, USA\"\r\n}\r\n", "study_summary": "In this paper, we outline how the indexes, that we call in general Technical Debt Indexes, provided by five different tools are computed.", "study_problem": "Detecting these anomalies is useful to identify problems to be solved through the right refactoring steps, but this does not provide us an indication of the overall quality assessment of a project.", "study_objective": "We focus our attention on the TDI provided by known tools, with the aim to understand what\r\nexactly each index takes into account, what the value of the index represents, and its completeness w.r.t. the information that can be exploited to estimate Technical Debt.", "study_results": "We describe their principal features and differences, what aspects they are missing, and we outline if (and how) the indexes take into account architectural problems that could have a major impact on the architectural debt. We show that the indexes rely on different information sources and measure different quantities.", "artifact_name": ["CAST", "inFusion", "Sonargraph", "SonarQube", "Structure101"], "artifact_description": "Description of each tool can be collected in the websites", "artifact_link": ["http://www.castsoftware.com/", "http://www.aireviewer.com", "http://structure101.com/products/", "http://docs.sonarqube.org/", "https://www.hello2morrow.com/products/sonargraph"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Expert Opinion", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "As a consequence, we think that these Indexes are in particular useful on a relative scale, in the case a single team evaluates an entire portfolio of applications.", "artifact_limitations": "In most cases, the available Indexes are not directly useful when evaluating a single project. The provided measures cannot be interpreted with the aim to understand the overall quality of the analyzed project on a global scale.", "artifact_gaps": "In future work, we are interested in verifying how much architectural issues affect the overall quality, with the aim of giving different relevance to architecture and design issues w.r.t. coding ones in a TDI. We plan to investigate the role of code and architectural smells in TD, since they are associated to known solutions, that can speed up their resolution process.", "artifact_other_comments": null, "study_code": "88", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "SonarQube is open source, other commercial.", "artifact_license_evidence": "SonarQube is free and open source, while the other ones are commercial tools.", "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufinPtlREciD3k-4qiZcQhbq0uOclSZffP_0kCyVl9FV4XefJPkpzK_zRUnZ358EPU"}, "109": {"selection_timestamp": "7/12/2022 15:07:15", "study_title": "Technical Debt Principal Assessment through Structural Metrics", "study_authors": "Makrina Viola Kosti\r\nApostolos Ampatzoglou\r\nAlexander Chatzigeorgiou\r\nGeorgios Pallas\r\nIoannis Stamelos\r\nLefteris Angelis", "study_author_type": "Academia", "study_year": 2017.0, "study_venue": "Euromicro Conference on Software Engineering and Advanced Applications", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SEAA.2017.59", "study_bibtex": "@inproceedings{Kosti2017,\r\n  doi = {10.1109/seaa.2017.59},\r\n  url = {https://doi.org/10.1109/seaa.2017.59},\r\n  year = {2017},\r\n  month = aug,\r\n  publisher = {{IEEE}},\r\n  author = {Makrina Viola Kosti and Apostolos Ampatzoglou and Alexander Chatzigeorgiou and Georgios Pallas and Ioannis Stamelos and Lefteris Angelis},\r\n  title = {Technical Debt Principal Assessment Through Structural Metrics},\r\n  booktitle = {2017 43rd Euromicro Conference on Software Engineering and Advanced Applications ({SEAA})}\r\n}", "study_summary": "In this paper, we empirically explore this relation by analyzing data obtained from 20 open source software projects and build a regression model that establishes a relationship between them.", "study_problem": "Although both approaches have merit, they seem to rely on different viewpoints of TD and their levels of agreement have not been evaluated so far.", "study_objective": "Specifically, we investigate if the monetized TD principal assessments can be subsumed by metric scores.", "study_results": "The results of the study suggest that a model of seven structural metrics, quantifying different aspects of quality (i.e., coupling, cohesion, complexity, size, and inher-\r\nitance) can accurately estimate TD principal as appraised by SonarQube.", "artifact_name": ["SonarQube"], "artifact_description": "The description of the artifact will be collected in the website.", "artifact_link": ["https://docs.sonarqube.org"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Regarding future research directions we intend to re-evaluate this model by using an even larger dataset, including a plethora of other well-known open source projects (also smaller ones), that covers more than one programming languages. Additionally, we suggest researchers to further investigate the important metrics (as suggested by our study) with respect to the rest metrics validity criteria described in ISO 1061. Finally, the use of other ways of synthesizing data, e.g., tree-based classifications or Bayes network can be exploited.", "artifact_other_comments": null, "study_code": "109", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufRAUQb4ZPaxvxMf1-OE2du9zN-Tkva5May_b4pWaK4o0QrTQ7Gl-2t7pQ5JS0n-LA"}, "116": {"selection_timestamp": "7/12/2022 15:39:30", "study_title": "SonarQube as a Tool to Identify Software Metrics and Technical Debt in the Source Code through Static Analysis", "study_authors": "Daniel Guaman\r\nPablo Alejandro-Quezada Sarmiento\r\nLuis Barba-Guam\u00e1n\r\nPaola Cabrera\r\nLiliana Enciso", "study_author_type": "Academia", "study_year": 2017.0, "study_venue": "International Workshop on Computer Science and Engineering", "study_venue_type": "Workshop", "study_link": "http://doi.org/10.18178/wcse.2017.06.030", "study_bibtex": "@INPROCEEDINGS{Guaman2017,\r\n  title      = \"{SonarQube} as a tool to identify software metrics and\r\n                technical debt in the source code through static analysis\",\r\n  booktitle  = \"Proceedings of 2017 the 7th International Workshop on Computer\r\n                Science and Engineering\",\r\n  publisher  = \"WCSE\",\r\n  year       =  2017,\r\n  conference = \"2017 the 7th International Workshop on Computer Science and\r\n                Engineering\",\r\n  author = \"Daniel Guaman, and Pablo Alejandro-Quezada Sarmiento, and Luis Barba-Guam\u00e1n, and Paola Cabrera, and Liliana Enciso\"\r\n}", "study_summary": "This paper, use as input the source code of the software applications written in different programming language for through static analysis identify metrics, characteristics, and technical debt with the aim to improve the quality when writing code, also supported in static analysis identify aspects such as correct apply of quality attributes, standards and best practices of programming that based in ISO 9126 and SQALE ensure the correct software development in terms of design and coding.", "study_problem": null, "study_objective": "This paper exposes the search, classify and analysis of aspects related to technical debt in the code, also showed the use of SonarQube combined with static analysis as a technique to analyze the software characteristics from the source code to determine possible issues in the people that develop software.", "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": "Is a platform to manage and control the code quality in seven axes through SQALE Method\r\n[5, 16]. SonarQube is basically the fusion of two static code analysis tools such as Check Style [7] and PMD [8]. Check Style is a tool of code quality to validate the building standards and find potential problems in the source code and PMD is a source code analyzer; through this tool we can find common programming defects [17].", "artifact_link": ["http://www.sonarsource.com/products/features/technical-debt-evaluation/"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "Not discussed", "artifact_limitations": "Not discussed", "artifact_gaps": "Not discussed", "artifact_other_comments": null, "study_code": "116", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufezBG7Yqur-6Dc_3BmpqQkbvANhoXA4KGgPFvQO44AF0ZtgPiF6WmnSBfTtiK2ZO0"}, "163": {"selection_timestamp": "7/12/2022 16:24:09", "study_title": "SATD Detector: A Text-Mining-Based Self-Admitted Technical Debt Detection Tool", "study_authors": "Zhongxin Liu\r\nQiao Huang\r\nXin Xia\r\nEmad Shihab\r\nDavid Lo\r\nShanping Li", "study_author_type": "Academia", "study_year": 2018.0, "study_venue": "International Conference on Software Engineering", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3183440.3183478", "study_bibtex": "@INPROCEEDINGS{Liu2018-ci,\r\n  title           = \"{SATD} detector\",\r\n  booktitle       = \"Proceedings of the 40th International Conference on\r\n                     Software Engineering: Companion Proceeedings\",\r\n  author          = \"Liu, Zhongxin and Huang, Qiao and Xia, Xin and Shihab,\r\n                     Emad and Lo, David and Li, Shanping\",\r\n  publisher       = \"ACM\",\r\n  month           =  may,\r\n  year            =  2018,\r\n  address         = \"New York, NY, USA\",\r\n  copyright       = \"http://www.acm.org/publications/policies/copyright\\_policy\\#Background\",\r\n  conference      = \"ICSE '18: 40th International Conference on Software\r\n                     Engineering\",\r\n  location        = \"Gothenburg Sweden\"\r\n}\r\n", "study_summary": null, "study_problem": "However, most current state-of-the-art approaches identify SATD comments through pattern matching, which achieve high precision but very low recall. That means they may miss many SATD comments and are not practical enough.", "study_objective": "In this paper, we propose SATD Detector, a tool that is able to (i) automatically detect SATD comments using text mining and (ii) highlight, list and manage detected comments in an integrated development environment (IDE). This tool consists of a Java library and an Eclipse plug-in.", "study_results": null, "artifact_name": ["SATD Detector"], "artifact_description": "SATD refers to self-admitted technical debt, which is introduced intentionally (e.g., through temporary fix) and admitted by developers themselves and always recorded in source code comments. SATD Detector[1] is a tool that is able to automatically detect SATD comments text mining. This is the back-end of SATD Detector, which provides command-line interface and Java API of SATD Detector. More details can be found in [1].", "artifact_link": ["https://github.com/Tbabm/SATDDetector-Core", "https://drive.google.com/drive/folders/1k2o4BsNt9O2v7c4P7ktlDbBmFiYEY--K"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Monitoring", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Not cited"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "Through the back-end library, users can re-train the text mining model and integrate SATD Detector into other development tools easily. The Eclipse plug-in is able to remind\r\ndevelopers and managers of existing SATD and help them pay for SATD in time.", "artifact_limitations": "It is developed only for JAVA", "artifact_gaps": "Extend to other languages", "artifact_other_comments": null, "study_code": "163", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": "The source code is available on Github", "artifact_automation_provided": ["nan"], "artifact_input": "Code Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucyzJGMsTfhgApUUpWaZ3-YDP6qVynKiyJ9EQn_kPmuUq56NJR_nf3j-fxqK2C6Zgs"}, "172": {"selection_timestamp": "7/12/2022 16:34:44", "study_title": "Prioritize Technical Debt in Large-Scale Systems using CodeScene", "study_authors": "ADAM TORNHILL", "study_author_type": "Industry", "study_year": 2018.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3194164.3194187", "study_bibtex": "@INPROCEEDINGS{Tornhill2018-bm,\r\n  title           = \"Prioritize technical debt in large-scale systems using\r\n                     codescene\",\r\n  booktitle       = \"Proceedings of the 2018 International Conference on\r\n                     Technical Debt\",\r\n  author          = \"Tornhill, Adam\",\r\n  publisher       = \"ACM\",\r\n  month           =  may,\r\n  year            =  2018,\r\n  address         = \"New York, NY, USA\",\r\n  copyright       = \"http://www.acm.org/publications/policies/copyright\\_policy\\#Background\",\r\n  conference      = \"ICSE '18: 40th International Conference on Software\r\n                     Engineering\",\r\n  location        = \"Gothenburg Sweden\"\r\n}\r\n\r\n", "study_summary": "This paper examines how CodeScene, a tool for predictive analyses and visualizations, can be used to prioritize technical debt in a large-scale codebase like the Linux Kernel based on the most likely return on code improvements.", "study_problem": null, "study_objective": null, "study_results": null, "artifact_name": ["CodeScene"], "artifact_description": "Static code analysis techniques may help an organization detect potential maintenance issues such as high cyclomatic complexity and duplicated code [4]. However, static code\r\nanalysis treats all code as equally important and may consequently be impractical as the pay-off on improving the code is uncertain. CodeScene resolves this issue by viewing\r\ncode properties through the lens of behavioral data mined from version-control systems. CodeScene acknowledges that the importance of individual metrics varies with the situation.", "artifact_link": ["https://codescene.io/"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Priorization"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Not cited"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "Tooling like this also has the potential to highlight the impact of technical debt by le$ing stakeholders share a view of what the code quality looks like, as well as how the\r\ndevelopment efforts change over time. \"is makes it easier for non-technical managers and technical personnel to communicate as they both share the same view of the system.", "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "172", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Commercial/Private", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueTPrbtly3_XRHv4d5sFC1nBt_-0ceGYkWBiYiSAsVnvN9gM-0jOp98xfT5HnHar_o"}, "158": {"selection_timestamp": "7/13/2022 9:33:33", "study_title": "Identifying and Prioritizing Architectural Debt Through Architectural Smells: A Case Study in a Large Software Company", "study_authors": "Antonio Martini\r\nFrancesca Arcelli Fontana\r\nAndrea Biaggi\r\nRiccardo Roveda", "study_author_type": "Both", "study_year": 2018.0, "study_venue": "European Conference on Software Architecture", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1007/978-3-030-00761-4_21", "study_bibtex": "@INCOLLECTION{Martini2018-hy,\r\n  title     = \"Identifying and prioritizing architectural debt through\r\n               architectural smells: A case study in a large software company\",\r\n  booktitle = \"Software Architecture\",\r\n  author    = \"Martini, Antonio and Fontana, Francesca Arcelli and Biaggi,\r\n               Andrea and Roveda, Riccardo\",\r\n  publisher = \"Springer International Publishing\",\r\n  pages     = \"320--335\",\r\n  series    = \"Lecture notes in computer science\",\r\n  year      =  2018,\r\n  address   = \"Cham\"\r\n}\r\n", "study_summary": "We conducted an in-depth investigation with a questionnaire, interviews and thorough\r\ninspection of the code with the practitioners.", "study_problem": "Architectural technical debt can have a huge impact on software maintainability and evolution. Hence, different architectural violations, detected as architectural smells, need to be identified and refactored.", "study_objective": "In this paper, we conducted a multiple case-study on several architectural smells detected in four industrial projects.", "study_results": "The results show that practitioners appreciated the help of automatic detection, and that they prioritize refactoring architectural debt that causes more negative impact despite the higher refactoring effort.", "artifact_name": ["Arcan"], "artifact_description": "Arcan [5] is a tool for architectural smell detection in Java projects.\r\n\r\nMoreover, Arcan estimates the Severity of each architectural smell [19] according to the values of the metrics used for the AS detection. A Severity-Score(ASk) is evaluated for each instance of AS and according to each type of AS in order to evaluate the criticality of the smell.", "artifact_link": ["https://essere.disco.unimib.it/wiki/arcan/"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Expert Opinion", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "We decided to use Arcan for: reproducibility purposes since the tool is fully available online, it has been previously validated and the formulas used to identify the smells are well known. This allows other researchers to reproduce this study in other organizations and compare the results with ours.\r\n\r\nThe tool helped identifying half of the problems that were not previously known by the practitioners, and provided evidence for the known ones.", "artifact_limitations": "According to Question 4.1, half of the practitioners found Arcan\u2019s output quite difficult to understand without using the graph generated by Neo4j.\r\n\r\n", "artifact_gaps": "Finally, we aim to analyze and detect through Arcan other categories of architectural smells other than those related to dependency issues, such as smells related to the interface (Ambiguous Interface, Redundant Interface and Unstable Interface [26]) or smells related to performance or security issues.", "artifact_other_comments": "Practitioners found that Cyclic Dependency is the most important smell to detect, while (Question 4.5) Unstable Dependency seems to be the less important to detect (Fig. 4d).", "study_code": "158", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueyAWODPUqm5cvMdm0wgb-i79nbgum0JEpamp86BNWd1N7MROFIqY5ZLJzmtQn49Qk"}, "71": {"selection_timestamp": "7/13/2022 10:46:06", "study_title": "Minimizing refactoring effort through prioritization of classes based on historical, architectural and code smell information", "study_authors": "Aabha Choudhary\r\nParamvir Singh", "study_author_type": "Academia", "study_year": 2016.0, "study_venue": "International Workshop on Technical Debt Analytics", "study_venue_type": "Workshop", "study_link": "https://www.semanticscholar.org/paper/Minimizing-Refactoring-Effort-through-of-Classes-on-Choudhary-Singh/aa6626d94135fa3b565690c5fa1187d7f8611c4d", "study_bibtex": "@inproceedings{Choudhary2016MinimizingRE,\r\n  title={Minimizing Refactoring Effort through Prioritization of Classes based on Historical, Architectural and Code Smell Information},\r\n  author={Aabha Choudhary and Paramvir Singh},\r\n  booktitle={QuASoQ/TDA@APSEC},\r\n  year={2016}\r\n}", "study_summary": null, "study_problem": "Despite its amenities, refactoring is not readily adopted by software development teams in industry mainly due to strict project deadlines and limited resources.", "study_objective": "They proposed an approach to identify and prioritize classes that need refactoring.", "study_results": "We evaluated the proposed approach on a sample of 1621 classes\r\nand 2358 code smell instances, distributed over 28 versions of\r\nfour open source java systems.", "artifact_name": ["JSpIRIT"], "artifact_description": "In the final step, JSpIRIT7 is used to detect code smell\r\ninstances in the current versions of the sample applications.\r\nAlthough JSpIRIT is generally used for prioritizing code\r\nsmells, we exploited its detection features only (as it does not\r\nprovide the code smell severity scores as desired for this\r\nstudy). It supports the identification of 10 code smells using a\r\nsoftware metric-based detection strategy. This metric-based\r\nstrategy dissolves our need to calculate the object-oriented\r\nmetrics values separately for predicting smelly classes, as the\r\nclasses will be automatically categorized as \u2018smelly\u2019.\r\n\r\n", "artifact_link": ["https://sites.google.com/site/santiagoavidal/projects/jspirit"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Plugin", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "work would be to aim more number of distinct code smells to\r\nfurther gain in terms of saved refactoring effort and increased\r\ncode smell correction.", "artifact_other_comments": null, "study_code": "71", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudKsTJll807IvQxwTlr258922t-DOz_ggmhcuGv36g1jx1zbdkfyH1CZE7vzNNl5QY"}, "123": {"selection_timestamp": "7/13/2022 11:05:48", "study_title": "The Magnificent Seven: Towards a Systematic Estimation of Technical Debt Interest", "study_authors": "Antonio Martini\r\nJan Bosch", "study_author_type": "Academia", "study_year": 2017.0, "study_venue": "International Workshop on Managing Technical Debt", "study_venue_type": "Workshop", "study_link": "https://doi.org/10.1145/3120459.3120467", "study_bibtex": "@INPROCEEDINGS{Martini2017-rx,\r\n  title           = \"The magnificent seven\",\r\n  booktitle       = \"Proceedings of the {XP2017} Scientific Workshops\",\r\n  author          = \"Martini, Antonio and Bosch, Jan\",\r\n  publisher       = \"ACM\",\r\n  month           =  may,\r\n  year            =  2017,\r\n  address         = \"New York, NY, USA\",\r\n  copyright       = \"http://www.acm.org/publications/policies/copyright\\_policy\\#Background\",\r\n  conference      = \"XP '17 Workshops: Proceedings of the Scientific Workshops\r\n                     of XP2017\",\r\n  location        = \"Cologne Germany\"\r\n}\r\n", "study_summary": null, "study_problem": "The negative\r\neffects (severity) of Technical Debt might depend on the context of\r\nthe organization and the estimations might be subjective. There is\r\na need for assessing Technical Debt interest in a more systematic\r\nway.", "study_objective": "Based on the results of previous research, we have developed and\r\nused a lightweight tool, AnaConDebt, to assess the severity of the\r\ninterest of 9 Technical Debt items with the stakeholders in 3 Agile\r\nteams. The systematic and semi-automatic assessment of seven\r\nfactors and their growth has been compared to the stakeholders\u2019\r\nintuitive estimations.", "study_results": "The results show that the outcome of the tool is very close to the\r\nestimation given by the stakeholders. The implications are that, if\r\nfurther data support the hypothesis, the severity of the interest can\r\nbe systematically assessed by the stakeholders by estimating only\r\nseven factors in a cost-effective manner with acceptable results.", "artifact_name": ["AnaConDebt"], "artifact_description": "The tool AnaConDebt was designed for helping the systematic\r\nassessment and communication of the interest of Technical Debt\r\namong developers, architects and product owners (managers). The\r\ntool has a web-interface that collects the input from the users with\r\nrespect to the negative impact. The tool uses a web-service that\r\ncalculates an overall interest score based on the input. Then, the\r\ntool shows a backlog of the ranked items with respect to the input.", "artifact_link": ["https://ericsson.anacondebt.com/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": null, "artifact_type_evidence": null, "artifact_td_activities": ["Representation/Documentation", "Monitoring", "Priorization", "Measurement"], "artifact_td_activities_evidence": "The current approach makes it also pos-\r\nsible to compare TD items within the same system, which allows\r\n\r\ntheir prioritization.", "artifact_td_type": ["Not cited"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": "This suggests a high precision of the tool. In other\r\nwords, the estimations from the developers and the tools agreed to\r\nlarge extent.\r\n\r\nThis means that the tool calculation, based on the seven\r\nfactors, captures quite well the severity of interest perceived by\r\nthe developers.\r\n\r\nThis shows that the developers largely\r\nagreed with the outcome of the tool. This is an important factor\r\nfor the method to be employed in practice.\r\n\r\n", "artifact_limitations": "The tool and the methods do not provide the real current and future\r\ninterest of the Technical Debt\r\n\r\n", "artifact_gaps": "In future work, we aim at understanding if\r\nthe same systematic approach can be used to compare TD across\r\nprojects and products in the same organization (and even beyond)\r\nin a standardized fashion.", "artifact_other_comments": null, "study_code": "123", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Needs an authorization", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "User Input", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucy9xGmf-nu-qHl5F8hOdijrHBmLG9Fv2aR9ZUcvQYU_XqKqOHvo_p4BBfJDS4Qsyc"}, "175": {"selection_timestamp": "7/13/2022 11:50:27", "study_title": "Assessing technical debt in automated tests with codescene", "study_authors": "Adam Tornhill", "study_author_type": "Industry", "study_year": 2018.0, "study_venue": "International Conference on Software Testing, Verification and Validation", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/ICSTW.2018.00039", "study_bibtex": "@INPROCEEDINGS{Tornhill2018-un,\r\n  title           = \"Assessing technical debt in automated tests with\r\n                     {CodeScene}\",\r\n  booktitle       = \"2018 {IEEE} International Conference on Software Testing,\r\n                     Verification and Validation Workshops ({ICSTW})\",\r\n  author          = \"Tornhill, Adam\",\r\n  publisher       = \"IEEE\",\r\n  month           =  apr,\r\n  year            =  2018,\r\n  conference      = \"2018 IEEE International Conference on Software Testing,\r\n                     Verification and Validation Workshops (ICSTW)\",\r\n  location        = \"V{\\\"a}ster{\\aa}s, Sweden\"\r\n}\r\n", "study_summary": null, "study_problem": null, "study_objective": null, "study_results": null, "artifact_name": ["CodeScene"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Test TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": "Automate all the analysis\r\nIntegrated with GitHub\r\nIt is possible to visualize the results", "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "175", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Free for Open Source Projects", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuepI2la1Pdwf6SfwnG32xO_cGiclJkG2totp3V5tu6Gmp2ZVW5ZC9sy_ZEODFCN1qo"}, "182": {"selection_timestamp": "7/13/2022 14:29:37", "study_title": "Enhanced Feature Selection Using Word Embeddings for Self-Admitted Technical Debt Identification", "study_authors": "Jernej Flisar\r\nVili Podgorelec", "study_author_type": "Academia", "study_year": 2018.0, "study_venue": "Euromicro Conference on Software Engineering and Advanced Applications", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SEAA.2018.00045", "study_bibtex": "@INPROCEEDINGS{Flisar2018-qo,\r\n  title           = \"Enhanced feature selection using word embeddings for\r\n                     self-admitted technical debt identification\",\r\n  booktitle       = \"2018 44th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications ({SEAA})\",\r\n  author          = \"Flisar, Jernej and Podgorelec, Vili\",\r\n  publisher       = \"IEEE\",\r\n  month           =  aug,\r\n  year            =  2018,\r\n  conference      = \"2018 44th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications (SEAA)\",\r\n  location        = \"Prague\"\r\n}\r\n", "study_summary": null, "study_problem": "Methods to identify SATD have only used manually annotated data to train their clas-\r\nsifiers.", "study_objective": "In this paper, we present the results of a performed\r\nexploratory study for using large corpus of unlabeled code\r\ncomments, extracted from open source projects on github, to\r\ntrain word embeddings, in order to improve detection of SATD.", "study_results": "The experimental results show a significant improvement in SATD classification.\r\nWith achieved 82% of correct predictions of SATD, the method\r\nseems to be a good candidate to be adopted in practice.", "artifact_name": ["word2vec", "comment_parser", "Porter stemmer"], "artifact_description": "To provide the learning corpora to train the word2vec\r\nmodel1, we retrieved the most popular 360 open source\r\njava projects from GitHub using Github API. Python\u2019s\r\ncomment_parser library was used for extracting text\r\ncomments from .java source files. Licensed comments and\r\ncomments with less than three words were ignored.\r\nEach comment represented a single text document in the\r\nlearning corpora. There were approximately 1.2 M comments\r\nin the retrieved 360 open source java projects. To select most\r\npopular projects, we filtered out all non Java project and\r\nprojects that didn\u2019t have at least 3 forks and 100 rating stars.\r\nWe ordered projects by the number of stars, and selected top\r\n360 projects. Examples of selected projects are: RxJava,\r\nelasticsearch, retrof it, okhttp, guava, springboot, etc.\r\nBefore all comments were passed into the word2vec model,\r\nwe preprocessed comments to strip them of all punctuations,\r\nnon-alpha and numeric characters, so only English letter words\r\nremained. Finally, all words were stemmed using the well-\r\nknown Porter stemmer.", "artifact_link": ["https://radimrehurek.com/gensim", "https://pypi.python.org/pypi/comment parser", "https://tartarus.org/martin/PorterStemmer/"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": "These\r\nadditional features were then used to enhance the original\r\nfeature set. With the enhanced set of features, we were able\r\nto improve the detection of SATD.", "artifact_limitations": "It can be used just for Java", "artifact_gaps": null, "artifact_other_comments": null, "study_code": "182", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Code Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuffwuaf0wW7zRmJAfXlXubj37Uu0HNXUczq5i1Ed5c8eYUWrV73ak2ftGmM_zbCtDk"}, "204": {"selection_timestamp": "7/13/2022 14:51:53", "study_title": "SARIF-enabled Tooling to Encourage Gradual Technical Debt Reduction", "study_authors": "Paul Anderson\r\nL\u00e0ucja Kot\r\nNeil Gilmore\r\nDavid Vitek", "study_author_type": "Industry", "study_year": 2019.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/TechDebt.2019.00024", "study_bibtex": "@INPROCEEDINGS{Anderson2019-iv,\r\n  title           = \"{SARIF-enabled} tooling to encourage gradual technical\r\n                     debt reduction\",\r\n  booktitle       = \"2019 {IEEE/ACM} International Conference on Technical Debt\r\n                     ({TechDebt})\",\r\n  author          = \"Anderson, Paul and Kot, Lucja and Gilmore, Neil and Vitek,\r\n                     David\",\r\n  publisher       = \"IEEE\",\r\n  month           =  may,\r\n  year            =  2019,\r\n  conference      = \"2019 IEEE/ACM International Conference on Technical Debt\r\n                     (TechDebt)\",\r\n  location        = \"Montreal, QC, Canada\"\r\n}\r\n", "study_summary": null, "study_problem": "Static analysis tools are useful for finding programming\r\ndefects and design flaws. However, for a variety of valid\r\nreasons, programmers often feel reluctant to act on their results,\r\neven if it is abundantly clear that doing so would reduce both\r\nshort and long-term technical debt.", "study_objective": "This tool demo shows how analysis tool findings can be\r\nautomatically contributed as comments to the review process in\r\na similar way to how a human would make comments on the\r\nparts of the code that have been changed.", "study_results": null, "artifact_name": ["SARIF", "CodeSonarTM", "Clang Static Analyzer", "Pylint"], "artifact_description": null, "artifact_link": ["https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=SARIF", "https://clang-analyzer.llvm.org/", "https://www.grammatech.com/codesonar-cc", "https://www.pylint.org/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "204", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufK5rCCFELTW348JGGxt6NyXCGwpNKZ5GOhpu2SoszafKxjuuM9ZcB4ZphR6__wjU0"}, "217": {"selection_timestamp": "7/13/2022 15:35:42", "study_title": "Identifying Design and Requirement Self-Admitted Technical Debt using N-gram IDF", "study_authors": "Supatsara Wattanakriengkrai\r\nRungroj Maipradit\r\nHideki Hata\r\nMorakot Choetkiertikul\r\nThanwadee Sunetnanta\r\nKenichi Matsumoto", "study_author_type": "Academia", "study_year": 2018.0, "study_venue": "International Workshop on Empirical Software Engineering in Practice", "study_venue_type": "Workshop", "study_link": "http://doi.org/10.1109/IWESEP.2018.00010", "study_bibtex": "@INPROCEEDINGS{Wattanakriengkrai2018-wl,\r\n  title           = \"Identifying design and requirement self-admitted technical\r\n                     debt using N-gram {IDF}\",\r\n  booktitle       = \"2018 9th International Workshop on Empirical Software\r\n                     Engineering in Practice ({IWESEP})\",\r\n  author          = \"Wattanakriengkrai, Supatsara and Maipradit, Rungroj and\r\n                     Hata, Hideki and Choetkiertikul, Morakot and Sunetnanta,\r\n                     Thanwadee and Matsumoto, Kenichi\",\r\n  publisher       = \"IEEE\",\r\n  month           =  dec,\r\n  year            =  2018,\r\n  conference      = \"2018 9th International Workshop on Empirical Software\r\n                     Engineering in Practice (IWESEP)\",\r\n  location        = \"Nara, Japan\"\r\n}\r\n", "study_summary": null, "study_problem": "This can cause\r\nmajor additional costs leading to negative impacts for software\r\nmaintenance since those shortcuts might need to be reworked\r\nin the future. Detecting technical debt early can help a team\r\ncope with those risks.", "study_objective": "We propose an automated model to identify\r\n\r\ntwo most common types of self-admitted technical debt, re-\r\nquirement and design debt, from source code comments. We\r\n\r\ncombine N-gram IDF and auto-sklearn machine learning to\r\nbuild the model.", "study_results": "With the empirical evaluation on ten projects,\r\nour approach outperform the baseline method by improving\r\n\r\nthe performance over 20% when identifying requirement self-\r\nadmitted technical debt and achieving an average F1-score of\r\n\r\n64% when identifying design self-admitted technical debt.", "artifact_name": ["Ngweight", "Auto-SKlearn"], "artifact_description": "The main goal of our approach is to accurately identify\r\ndesign and requirement self-admitted technical debt. To do\r\nthat, firstly, we pre-process source code comments of 10\r\nopen source projects using text processing techniques. We\r\nthen obtain all valid n-gram key terms of the pre-processed\r\ndocument utilizing the tool namely, Ngweight. After we get\r\nthe output of this process, n-gram dictionary, we employ\r\nweight1 score to filter out non-crucial n-grams. For each\r\nsource code comment, we enumerate the raw frequency of\r\neach n-gram term and then collect these values in vector\r\nelements.", "artifact_link": ["https://github.com/iwnsew/ngweight", "https://automl.github.io/auto-sklearn/master/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Requirements TD", "Design TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "For future work, we plan to enhance the performance of\r\nour classification model by using other n-gram extraction\r\ntools, which can cover more n-gram key terms, and find an\r\napproach to improve the compression of our features. We\r\nalso plan to extend our work to be able to classify multiclass\r\nlabel corpus and other programming languages. Lastly, we\r\naim to establish an experiment on other areas not only source\r\ncode comments classification.", "artifact_other_comments": null, "study_code": "217", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Code Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudTLeYPBu8ld4tam4lRY-DGTphqQ3n0Mzpbh4z3FCrWKonMjobOh6gVMZOrSumhArQ"}, "224": {"selection_timestamp": "7/13/2022 15:50:26", "study_title": "TEAMSCALE: Tackle Technical Debt and Control the Quality of Your Software", "study_authors": "Roman Haas\r\nRainer Niedermayr\r\nElmar Juergens", "study_author_type": "Industry", "study_year": 2019.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/TechDebt.2019.00016", "study_bibtex": "@INPROCEEDINGS{Haas2019-mx,\r\n  title           = \"Teamscale: Tackle technical debt and control the quality\r\n                     of your software\",\r\n  booktitle       = \"2019 {IEEE/ACM} International Conference on Technical Debt\r\n                     ({TechDebt})\",\r\n  author          = \"Haas, Roman and Niedermayr, Rainer and Juergens, Elmar\",\r\n  publisher       = \"IEEE\",\r\n  month           =  may,\r\n  year            =  2019,\r\n  conference      = \"2019 IEEE/ACM International Conference on Technical Debt\r\n                     (TechDebt)\",\r\n  location        = \"Montreal, QC, Canada\"\r\n}\r\n", "study_summary": null, "study_problem": null, "study_objective": "In this paper, we give an overview\r\nof TEAMSCALE and how this tool can be used in practice to\r\ncontrol and lower technical debt in the long run. We explain\r\nwhich code analyses can be used to identify and address technical\r\ndebt.", "study_results": null, "artifact_name": ["TEAMSCALE"], "artifact_description": "TEAMSCALE is able to differentiate between new findings\r\nand findings in modified code. Moreover, using baselines, it is\r\npossible to focus on recent changes, e.g., since the last release.", "artifact_link": ["www.teamscale.io"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Representation/Documentation", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "224", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuf7FMoPNbx5fmRpkU0xZj5Jdfow4uGeBbIJ9FGiguPs55yJtwZ-8KxEC3ymUS2vBYI"}, "226": {"selection_timestamp": "7/13/2022 16:35:33", "study_title": "How Deep is the Mud: Fathoming Architecture Technical Debt Using Designite", "study_authors": "Tushar Sharma", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/TechDebt.2019.00018", "study_bibtex": "\"@INPROCEEDINGS{Sharma2019-ew,\r\n  title           = \"\"How deep is the mud: Fathoming architecture technical debt\r\n                     using designite\"\",\r\n  booktitle       = \"\"2019 {IEEE/ACM} International Conference on Technical Debt\r\n                     ({TechDebt})\"\",\r\n  author          = \"\"Sharma, Tushar\"\",\r\n  publisher       = \"\"IEEE\"\",\r\n  month           =  may,\r\n  year            =  2019,\r\n  conference      = \"\"2019 IEEE/ACM International Conference on Technical Debt\r\n                     (TechDebt)\"\",\r\n  location        = \"\"Montreal, QC, Canada\"\"\r\n}\r\n\"", "study_summary": null, "study_problem": "\"Abstract\u2014The quality of software architecture is an important\r\nconcern for any software development team. Architecture smells\r\nrepresent quality issues at architecture granularity. Identifying\r\n\r\nand refactoring them periodically is a necessity to keep archi-\r\ntecture quality high.\"", "study_objective": "\"We present Designite, a software design\r\n\r\nquality assessment tool, that identifies seven well-known archi-\r\ntecture smells.\"", "study_results": null, "artifact_name": ["Designite"], "artifact_description": "\"Along with the identification, the tool provides\r\n\r\nsupplementary information such as cause and responsible classes\r\nfor each identified smell instance to help developers understand\r\nand refactor the smell. The tool is relevant and useful in both\r\nresearch and practice context. Software developers may use it to\r\nidentify technical debt instances and to refactor them. On the\r\nother hand, software engineering researchers may use the tool to\r\ncarry out large-scale empirical studies concerning code smells.\r\n\r\nThe tool detects well-known architec-\r\nture smells and presents them using visual aids to make it\r\n\r\neasier for developers to comprehend them. The tool offers\r\nsupplementary information and features such as Action Hub\r\nto facilitate developers track, manage, and refactor smells and\r\nhelp them keep technical debt low.\"", "artifact_link": ["http://www.designite-tools.com"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Monitoring", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "226", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": null}, "249": {"selection_timestamp": "7/13/2022 16:48:09", "study_title": "Mitigating Technical and Architectural Debt with Sonargraph", "study_authors": "Alexander von Zitzewitz", "study_author_type": "Industry", "study_year": 2019.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/TechDebt.2019.00022", "study_bibtex": "@INPROCEEDINGS{Von_Zitzewitz2019-xg,\r\n  title           = \"Mitigating technical and architectural debt with\r\n                     sonargraph\",\r\n  booktitle       = \"2019 {IEEE/ACM} International Conference on Technical Debt\r\n                     ({TechDebt})\",\r\n  author          = \"von Zitzewitz, Alexander\",\r\n  publisher       = \"IEEE\",\r\n  month           =  may,\r\n  year            =  2019,\r\n  conference      = \"2019 IEEE/ACM International Conference on Technical Debt\r\n                     (TechDebt)\",\r\n  location        = \"Montreal, QC, Canada\"\r\n}\r\n", "study_summary": null, "study_problem": "The motivation to create\r\nSonargraph came from the assumption that architectural debt\r\n(aka structural debt) is the most toxic form of technical debt.\r\nRepairing a broken architecture requires global and high-risk\r\nchanges, while fixing other forms of technical debt mostly\r\ninvolves low-risk local changes.", "study_objective": "Therefore, the tool enables\r\narchitects and developers to formally describe their\r\narchitectural blueprint using a custom DSL (domain specific\r\nlanguage). ", "study_results": null, "artifact_name": ["Sonargraph"], "artifact_description": "Therefore, the tool enables\r\narchitects and developers to formally describe their\r\narchitectural blueprint using a custom DSL (domain specific\r\nlanguage). Once defined architectural rules can be checked and\r\nenforced in an automated way in all stages of the development\r\nprocess. This guarantees that a software system will never end\r\nup as the notorious \u201cbig ball of mud\u201d. Sonargraph currently\r\nsupports Java, C#, C/C++ and Python and is used by hundreds\r\nof organizations worldwide.", "artifact_link": ["https://www.hello2morrow.com/products/sonargraph"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Representation/Documentation", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "x Integration into automated builds with the option to make\r\nbuilds fails if certain configurable conditions are met.\r\nx IDE integrations for Eclipse and IntelliJ.\r\nx Duplicate code block detector.\r\nx Groovy based scripting engine that allows user to create\r\ntheir own code checkers or compute custom metrics.\r\nx Virtual refactorings that allow the user to simulate\r\nrefactorings without actually changing any code.\r\nx Architectural views allow architects to play with a variety\r\nof architectural designs. Those architectural views can be\r\ncreated completely interactively and can be translated\r\ninto Sonargraph's architecture DSL.\r\nx Simple issue management workflow.", "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "249", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueii37mZJQPoDzvYpH2lAaWXvVItM3Clnzu32TdtvrwmbalGP2EEDrsZ4FKTQ0TyfI"}, "223": {"selection_timestamp": "7/29/2022 16:36:30", "study_title": "TETRA, as a set of techniques and tools for calculating technical debt principal and interest", "study_authors": "Boris Kontsevoi\r\nElizabeth Soroka\r\nSergei Terekhov", "study_author_type": "Industry", "study_year": 2019.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/TechDebt.2019.00021", "study_bibtex": "@INPROCEEDINGS{Kontsevoi2019-ci,\r\n  title           = \"{TETRA}, as a set of techniques and tools for calculating\r\n                     technical debt principal and interest\",\r\n  booktitle       = \"2019 {IEEE/ACM} International Conference on Technical Debt\r\n                     ({TechDebt})\",\r\n  author          = \"Kontsevoi, Boris and Soroka, Elizabeth and Terekhov,\r\n                     Sergei\",\r\n  publisher       = \"IEEE\",\r\n  month           =  may,\r\n  year            =  2019,\r\n  conference      = \"2019 IEEE/ACM International Conference on Technical Debt\r\n                     (TechDebt)\",\r\n  location        = \"Montreal, QC, Canada\"\r\n}", "study_summary": null, "study_problem": null, "study_objective": "The authors\r\nshare the details of the company proprietary approach to\r\ntechnical debt management done with the help of the\r\nTechnical DebT Reduction plAtform, TETRA. They share the\r\nmeasurement parameters, tools and major dimension for the\r\nassessment.", "study_results": null, "artifact_name": ["SonarQube", "TETRA"], "artifact_description": "Source code quality is the assessment of the quality of the\r\nproduct source code by the follower major parameters:\r\n\r\n\u2022 Cyclomatic Complexity (methods, classes, files) is a\r\nmeasure of the number of linearly independent paths\r\nthrough a program module.\r\n\u2022 Duplications (lines, blocks, files) is the number of\r\nphysical lines touched by duplications.\r\n\u2022 Code coverage (lines, branches) is the percent of source\r\ncode covered by unit tests that help check individual units\r\nof the source code to evaluate whether they are fit for use.\r\n\u2022 Rules compliance means the compliance of the source\r\ncode to a coding standard and best practices of a particular\r\nprogramming language.\r\n\u2022 SQALE rating is the rating that is given to a project\r\nrelated to the value of your Technical Debt Ratio.", "artifact_link": ["https://www.sonarqube.org/"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Applications", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "223", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of TD", "Measurement of TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudKzt-7fQhuCtulXZOlnFS4Dr7kuJBwbb92QJaEywD-Nsl7K1C8EyegOoBvN3KqMpo"}, "232": {"selection_timestamp": "7/15/2022 15:59:12", "study_title": "On the Accuracy of SonarQube Technical Debt Remediation Time", "study_authors": "Nyyti Saarimaki\r\nMaria Teresa Baldassarre\r\nValentina Lenarduzzi\r\nSimone Romano", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "Euromicro Conference on Software Engineering and Advanced Applications", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SEAA.2019.00055", "study_bibtex": "@INPROCEEDINGS{Saarimaki2019-kc,\r\n  title           = \"On the accuracy of {SonarQube} technical debt remediation\r\n                     time\",\r\n  booktitle       = \"2019 45th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications ({SEAA})\",\r\n  author          = \"Saarimaki, Nyyti and Baldassarre, Maria Teresa and\r\n                     Lenarduzzi, Valentina and Romano, Simone\",\r\n  publisher       = \"IEEE\",\r\n  month           =  aug,\r\n  year            =  2019,\r\n  conference      = \"2019 45th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications (SEAA)\",\r\n  location        = \"Kallithea-Chalkidiki, Greece\"\r\n}\r\n", "study_summary": null, "study_problem": "SonarQube is one of the most used tools and provides\r\nan estimation of the time needed to remediate technical debt.\r\nHowever, practitioners are still skeptical about the accuracy of its\r\nremediation time estimation.", "study_objective": "In this paper, we analyze\r\nthe accuracy of SonarQube remediation time on a set of 15\r\nopen source Java projects.", "study_results": "The results point out that SonarQube remediation time,\r\ncompared to the actual time for reducing technical debt, is\r\ngenerally overestimated, and that the most accurate estimation\r\nrelates to code smells, while the least accurate concerns bugs.", "artifact_name": ["SonarQube"], "artifact_description": "In this work, we aim to understand the accuracy of the\r\n\r\nTechnical Debt (TD) remediation effort that SonarQube as-\r\nsociates to TD Items. For this purpose, we designed and\r\n\r\nconducted a case study where we asked 65 novice developers,\r\nrepresented by third-year undergraduate students (in Computer\r\nScience), organized in teams, to improve the quality of 15 open\r\nsource projects, by choosing and fixing TD items among those\r\nidentified in the SonarQube quality reports. The developers\r\ntracked the time they spent to fix each TD item. Then, we\r\ncompared the actual remediation time with the one suggested\r\nby SonarQube.", "artifact_link": ["https://www.sonarqube.org/"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": "The results show that, in the TD items fixed by our par-\r\nticipants, the remediation time proposed by SonarQube tends\r\n\r\nto be overestimated. Moreover, the most accurate estimation\r\nrelates to code smells, while the least accurate concerns bugs.\r\nFrom a practitioner\u2019s viewpoint, the results of our work\r\nare promising as they represent an initial attempt to validate\r\nthe TD estimation.", "artifact_gaps": "Moreover, we are also investigating the actual\r\nimpact of TD issues on the different TD areas proposed by\r\nSonarQube (i.e., maintainability, vulnerability, and security).", "artifact_other_comments": null, "study_code": "232", "artifact_vendor": "No", "artifact_level_automation": "It automates a process (e.g., calculate the TD interest)", "artifact_level_automation_evidence": "SonarQube identified the issues and calculate the time to repair them", "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufn_VrKBD_rGPIVDbGFPBM0ELsPfecUqQmKYE87SWS2RQwh4vFtNEgYJMjVbt9hC9Y"}, "240": {"selection_timestamp": "7/15/2022 16:16:28", "study_title": "Automatic Classifying Self-Admitted Technical Debt Using N-gram IDF", "study_authors": "Supatsara Wattanakriengkrai\r\nNapat Srisermphoak\r\nSahawat Sintoplertchaikul\r\nMorakot Choetkiertikul\r\nChaiyong Ragkhitwetsagul\r\nThanwadee Sunetnanta\r\nHideaki Hata\r\nKenichi Matsumoto\u2020", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "Asia-Pacific Software Engineering Conference", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/APSEC48747.2019.00050", "study_bibtex": "@INPROCEEDINGS{Wattanakriengkrai2019-fk,\r\n  title           = \"Automatic classifying self-admitted technical debt using\r\n                     N-gram {IDF}\",\r\n  booktitle       = \"2019 26th {Asia-Pacific} Software Engineering Conference\r\n                     ({APSEC})\",\r\n  author          = \"Wattanakriengkrai, Supatsara and Srisermphoak, Napat and\r\n                     Sintoplertchaikul, Sahawat and Choetkiertikul, Morakot and\r\n                     Ragkhitwetsagul, Chaiyong and Sunetnanta, Thanwadee and\r\n                     Hata, Hideaki and Matsumoto, Kenichi\",\r\n  publisher       = \"IEEE\",\r\n  month           =  dec,\r\n  year            =  2019,\r\n  conference      = \"2019 26th Asia-Pacific Software Engineering Conference\r\n                     (APSEC)\",\r\n  location        = \"Putrajaya, Malaysia\"\r\n}", "study_summary": null, "study_problem": "Those studies proposed to use binary classification\r\ntechnique to predict whether a comment shows SATD. However,\r\nSATD has different types (e.g. design SATD and requirement\r\nSATD).", "study_objective": "In this paper, we therefore propose an approach using\r\n\r\nN-gram Inverse Document Frequency (IDF) and employ a multi-\r\nclass classification technique to build a model that can identify\r\n\r\ndifferent types of SATD.", "study_results": null, "artifact_name": ["Ngweight", "Auto-SKlearn"], "artifact_description": "The main goal of our approach is to accurately identify\r\ndesign and requirement self-admitted technical debt. To do\r\nthat, firstly, we pre-process source code comments of 10\r\nopen source projects using text processing techniques. We\r\nthen obtain all valid n-gram key terms of the pre-processed\r\ndocument utilizing the tool namely, Ngweight. After we get\r\nthe output of this process, n-gram dictionary, we employ\r\nweight1 score to filter out non-crucial n-grams. For each\r\nsource code comment, we enumerate the raw frequency of\r\neach n-gram term and then collect these values in vector\r\nelements.", "artifact_link": ["https://github.com/iwnsew/ngweight", "https://automl.github.io/auto-sklearn/master/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Requirements TD", "Design TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": "The proposed approach consistently outperforms traditional tech-\r\nniques (i.e. BOW and TF-IDF) and one alternative (i.e., using SVM)\r\n\r\naccording to the experiment results. We also outperform Maldonado\r\net al. for SATD identification with the highest F1-score values of\r\n0.874. Especially, when classifying requirement SATD, our approach\r\nhas exceeded the baseline by 33%. Resembling our previous study,\r\n\r\nthe use of n-gram IDF (with under-sampling, and ensemble classi-\r\nfier) has improved our predictive performance over the traditional\r\n\r\ntechniques since n-gram IDF is capable of capture useful phrases\r\nor words indicates the presence of design and requirement SATD in\r\nsource code comments. ", "artifact_limitations": null, "artifact_gaps": "For future work, we plan to improve the performance of our\r\napproach, especially classifying design SATD by using advanced\r\n\r\nalgorithms (i.e. word embedding and deep learning methods). Be-\r\nsides open-source software projects, We plan to run our multi-class\r\n\r\nclassification model on commercial software projects. Moreover, we\r\nplan to extend our work to classify all types of SATD including the\r\ntypes which are not common in software projects (e.g., defect, test,\r\nand documentation debt). We also plan to develop our approach to\r\ndetect SATD comments in other programming languages.", "artifact_other_comments": null, "study_code": "240", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Code Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuetXfftdWCmwWGCIXF_M_WjlMA2OsUYaV_7KLbdgHN1zbCb1smJtzWMAsuOofgft_Y"}, "292": {"selection_timestamp": "7/15/2022 16:37:18", "study_title": "Towards an Approach to Identify Obsolete Features based on Importance and Technical Debt", "study_authors": "Andrea Janes\r\nValentina Lenarduzzi", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Euromicro Conference on Software Engineering and Advanced Applications", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SEAA51224.2020.00070", "study_bibtex": "@INPROCEEDINGS{Janes2020-ye,\r\n  title           = \"Towards an approach to identify obsolete features based on\r\n                     importance and technical debt\",\r\n  booktitle       = \"2020 46th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications ({SEAA})\",\r\n  author          = \"Janes, Andrea and Lenarduzzi, Valentina\",\r\n  publisher       = \"IEEE\",\r\n  month           =  aug,\r\n  year            =  2020,\r\n  copyright       = \"https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html\",\r\n  conference      = \"2020 46th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications (SEAA)\",\r\n  location        = \"Portoroz, Slovenia\"\r\n}", "study_summary": null, "study_problem": "The consequences of keeping unused source code can impact maintainability, technical\r\ndebt, performance, and extensibility of the system. This can lead\r\nto lower development productivity and to a reduced innovation\r\nability, consequently reducing competitiveness on the market.", "study_objective": null, "study_results": "This paper aims to present an approach to identify features based\r\non their value and on costs for keeping or removing them.", "artifact_name": ["SonarQube", "Jaeger"], "artifact_description": "We will examine the existing\r\nliterature to find heuristics to estimate maintenance costs.\r\nWe will consider technical debt estimation models and tools to measure the maintenance cost\r\n\r\nWe will\r\ninvestigate how to determine the usage intensity using a top-\r\ndown approach. First, we will design dashboards to visualize\r\nthe feature importance customizable for different users that\r\ncan provide exact format how we want the log to perform\r\nour analysis. We are considering existing open tracing tools\r\n", "artifact_link": ["https://www.jaegertracing.io", "https://www.sonarqube.org"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "292", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuduibHRHYx5R5w5wt0eNHsiMi3_K25kIQxqmuqSTZMfZIKOOuwiTygY4fLzUVxIYfU"}, "300": {"selection_timestamp": "7/15/2022 17:07:37", "study_title": "Self-Admitted Technical Debt classification using LSTM neural network", "study_authors": "Rafael Meneses Santos\r\nMethanias Cola\u00e7o Rodrigues Junior\r\nManoel Gomes de Mendon\u00e7a Neto", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Conference on Information Technology\u2013New Generations", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1007/978-3-030-43020-7_93", "study_bibtex": "@INCOLLECTION{Santos2020-vl,\r\n  title     = \"{Self-Admitted} Technical Debt classification using {LSTM}\r\n               neural network\",\r\n  booktitle = \"Advances in Intelligent Systems and Computing\",\r\n  author    = \"Santos, Rafael Meneses and Junior, Methanias Cola{\\c c}o\r\n               Rodrigues and de Mendon{\\c c}a Neto, Manoel Gomes\",\r\n  publisher = \"Springer International Publishing\",\r\n  pages     = \"679--685\",\r\n  series    = \"Advances in intelligent systems and computing\",\r\n  year      =  2020,\r\n  address   = \"Cham\"\r\n}", "study_summary": null, "study_problem": null, "study_objective": "Evaluate a Long short-\r\nterm memory (LSTM) neural network model to identify\r\n\r\ndesign and requirement SATDs from comments in source\r\ncode.", "study_results": "Our model results outperformed the other models in pre-\r\ncision, improving average precision in approximately 8%\r\n\r\ncompared to auto-sklearn and 19% compared to maximum\r\nentropy approach, however, the LSTM model achieved\r\nworse results in recall and f-measure.", "artifact_name": ["Keras", "Scikit-learn"], "artifact_description": "The implementation of an LSTM neural network al-\r\ngorithm must meet the theoretical requirements and\r\n\r\nany changes may compromise its results. To ensure\r\nthat a correct implementation of the LSTM neural\r\nnetwork was evaluated, we used the Keras [21] library\r\nthat has thousands of citations in study publications;", "artifact_link": ["https://keras.io", "https://scikit-learn.org/stable/"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": "At the end of the experiment, it was possible to ver-\r\nify that the LSTM model improved the precision of the\r\n\r\ndesign SATDs classification but obtained worse results in\r\n\r\nrecall and f-measure in other situations.", "artifact_limitations": null, "artifact_gaps": "In future works, other neural networks and deep learning\r\narchitectures can be evaluated in this context. There are\r\nresults that show that the combination of convolutional neural\r\nnetworks and LSTM achieve good results in the task of text\r\nclassification [13]. In addition, more in-depth research should\r\nbe done to find ways to reduce the amount of false negatives\r\nproduced by the LSTM model in this dataset.", "artifact_other_comments": null, "study_code": "300", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Code Comments", "selection_response_link": null}, "295": {"selection_timestamp": "7/15/2022 19:58:37", "study_title": "Comparing Maintainability Index, SIG Method, and SQALE for Technical Debt Identification", "study_authors": "Peter Strecansky \r\nStanislav Chren\r\nBruno Rossi", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Hindawi Scientific Programming", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1155/2020/2976564", "study_bibtex": "@ARTICLE{Strecansky2020-ji,\r\n  title     = \"Comparing Maintainability Index, {SIG} method, and {SQALE} for\r\n               Technical Debt identification\",\r\n  author    = \"Stre{\\v c}ansk{\\'y}, Peter and Chren, Stanislav and Rossi, Bruno\",\r\n  journal   = \"Sci. Program.\",\r\n  publisher = \"Hindawi Limited\",\r\n  volume    =  2020,\r\n  pages     = \"1--14\",\r\n  month     =  jul,\r\n  year      =  2020,\r\n  language  = \"en\"\r\n}\r\n", "study_summary": null, "study_problem": "While many techniques to measure TD\r\nemerged in recent times, there is still not a clear understanding about how different techniques compare when applied to software\r\nprojects.", "study_objective": "The goal of this paper is to shed some light on this aspect, by comparing three techniques about TD identification that\r\nwere proposed over time: (i) the Maintainability Index (MI), (ii) SIG TD models, and (iii) SQALE analysis.", "study_results": null, "artifact_name": ["Radon", "SonarQube"], "artifact_description": "Radon is a Python package which computes vari-\r\nous source code metrics, such as McCabe\u2019s Cyclomatic\r\ncomplexity, Halstead metric, raw metrics (lines of code and\r\nlines of comments), and Maintainability Index.\r\n\r\nThe sonar-python plugin\r\n(https://docs.sonarqube.org/display/PLUG/SonarPython)\r\nwas used for the SQALE analysis.", "artifact_link": ["https://radon.readthedocs.io/en/latest/index.html", "https://docs.sonarqube.org/latest/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "295", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuefK32CnZAdpjd396NRtXSdDKw3qibPwqzuvn6w11wdkBzvDZOX9x1gtZePr-vPUSI"}, "309": {"selection_timestamp": "7/15/2022 20:20:19", "study_title": "Skuld: A self-learning tool for impact-driven technical debt management", "study_authors": "Josep Burgaya Pujols\r\nPieter Bas\r\nSilverio Mart\u00ednez-Fern\u00e1ndez\r\nAntonio Martini\r\nAdam Trendowicz", "study_author_type": "Both", "study_year": 2020.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3387906.3388626", "study_bibtex": "@INPROCEEDINGS{Pujols2020-hk,\r\n  title      = \"Skuld\",\r\n  booktitle  = \"Proceedings of the 3rd International Conference on Technical\r\n                Debt\",\r\n  author     = \"Pujols, Josep Burgaya and Bas, Pieter and\r\n                Mart{\\'\\i}nez-Fernandez, Silverio and Martini, Antonio and\r\n                Trendowicz, Adam\",\r\n  publisher  = \"ACM\",\r\n  month      =  jun,\r\n  year       =  2020,\r\n  address    = \"New York, NY, USA\",\r\n  conference = \"TechDebt '20: International Conference on Technical Debt\",\r\n  location   = \"Seoul Republic of Korea\"\r\n}", "study_summary": null, "study_problem": "As the development progresses, software projects tend to\r\naccumulate Technical Debt and become harder to maintain.\r\nMultiple tools exist with the mission to help practitioners to better\r\nmanage Technical Debt. Despite this progress, there is a lack of\r\ntools providing actionable and self-learned suggestions to\r\npractitioners aimed at mitigating the impact of Technical Debt in\r\nreal projects.", "study_objective": "We aim to create a data-driven, lightweight, and\r\nself-learning tool positioning highly impactful refactoring\r\nproposals on a Jira backlog.", "study_results": null, "artifact_name": ["Skuld"], "artifact_description": "We found\r\nout the following problems in state-of-the-art tools\u2019\r\nrecommendations to mitigate TD: (a) current tools generally\r\nprovide a plethora of individual TD items with little to no\r\nassociated negative impact; (b) they are not positioned where\r\ndecisions take place, therefore they do not take part in the\r\nsprint/iteration objective shaping process; and (c) the value of\r\ncarrying them out (future interest decrease) is not made apparent,\r\ntherefore stakeholders with decision powers are inclined to prioritize objectives that they feel are more relevant business-\r\nwise. In this context, Skuld was founded with the purpose of fulfilling\r\nthese gaps with the vision to become the go-to company for\r\nsoftware renovation. In this tool paper, we present a data-driven,\r\nlightweight and self-learning tool to proactively manage TD for\r\nsoftware development teams.", "artifact_link": ["https://www.skuld.ai/"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Monitoring", "Priorization", "Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "To set up the tool, it is\r\nmerely required to configure a connection to the most essential\r\ndata sources. We have found that a major hurdle in the adoption\r\nof tools that use several sources of information is the fact that it\r\ntypically requires several days of work in order to configure\r\nthem properly [7]. Furthermore, the tool is a Jira plugin making\r\nthe process of purchasing, downloading and installing as simple\r\nas possible, maximizing user addressability.", "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "309", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process (e.g., calculate the TD interest)", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuceu5ntaAmQZjrl9CsQwxNktaAlnXNjDbHVUQqZi_QQgadIj8uzTTyfAnmGcUKgLlI"}, "315": {"selection_timestamp": "7/15/2022 20:41:49", "study_title": "Prevalence, Contents and Automatic Detection of KL-SATD", "study_authors": "Leevi Rantala\r\nMika Mantyla\r\nDavid Lo", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Euromicro Conference on Software Engineering and Advanced Applications", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SEAA51224.2020.00069", "study_bibtex": "@INPROCEEDINGS{Rantala2020-ov,\r\n  title           = \"Prevalence, contents and automatic detection of {KL-SATD}\",\r\n  booktitle       = \"2020 46th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications ({SEAA})\",\r\n  author          = \"Rantala, Leevi and Mantyla, Mika and Lo, David\",\r\n  publisher       = \"IEEE\",\r\n  month           =  aug,\r\n  year            =  2020,\r\n  copyright       = \"https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html\",\r\n  conference      = \"2020 46th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications (SEAA)\",\r\n  location        = \"Portoroz, Slovenia\"\r\n}", "study_summary": null, "study_problem": "Abstract\u2014When developers use different keywords such as\r\n\r\nTODO and FIXME in source code comments to describe self-\r\nadmitted technical debt (SATD), we refer it as Keyword-Labeled\r\n\r\nSATD (KL-SATD).", "study_objective": "We find that the median\r\n\r\npercentage of KL-SATD comments among all comments is only\r\n1,52%. We find that KL-SATD comment contents include words\r\nexpressing code changes and uncertainty, such as remove, fix,\r\nmaybe and probably. This makes them different compared to\r\nother comments.", "study_results": null, "artifact_name": ["Glmnet", "NLoN", "<Code from authors>"], "artifact_description": "uses a machine learning classifier to detect\r\nSATD comments. We selected logistic regression with lasso\r\npenalty from Glmnet package1 as our machine learning ap-\r\nproach. It has been shown to have fast performance, and to\r\nwork with large and sparse matrices [9] which are typical in\r\nNLP tasks. It has been applied successfully to different NLP\r\ntasks [10].\r\n\r\nFirst, we remove comments that are code\r\nusing NLoN tool\r\n\r\nhttps://github.com/M3SOulu/KLSATD_SEAA_2020", "artifact_link": ["https://cran.r-project.org/web/packages/glmnet/index.html", "https://github.com/M3SOulu/KLSATD_SEAA_2020"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Library", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "This means, that up to 2/3\r\n(\u2248 10, 000 comments) of our classifier sample may contain\r\ntechnical debt.", "artifact_limitations": "Choice of machine learning algorithm can be seen as a\r\nlimitation. However, it has been shown that at least in the\r\ncontext of detecting code smells the choice of the algorithm\r\ndoes not give meaningful difference in performance [14].\r\nThe choice to repositories used in can be seen also as a\r\nlimitation. We used 33 repositories gathered in a previous\r\nstudy [6], which is a much larger than used in prior works\r\nof automated SATD detection, e.g. 10 in [15] and 7 in [1].", "artifact_gaps": "To fix shortcomings of our model, we plan to test our\r\nclassifier with an industry partner (Softagram), and we will\r\nalso retrain our model with Active Learning methods, which\r\nwill further enhance its performance.", "artifact_other_comments": null, "study_code": "315", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Code Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuf4n2ruGx0BiRIoCQ-_y_c5BgVHo8cuKCOUECev24qYC8ErAhmW4qldOK3RWPHrvu4"}, "338": {"selection_timestamp": "7/15/2022 20:59:59", "study_title": "Towards Better Technical Debt Detection with NLP and Machine Learning Methods", "study_authors": "Leevi Rantala", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Conference on Software Engineering: Companion Proceedings", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3377812.3381404", "study_bibtex": "@ARTICLE{Volodina2022-ab,\r\n  title     = \"Formation of future teachers' worldview culture by means of\r\n               foreign-language education\",\r\n  author    = \"Volodina, Olga V and\r\n               {https://pnojournal.wordpress.com/2022/07/01/volodina-3/}\",\r\n  journal   = \"P Sci Edu\",\r\n  publisher = \"Scientific and Educational Initiative\",\r\n  volume    =  57,\r\n  number    =  3,\r\n  pages     = \"126--159\",\r\n  month     =  jul,\r\n  year      =  2022\r\n}\r\n", "study_summary": null, "study_problem": "Technical debt detection and management is mainly done manu-\r\nally, and this is both slow and costly way of detecting technical debt.\r\n\r\nAutomatic detection would solve this issue, but even state-of-the-art\r\ntools of today do not accurately detect the appearance of technical\r\ndebt. Therefore, increasing the accuracy of automatic classification\r\nis of high importance, so that we could eliminate significant portion\r\nfrom the costs relating to technical debt detection.", "study_objective": "This research aims to solve the problem in detection accuracy\r\nby bringing in together static code analysis and natural language\r\n\r\nprocessing. This combination of techniques will allow more ac-\r\ncurate detection of technical debt, when compared to them being\r\n\r\nused separately from each other.", "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": "In our second and\r\nongoing study, we are building a classifier that can predict when a\r\ndeveloper should have labeled a code comment to contain \"TODO\"-\r\nkeyword. This word is important, as state-of-the-art tools such\r\nas SonarQube [25] rely on detecting individual keywords. This\r\n\r\ncauses problems in detection accuracy, as some of the relevant com-\r\nments are missed due to a missing keyword. Therefore, identifying\r\n\r\nautomatically comments which should have such a keyword can\r\nimprove their performance.", "artifact_link": ["https://www.sonarqube.org/"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Not cited"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "338", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnud4xkmRBkCz5laP88c-4MHgYbWy0ONMYRMqbUQFbn7V0pOEFqVL0jZ-MGBEmA5qOB4"}, "384": {"selection_timestamp": "7/15/2022 21:25:03", "study_title": "ATDx: A tool for Providing a Data-driven Overview of Architectural Technical Debt in Software-intensive Systems", "study_authors": "Sebastian Ospina\r\nRoberto Verdecchia\r\nIvano Malavolta\r\nPatricia Lago", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "European Conference on Software Architecture", "study_venue_type": "Conference", "study_link": "https://www.scopus.com/inward/record.uri?eid=2-s2.0-85117850664&partnerID=40&md5=ec083cccd8995030bb503d8e44957683", "study_bibtex": "@inproceedings{inproceedings,\r\nauthor = {Ospina, Sebastian and Verdecchia, Roberto and Malavolta, Ivano and Lago, Patricia},\r\nyear = {2021},\r\nmonth = {09},\r\npages = {},\r\ntitle = {ATDx: A tool for Providing a Data-driven Overview of Architectural Technical Debt in Software-intensive Systems}\r\n}", "study_summary": null, "study_problem": "In recent years, numerous approaches have been proposed to identify, keep track, and ultimately manage\r\nATD. The variety of approaches available opens a new problem, namely how to gain an encompassing\r\noverview of the ATD identified in a software-intensive system.", "study_objective": "With this paper we make available the\r\nATDx tool, an implementation of ATDx written in Python, designed in a plug-in fashion.", "study_results": null, "artifact_name": ["ATDx:"], "artifact_description": "The tool follows a plugin-based architecture, allowing users to adapt the analysis tool and\r\nproduced outputs according to their specific needs. In addition to the tool implementation, we provide two already-implemented plug-ins, allowing users to execute a complete run of the ATDx tool out-of-the-box.", "artifact_link": ["https://github.com/S2-group/ATDx"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Plugin", "artifact_type_evidence": null, "artifact_td_activities": ["Representation/Documentation", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "384", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process (e.g., calculate the TD interest)", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudtM8I-sTaq_UgcOrzgA1fKh25oD1kGctxhNBdqG0rmBxNBaDlBfY8sgNio_-cJ5Dg"}, "66": {"selection_timestamp": "7/18/2022 15:37:44", "study_title": "JSpIRIT: A Flexible Tool for the Analysis of Code Smells", "study_authors": "Santiago Vidal\r\nHernan Vazquez\r\nJ. Andres D\u00edaz-Pace\r\nClaudia Marcos\r\nAlessandro Garcia\r\nWillian Oizumi", "study_author_type": "Academia", "study_year": 2015.0, "study_venue": "International Conference of the Chilean Computer Science Society", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1109/SCCC.2015.7416572", "study_bibtex": "@INPROCEEDINGS{Vidal2015-jl,\r\n  title           = \"{JSpIRIT}: a flexible tool for the analysis of code smells\",\r\n  booktitle       = \"2015 34th International Conference of the Chilean Computer\r\n                     Science Society ({SCCC})\",\r\n  author          = \"Vidal, Santiago and Vazquez, Hernan and Diaz-Pace, J\r\n                     Andres and Marcos, Claudia and Garcia, Alessandro and\r\n                     Oizumi, Willian\",\r\n  publisher       = \"IEEE\",\r\n  month           =  nov,\r\n  year            =  2015,\r\n  conference      = \"2015 34th International Conference of the Chilean Computer\r\n                     Science Society (SCCC)\",\r\n  location        = \"Santiago, Chile\"\r\n}\r\n", "study_summary": null, "study_problem": "One reason for this decision is that the improvement\r\nof the code str ucture, to achieve modif ability goals, requires\r\nextr a effort from developer s. Therefore, they might not always\r\nspend this additional effort, particularly when they are focused on\r\ndelivering customer-visible features. This postponement of code\r\nsmells are seen as a source of technical debt. Furthermore, not all\r\nthe code smells may be ur gent to f x in the context of the system\u2019s\r\nmodif ability and business goals.", "study_objective": "In this article,\r\nwe present a f exible tool to prioritize technical debt in the form\r\nof code smells. The tool is f exible to allow developer s to add new\r\nsmell detection str ategies and to prioritize smells, and groups of\r\nsmells, based on the conf gur ation of their manifold criteria.", "study_results": null, "artifact_name": ["JSpIRIT"], "artifact_description": "Essentially, the JSpIRIT tool takes as input the Java source\r\ncode of an application and produces as output a ranking of\r\ncode smells (Fig. 1). To generate the ranking, a developer must\r\ninstantiate the tool by providing:\r\n\u2022 One or more kind of external information to the code,\r\nto be used by the prioritization criteria.\r\n\r\n\u2022 One or more detection strategies for smells or agglom-\r\nerations of smells.\r\n\r\n\u2022 One or more criteria to determine how important a\r\ngiven smell is for the system.\r\n\r\n", "artifact_link": ["nan"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Plugin", "artifact_type_evidence": null, "artifact_td_activities": ["Priorization", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": "The tool is f exible to allow developer s to add new\r\nsmell detection str ategies and to prioritize smells, and groups of\r\nsmells, based on the conf gur ation of their manifold criteria. To\r\nillustr ate this f exibility, we present an application example of our\r\ntool. The results suggest that our tool can be easily extended to\r\nbe aligned with the developer \u2019s goals.", "artifact_limitations": null, "artifact_gaps": "As future work, we will extend our tool to support refac-\r\ntoring. Our intention is to suggest refactoring strategies for\r\n\r\neach kind of smells. This will help novice developers to\r\nanalyze refactoring strategies for complex smells. Also, we\r\nplan to create visualizations to awareness developers of the\r\ncomponents of the application most affected by smells.", "artifact_other_comments": null, "study_code": "66", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process (e.g., calculate the TD interest)", "artifact_level_automation_evidence": "The plugin identify code smells and prioritize them.", "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuflGECU6xhOlPF9IAR8E5UwE9J3gVM9nFpjgrkMNygnz4AOf7z2AD9qoINjbvHEk3k"}, "79": {"selection_timestamp": "7/18/2022 16:01:42", "study_title": "Designite - A Software Design Quality Assessment Tool", "study_authors": "Tushar Sharma\r\nPratibha Mishra\r\nRohit Tiwari", "study_author_type": "Both", "study_year": 2016.0, "study_venue": "International Workshop on Bringing Architectural Design Thinking Into Developers' Daily Activities", "study_venue_type": "Workshop", "study_link": "http://dx.doi.org/10.1145/2896935.2896938", "study_bibtex": "@INPROCEEDINGS{Sharma2016-ca,\r\n  title           = \"Designite\",\r\n  booktitle       = \"Proceedings of the 1st International Workshop on Bringing\r\n                     Architectural Design Thinking into Developers' Daily\r\n                     Activities - {BRIDGE} '16\",\r\n  author          = \"Sharma, Tushar and Mishra, Pratibha and Tiwari, Rohit\",\r\n  publisher       = \"ACM Press\",\r\n  year            =  2016,\r\n  address         = \"New York, New York, USA\",\r\n  copyright       = \"http://www.acm.org/publications/policies/copyright\\_policy\\#Background\",\r\n  conference      = \"the 1st International Workshop\",\r\n  location        = \"Austin, Texas\"\r\n}", "study_summary": null, "study_problem": "Poor design quality and huge technical debt are common is-\r\nsues perceived in real-life software projects. Design smells\r\n\r\nare indicators of poor design quality and the volume of de-\r\nsign smells found could be treated as the design debt of the\r\n\r\nsoftware system. The existing smell detection tools focus\r\n\r\nlargely on implementation smells and do not reveal a com-\r\nprehensive set of smells that arise at design level.", "study_objective": "In this\r\n\r\npaper, we present Designite - a software design quality as-\r\nsessment tool.", "study_results": null, "artifact_name": ["Designite"], "artifact_description": "It not only supports comprehensive design\r\n\r\nsmells detection but also provides a detailed metrics analy-\r\nsis. Further, it offers various features to help identify issues\r\n\r\ncontributing to design debt and improve the design quality\r\nof the analyzed software system.", "artifact_link": ["nan"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "The tool supports comprehensive de-\r\nsign smells detection, detailed interactive metrics analysis,\r\n\r\ndsm for allowing dependency analysis for three granularities,\r\ncode-clone detection, integration with external tools such as\r\nSonarQube, and exporting detected smells and computed\r\nmetrics to an excel sheet.", "artifact_limitations": null, "artifact_gaps": "In future, we plan to carry out an extensive evalu-\r\nation to compute metrics such as recall and precision of the\r\n\r\ntool. We also plan to extend the tool to support features\r\nsuch as differential analysis and trend analysis.", "artifact_other_comments": null, "study_code": "79", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudjPIN_xh-rB3k119_r6xUJWsjZ45ovCu0GjWfMSlMGRam0DWOfrO7JiHeLUBPfPgE"}, "125": {"selection_timestamp": "7/18/2022 16:38:36", "study_title": "Towards Triaging Code-Smell Candidates via Runtime Scenarios and Method-Call Dependencies", "study_authors": "Thorsten Haendler\r\nStefan Sobernig\r\nMark Strembeck", "study_author_type": "Academia", "study_year": 2017.0, "study_venue": "International Conference on Agile Software Development: Companion", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3120459.3120468", "study_bibtex": "@INPROCEEDINGS{Haendler2017-qd,\r\n  title           = \"Towards triaging code-smell candidates via runtime\r\n                     scenarios and method-call dependencies\",\r\n  booktitle       = \"Proceedings of the {XP2017} Scientific Workshops\",\r\n  author          = \"Haendler, Thorsten and Sobernig, Stefan and Strembeck,\r\n                     Mark\",\r\n  publisher       = \"ACM\",\r\n  month           =  may,\r\n  year            =  2017,\r\n  address         = \"New York, NY, USA\",\r\n  copyright       = \"http://www.acm.org/publications/policies/copyright\\_policy\\#Background\",\r\n  conference      = \"XP '17 Workshops: Proceedings of the Scientific Workshops\r\n                     of XP2017\",\r\n  location        = \"Cologne Germany\"\r\n}\r\n", "study_summary": null, "study_problem": "Managing technical debt includes the detection and assessment of\r\ndebt at the code and design levels (such as bad smells). Existing\r\n\r\napproaches and tools for smell detection primarily use static pro-\r\ngram data for decision support. While a static analysis allows for\r\n\r\nidentifying smell candidates without executing and instrumenting\r\n\r\nthe system, such approaches also come with the risk of missing can-\r\ndidates or of producing false positives. Moreover, smell candidates\r\n\r\nmight result from a deliberate design decision (e.g., of applying a\r\nparticular design pattern). Such risks and the general ambivalence\r\nof smell detection require a manual design and/or code inspection\r\nfor reviewing all alleged smells.", "study_objective": "In this paper, we propose an approach to obtain tailorable design\r\ndocumentation for object-oriented systems based on runtime tests.\r\nIn particular, the approach supports a tool-supported triaging of\r\ncode-smell candidates.", "study_results": null, "artifact_name": ["KaleidoScope"], "artifact_description": "KaleidoScope is a software tool supporting developers in investigating a software system's design and architecture based on automated runtime tests. In particular, it provides different design perspectives (such as UML diagrams and dependency structure matrices) as decision support, which are automatically derived from executing scenario-based runtime tests. KaleidoScope allows the developer to navigate through the resulting perspectives as well as to tailor their scopes and abstraction levels.", "artifact_link": ["http://kaleidoscopetool.org/"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "This way, candidates identified by static-\r\nanalysis tools can be proved as potentially false or not relevant from\r\n\r\na runtime-scenario perspective. In turn, candidates can be identi-\r\nfied which are not recognizable by applying static analysis tools\r\n\r\n(hidden candidates).", "artifact_limitations": null, "artifact_gaps": "In our future work, we will apply the approach for assessing smell\r\ncandidates in larger software systems. Moreover, we will explore\r\nthe approach\u2019s further possibilities for assessing other smell types,\r\nfor identifying intentional smells as well as for refactoring planning.\r\nIn addition, we plan to investigate, how human users benefit from\r\nusing the provided perspectives for triaging smell candidates.", "artifact_other_comments": null, "study_code": "125", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": "Smells Identification", "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnud_HDCSBF-biYcoeYjV9zAEi63jIN3k0RZdOU91DDHBorFoEimJ09FCVjEKOCmddFk"}, "186": {"selection_timestamp": "7/18/2022 17:02:18", "study_title": "An Architectural Smells Detection Tool for C and C++ projects", "study_authors": "Andrea Biaggi\r\nFrancesca Arcelli Fontana\r\nRiccardo Roveda", "study_author_type": "Academia", "study_year": 2018.0, "study_venue": "Euromicro Conference on Software Engineering and Advanced Applications", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SEAA.2018.00074", "study_bibtex": "@INPROCEEDINGS{Biaggi2018-sk,\r\n  title           = \"An architectural smells detection tool for {C} and C++\r\n                     projects\",\r\n  booktitle       = \"2018 44th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications ({SEAA})\",\r\n  author          = \"Biaggi, Andrea and Arcelli Fontana, Francesca and Roveda,\r\n                     Riccardo\",\r\n  publisher       = \"IEEE\",\r\n  month           =  aug,\r\n  year            =  2018,\r\n  conference      = \"2018 44th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications (SEAA)\",\r\n  location        = \"Prague\"\r\n}", "study_summary": null, "study_problem": "Abstract\u2014Architectural smells gained great attention in the\r\n\r\npast few years since they directly affect software quality and in-\r\ncrease architectural technical debt. However, while it is straight-\r\nforward to understand why they are important, it is more difficult\r\n\r\nto find techniques and tools to detect and remove architectural\r\n\r\nsmells.", "study_objective": "The purpose of this paper is to introduce an open-\r\nsource tool for automatic architectural smells detection for C/C++\r\n\r\nprojects, by creating an abstraction of the project and defining\r\nthe concept of dependency between elements belonging to the\r\nproject in order to identify architectural smells.", "study_results": null, "artifact_name": ["ARCAN FOR C/C++"], "artifact_description": "Arcan is made by four components: 1) System Reconstruc-\r\ntor, that reads the project and extracts dependencies; 2) Graph\r\n\r\nManager, that builds the dependency graph, a graph data\r\nstructure where the nodes represent the elements of the project,\r\nlike files (for C), headers (for C/C++) and classes (for C++),\r\nand the edges represent the relations among them; 3) Metrics\r\nEngine that computes the software metrics used by the AS\r\nEngine component, 4) AS Engine, that detects the architectural\r\nsmells. A representation of the Arcan architecture is outlined\r\nin a previous work [3].", "artifact_link": ["https://essere.disco.unimib.it/wiki/arcan/"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "We developed a version of the Arcan tool that allows the\r\nanalysis of C/C++ projects for the detection of five AS. We\r\npresented the results obtained on 6 projects (3 written in C\r\nand 3 in C++). We performed a first manual validation of the\r\ntool on two projects (Swoole and FastText) and we outlined\r\nthat we obtained a precision of 100% and a recall of 90,7%.", "artifact_limitations": null, "artifact_gaps": "In future developments we are interested to analyze and perform\r\na validation on more and larger projects. In particular, we aim\r\nto analyze industrial projects and receive the feedback on the\r\nrelevance of the detected AS by the developers.", "artifact_other_comments": null, "study_code": "186", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudmGdf3ObkSOwngiqpug4BMzo3tWayibvP6hDRTd7BsBtKl7gkiaf1UcMXWg7lwmwE"}, "237": {"selection_timestamp": "7/18/2022 17:30:18", "study_title": "PageRank and Criticality of Architectural Smells", "study_authors": "Francesca Arcelli Fontana\r\nIlaria Pigazzini\r\nClaudia Raibulet\r\nStefano Basciano\r\nRiccardo Roveda", "study_author_type": "Both", "study_year": 2019.0, "study_venue": "European Conference on Software Architecture", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3344948.3344982", "study_bibtex": "@inproceedings{Fontana2019,\r\n  doi = {10.1145/3344948.3344982},\r\n  url = {https://doi.org/10.1145/3344948.3344982},\r\n  year = {2019},\r\n  publisher = {{ACM} Press},\r\n  author = {Francesca Arcelli Fontana and Ilaria Pigazzini and Claudia Raibulet and Stefano Basciano and Riccardo Roveda},\r\n  title = {{PageRank} and criticality of architectural smells},\r\n  booktitle = {Proceedings of the 13th European Conference on Software Architecture  - {ECSA} {\\textquotesingle}19 - volume 2}\r\n}", "study_summary": null, "study_problem": "Architectural smells represent symptoms of problems at architec-\r\ntural level that can negatively impact internal software qualities\r\n\r\nand lead to architectural debt. Detecting architectural smells and\r\n\r\nidentifying the most critical ones is the key to prioritize refactor-\r\ning efforts and prevent software architecture erosion.", "study_objective": "In this paper\r\n\r\nwe focus our attention on three architectural smells based on de-\r\npendency issues, called Cyclic Dependency, Unstable Dependency,\r\n\r\nand Hub-Like Dependency. Moreover, we evaluate the PageRank\r\nand Criticality of these smells through the analysis of six projects.", "study_results": null, "artifact_name": ["Arcan", "Gephi"], "artifact_description": "For the PageRank computa-\r\ntion, we used the Gephi tool2 by exploiting the dependency graph\r\ngenerated by Arcan. Gephi is a platform for the visualization and\r\nexploration of graphs and networks and the computation of some\r\ngraph metrics.\r\n\r\nThe value estimates whether a component represents an important\r\npart of the project, where the importance is defined by the value of\r\nthe Pa\u0434eRank algorithm executed on the dependency graph of the\r\nproject.", "artifact_link": ["https://gephi.org/"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "A developer interested in using the Arcan tool can detect the\r\nAS and give refactoring priority to the ones with high criticality\r\nand high PageRank, as we propose in this work. She can obtain\r\ndifferent information from the two values, criticality and PageRank,\r\n\r\nand possibly combine them in order to identify very important com-\r\nponents affected by highly critical AS, that need to be investigated\r\n\r\nand refactored. In this paper we outlined different refactoring sce-\r\nnarios based on the values of the two metrics and in the future we\r\n\r\nplan to extend our study by leveraging historical data from version\r\ncontrol systems of the analyzed projects.", "artifact_limitations": null, "artifact_gaps": "Obviously, we have not analyzed the cost solving to\r\nremove the AS, but this study provides some hints that could be\r\nexploited also in this direction. Moreover, we would like to study\r\nhow the refactoring of AS with high PageRank could generate\r\nhigher maintenance costs. A study in this context has been done by\r\nMacCormack et al [16], where they analyze how components with\r\ndifferent levels of coupling generate different maintenance costs.\r\n\r\nAnother future investigation is toward a cross validation of the rank-\r\ning of the architectural smells with the data on the bugs reported in\r\n\r\nthe affected components considering also the historic information\r\nof the maintenance activities on the smelly components.", "artifact_other_comments": null, "study_code": "237", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueiArVMQmmhTPAXjtiuI-TzZTMLOHWMFYxSHGc4vfuRwVkskwAGXl-I7Y9znMoVg08"}, "263": {"selection_timestamp": "7/18/2022 17:51:00", "study_title": "Sen4Smells: A Tool for Ranking Sensitive Smells for an Architecture Debt Index", "study_authors": "J. Andres Diaz-Pace\r\nAntonela Tommasel\r\nIlaria Pigazzini\r\nFrancesca Arcelli Fontana", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Biennial Congress of Argentina", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1109/ARGENCON49523.2020.9505535", "study_bibtex": "@INPROCEEDINGS{Diaz-Pace2020-bk,\r\n  title           = \"{Sen4Smells}: A tool for ranking sensitive smells for an\r\n                     architecture debt index\",\r\n  booktitle       = \"2020 {IEEE} Congreso Bienal de Argentina ({ARGENCON})\",\r\n  author          = \"Diaz-Pace, J Andres and Tommasel, Antonela and Pigazzini,\r\n                     Ilaria and Fontana, Francesca Arcelli\",\r\n  publisher       = \"IEEE\",\r\n  month           =  dec,\r\n  year            =  2020,\r\n  conference      = \"2020 IEEE Congreso Bienal de Argentina (ARGENCON)\",\r\n  location        = \"Resistencia, Argentina\"\r\n}", "study_summary": null, "study_problem": "However, the interpretation of an index value\r\n\r\nin terms of problematic smells is usually a manual and labor-\r\nintensive task for engineers.", "study_objective": "To help with this task, we propose\r\n\r\na tool called Sen4Smells that performs an automated sensitivity\r\nanalysis for a given debt index based on the evolution of both the\r\nindex values and the corresponding smells across (past) system\r\nversions.", "study_results": null, "artifact_name": ["Sen4Smells"], "artifact_description": "The Sen4Smells output is a ranking of smells that, due to\r\ntheir variations or instability, are major contributors to the debt\r\nindex, and thus, can impact on architecture quality. Sen4Smells is\r\ndesigned as a pipeline that combines information from existing\r\ntools for smell detection, predefined d ebt i ndex f ormulas, and\r\nthe Sobol method for sensitivity analysis.\r\n\r\nIn Sen4Smells, various types\r\nof ASs can be processed, based on the underlying detection\r\ntools available in the Smell Information Extraction module.\r\nAs mentioned in previous sections, we currently support\r\nthe following dependency-based smells: Cyclic Dependency\r\n(cd), Unstable Dependency (ud), and Hub-like Dependency\r\n(hl) [14, 20].\r\n\r\n", "artifact_link": ["https://github.com/tommantonela/Sen4Smells"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "As regards the experimental work, we need to further validate\r\nwhether the rankings computed by Sen4Smells are correlated\r\nwith critical parts of the analyzed systems. Finally, we plan to\r\nextend Sen4Smells with more indexes and smell types.", "artifact_other_comments": null, "study_code": "263", "artifact_vendor": null, "artifact_level_automation": "It automates a process (e.g., calculate the TD interest)", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudq00l7P0hHFh8k4q0ccDuo3nlGJCbUAMpEDRxix_GHTHABacCbCL-O-UWGYl1C14g"}, "271": {"selection_timestamp": "7/18/2022 18:11:51", "study_title": "Towards Microservice Smells Detection", "study_authors": "Ilaria Pigazzini\r\nFrancesca Arcelli Fontana\r\nValentina Lenarduzzi\r\nDavide Taibi", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3387906.3388625", "study_bibtex": "@INPROCEEDINGS{Pigazzini2020-xf,\r\n  title      = \"Towards microservice smells detection\",\r\n  booktitle  = \"Proceedings of the 3rd International Conference on Technical\r\n                Debt\",\r\n  author     = \"Pigazzini, Ilaria and Fontana, Francesca Arcelli and\r\n                Lenarduzzi, Valentina and Taibi, Davide\",\r\n  publisher  = \"ACM\",\r\n  month      =  jun,\r\n  year       =  2020,\r\n  address    = \"New York, NY, USA\",\r\n  conference = \"TechDebt '20: International Conference on Technical Debt\",\r\n  location   = \"Seoul Republic of Korea\"\r\n}", "study_summary": null, "study_problem": "However, ac-\r\ncording to our knowledge, there are no tools that can automatically\r\n\r\ndetect microservice smells, so their identification is left to the expe-\r\nrience of the developer.", "study_objective": "In this paper, we extend an existing tool\r\n\r\ndeveloped for the detection of architectural smells to explore mi-\r\ncroservices architecture through the detection of three microservice\r\n\r\nsmells: Cyclic Dependencies, Hard-Coded Endpoints, and Shared\r\n\r\nPersistence.", "study_results": null, "artifact_name": ["Neo4j", "Arcan"], "artifact_description": "Arcan generates a graph of the system\r\n\r\nPowered by a native graph database, Neo4j stores and manages data in its more natural, connected state, maintaining data relationships that deliver lightning-fast queries, deeper context for analytics, and a pain-free modifiable data model.", "artifact_link": ["nan"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "271", "artifact_vendor": "No", "artifact_level_automation": "It automates a task (e.g., static code analysis)", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueuTtf5baIvpdlC2Varp0lbRBsVUgefWbKRCRY6o6kXwKxYQ1Eww2ZL9_AzdcAyMN4"}, "85": {"selection_timestamp": "7/19/2022 10:31:00", "study_title": "Technical debt reduction using search based automated refactoring", "study_authors": "Michael Mohan\r\nDes Greer\r\nPaul McMullan", "study_author_type": "Academia", "study_year": 2016.0, "study_venue": "The Journal of Systems and Software", "study_venue_type": "Journal", "study_link": "http://dx.doi.org/10.1016/j.jss.2016.05.019", "study_bibtex": "@ARTICLE{Mohan2016-xp,\r\n  title     = \"Technical debt reduction using search based automated\r\n               refactoring\",\r\n  author    = \"Mohan, Michael and Greer, Des and McMullan, Paul\",\r\n  journal   = \"J. Syst. Softw.\",\r\n  publisher = \"Elsevier BV\",\r\n  volume    =  120,\r\n  pages     = \"183--194\",\r\n  month     =  oct,\r\n  year      =  2016,\r\n  language  = \"en\"\r\n}\r\n", "study_summary": null, "study_problem": "Refactoring is useful to keep technical debt\r\nlow and if it can be automated there are obvious efficiency benefits. Using a combination of automated\r\nrefactoring techniques, software metrics and metaheuristic searches, an automated refactoring tool can\r\n\r\nimprove the structure of a software system without affecting its functionality.", "study_objective": "In this paper, four different refactoring approaches are compared using an automated software refactoring tool.", "study_results": null, "artifact_name": ["A-CMA"], "artifact_description": "A-CMA is an automated refactoring tool developed by Koc et al.\r\n(2012) that refactors Java programs using Java bytecode as input.\r\n\r\nAn advantage of this tool over many others is that it has many op-\r\ntions for refactoring as well as metrics available and it is highly\r\n\r\nconfigurable. The tool has the option to create and select different\r\n\r\nconfigurations of metrics and refactoring actions.", "artifact_link": ["https://github.com/eknkc/a-cma", "https://github.com/mmohan01/a-cma (study version)"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Repayment"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "Generally, the TD function proved to generate a larger proportional improvement in the Java programs, although in 2 of the programs, the average coupling value was better than the score given by the TD function.", "artifact_limitations": null, "artifact_gaps": "Further research\r\nusing A-CMA\u2019s available parallel functionality and exploring other\r\noptions would hopefully allow for a more agreeable execution\r\ntime on larger programs. Another option is to explore alternate\r\n\r\nor more recently developed search techniques such as \u2018Great Del-\r\nuge\u2019 or a global search.", "artifact_other_comments": null, "study_code": "85", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate metrics (e.g., coupling)", "Proceed refactoring actions"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuekJf1Yoj3Chqz1je7XaHq3kWbzermrEX3b2_0K6Spa8qBx-Mm0zDUNBQibwI1ZMVU"}, "82": {"selection_timestamp": "7/19/2022 10:48:15", "study_title": "An experience report on detecting and repairing software architecture erosion", "study_authors": "Francesca Arcelli Fontana \r\nRiccardo Roveda\r\nMarco Zanoni\r\nClaudia Raibulet\r\nRafael Capilla", "study_author_type": "Academia", "study_year": 2016.0, "study_venue": "Working IEEE/IFIP Conference on Software Architecture", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/WICSA.2016.37", "study_bibtex": "@INPROCEEDINGS{Fontana2016-ta,\r\n  title           = \"An experience report on detecting and repairing software\r\n                     architecture erosion\",\r\n  booktitle       = \"2016 13th Working {IEEE/IFIP} Conference on Software\r\n                     Architecture ({WICSA})\",\r\n  author          = \"Fontana, Francesca Arcelli and Roveda, Riccardo and\r\n                     Zanoni, Marco and Raibulet, Claudia and Capilla, Rafael\",\r\n  publisher       = \"IEEE\",\r\n  month           =  apr,\r\n  year            =  2016,\r\n  conference      = \"2016 13th Working IEEE/IFIP Conference on Software\r\n                     Architecture (WICSA)\",\r\n  location        = \"Venice, Italy\"\r\n}\r\n", "study_summary": null, "study_problem": "Architecture erosion constitutes the most visible\r\neffect of the degradation of design. It is a major reason to\r\naddress the design debt, often caused by architectural mismatch\r\nproblems. Today, the identification of design erosion is a major\r\nconcern for designers and software maintainers. Adequate tools\r\nare necessary to identify and repair the debt.", "study_objective": "This paper describes\r\nour experience on identifying architectural erosion problems on\r\nexisting open source software applications through the support\r\nof two well known tools.", "study_results": null, "artifact_name": ["Sonargraph", "Structure101"], "artifact_description": "Sonargraph checks the conformance of the software archi-\r\ntecture with respect to a predefined model and finds possible\r\nviolations in the project. Sonargraph provides a concise dependency graph called Ex-\r\nploration view, which shows the allowed, denied and cyclic de-\r\npendencies, between components, external components (e.g.,\r\nlibraries) and packages. A Cyclic package group is shown in\r\nthe Cycles view (see Figure 1), where packages are nodes and\r\nthe edges represent dependencies.\r\n\r\nThe tool provides different views, with the ability to define, inspect\r\nand manipulate the model of the analyzed system, to show\r\nthe collaboration between code items, understand the class\r\nhierarchy, navigate the call method graph and detect Fat items\r\nand/or Tangles.\r\n", "artifact_link": ["https://www.hello2morrow.com/products/sonargraph", "http://structure101.com/products/"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Expert Opinion", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "The automatic clustering features provided by Struc-\r\nture101 are particularly useful to understand and analyze\r\n\r\nunknown systems. The detection of Tangles (or Cyclic\r\nDependencies) is another feature relevant for this task,\r\nand is supported by both tools.", "artifact_limitations": "The tools do not associate refactoring actions to time/-\r\ncost/effort measures. Moreover, the structural measures\r\nprovided by the tool are not explicitly related to time\r\nor cost, and refactoring actions are not associated to the\r\nexpected gain in the respective structural measures. This\r\nresults in a lack of prioritization of the generated action\r\nplans.\r\n\r\nThe tools we experimented do not allow to execute\r\nthe planned refactoring actions automatically or semi-\r\nautomatically.\r\n\r\nTools do not address the dynamic analysis of the system\r\nyet.", "artifact_gaps": "We plan in the next future to experiment other tools, e.g.,\r\nCAST and other tools cited in Table I by combining the\r\nfeatures they provide.", "artifact_other_comments": null, "study_code": "82", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of architectural smells and architecture erosion", "Calculate metrics"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuf8i9-kns2ZHH9eCyUE2BMnrScyVgMHlFO-4-KnE1JIbh89I4k5Fl_Bc_nu2XEAoYE"}, "105": {"selection_timestamp": "7/19/2022 14:34:59", "study_title": "Formative Evaluation of a Tool for Managing Software Quality", "study_authors": "Liliana Guzman\r\nAnna Maria Vollmer\r\nMarcus Ciolkowski\r\nMichael Gillmann", "study_author_type": "Industry", "study_year": 2017.0, "study_venue": "International Symposium on Empirical Software Engineering and Measurement", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/ESEM.2017.43", "study_bibtex": "@INPROCEEDINGS{Guzman2017-iu,\r\n  title           = \"Formative evaluation of a tool for managing software\r\n                     quality\",\r\n  booktitle       = \"2017 {ACM/IEEE} International Symposium on Empirical\r\n                     Software Engineering and Measurement ({ESEM})\",\r\n  author          = \"Guzman, Liliana and Vollmer, Anna Maria and Ciolkowski,\r\n                     Marcus and Gillmann, Michael\",\r\n  publisher       = \"IEEE\",\r\n  month           =  nov,\r\n  year            =  2017,\r\n  conference      = \"2017 ACM/IEEE International Symposium on Empirical\r\n                     Software Engineering and Measurement (ESEM)\",\r\n  location        = \"Toronto, ON, Canada\"\r\n}", "study_summary": null, "study_problem": "To achieve high software qual-\r\nity, particularly in the context of agile software development,\r\n\r\norganizations need tools to continuously analyze software\r\nquality. Several quality management (QM) tools have been\r\ndeveloped in recent years. However, there is a lack of evidence\r\nregarding the quality of QM tools, standardized definitions\r\nof such quality, and reliable instruments for measuring it.\r\nThis, in turn, impedes proper selection and improvement of\r\nQM tools.", "study_objective": "We aimed at operationalizing the quality\r\nof a research QM tool, namely the ProDebt prototype, and\r\nevaluating its quality. The goal of the ProDebt prototype is\r\nto provide practitioners with support for managing software\r\nquality and technical debt.", "study_results": null, "artifact_name": ["ProDebt"], "artifact_description": "The ProDebt prototype aims at providing developers and\r\nmanagers with the following functionalities: (F1) evaluating\r\nthe quality of a software system at one point in time, (F2)\r\nanalyzing the quality of a software system over time at\r\ndifferent levels such as overall system, subsystem, and files,\r\n(F3) drill-down into potential causes of quality deficiencies\r\n\r\nto allow impact analysis and planning of specific improve-\r\nments, and (F4) estimating technical debt.", "artifact_link": ["http://www.prodebt.de/"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Not cited"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Expert Opinion", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "The participants rated the information of\r\n\r\nthis prototype as understandable and relevant for analyzing\r\nquality deficits and the impact of refactoring tasks. Though\r\nthe prototype is considered easy to use, there are needs\r\n\r\nfor improvement regarding the system quality.", "artifact_limitations": "For example, to include\r\nfunctionalities to allow the selection of metrics as well as\r\nthe definition and tailoring of threshold values for each\r\nmetric.\r\n\r\nFinally, five out of eleven participants stated\r\nthat files being restructured over time are not taken into\r\naccount in the time series analysis.\r\n", "artifact_gaps": "Further future\r\nwork would be to consider additional operationalizations of\r\nquality aspects or to validate the selection of those we used\r\nones through new findings.", "artifact_other_comments": null, "study_code": "105", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["The tool estimates technical debt"], "artifact_input": "Unknown", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudfZ6prJART8gX3ToYL7FDqxgOZ6qYSV3GlkVnLPVa8qkWjekcfZAFPuU1JDmtqbNM"}, "115": {"selection_timestamp": "7/19/2022 14:48:54", "study_title": "Toward Technical Debt Aware Software Modeling", "study_authors": "Gonzalo Rojas\r\nClemente Izurieta\r\nIsaac Griffith", "study_author_type": "Academia", "study_year": 2017.0, "study_venue": "Iberoamerican Conference on Software Engineering", "study_venue_type": "Conference", "study_link": "https://www.semanticscholar.org/paper/Toward-Technical-Debt-Aware-Software-Modeling-Rojas-Izurieta/11bbc831715fab2e3f30a999fc3968a39a331ae8", "study_bibtex": "@inproceedings{Rojas2017TowardTD,\r\n  title={Toward Technical Debt Aware Software Modeling},\r\n  author={Gonzalo Rojas and Clemente Izurieta and Isaac Griffith},\r\n  booktitle={CIbSE},\r\n  year={2017}\r\n}", "study_summary": null, "study_problem": "However, no corpus of studies has investigated the effects that\r\n\r\ncreation and refactoring of conceptual models have on technical debt of correspond-\r\ning code.", "study_objective": "Our work addresses this fundamental gap by first providing a map of cor-\r\nrespondences between recognized model smells of UML Class Diagrams and Java\r\n\r\nsource code issues.", "study_results": null, "artifact_name": ["EMF Refactor", "SonarQube"], "artifact_description": "We used the EMF (Eclipse Modeling Framework) Refactor tool [13] to measure the\r\n\r\nmodel smells of UML class diagrams, while code issues and technical debt of the generat-\r\ned code were measured with SonarQube [7]. The SonarQube operationalization of the\r\n\r\nSQALE quality model [27] calculates technical debt by focusing on the maintainability\r\naspect of quality; where the technical debt ratio is the remediation cost divided by the\r\ndevelopment cost, and the development costs are measured in days by multiplying the\r\nLOC by the (parameterizable) cost per line.", "artifact_link": ["https://www.eclipse.org/emf-refactor/", "https://www.sonarqube.org/"], "artifact_sdlc": ["(Architectural) Design"], "artifact_sdlc_evidence": null, "artifact_type": "Plugin", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Development of new rules at the source code level, and the development of more ma-\r\nture tools will address the first two points. To make progress in the third reason, we must\r\n\r\ntackle the well-known problem of synchronization between models and generated source\r\ncode.\r\n\r\nWe posit that refactorings per-\r\nformed during modeling can be technical debt aware, and that synchronization can be-\r\ncome more manageable because the objective function is shared.", "artifact_other_comments": null, "study_code": "115", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["EMF Refactor - Indentification of smells in UML Diagrams", "SonarQube - Identification and measurement of code metrics and TD"], "artifact_input": "EMF Refactor - UML Diagrams\r\nSonarQube - Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuelTz-b8-bnPSpzODU2KPCIhZo_zd_t7DSW2BcwACNFw-WrolPul0jsey1ahyMya3U"}, "133": {"selection_timestamp": "7/19/2022 15:56:19", "study_title": "Recommending when Design Technical Debt Should be Self-Admitted", "study_authors": "Fiorella Zampetti\r\nCedric Noiseux\r\nGiuliano Antoniol\r\nFoutse Khomh\r\nMassimiliano Di Penta", "study_author_type": "Academia", "study_year": 2017.0, "study_venue": "International Conference on Software Maintenance and Evolution", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/ICSME.2017.44", "study_bibtex": "@INPROCEEDINGS{Zampetti2017-bi,\r\n  title           = \"Recommending when Design Technical Debt Should be\r\n                     {Self-Admitted}\",\r\n  booktitle       = \"2017 {IEEE} International Conference on Software\r\n                     Maintenance and Evolution ({ICSME})\",\r\n  author          = \"Zampetti, Fiorella and Noiseux, Cedric and Antoniol,\r\n                     Giuliano and Khomh, Foutse and Di Penta, Massimiliano\",\r\n  publisher       = \"IEEE\",\r\n  month           =  sep,\r\n  year            =  2017,\r\n  conference      = \"2017 IEEE International Conference on Software Maintenance\r\n                     and Evolution (ICSME)\",\r\n  location        = \"Shanghai\"\r\n}", "study_summary": null, "study_problem": "represents a workaround or a temporary,\r\n\r\nincomplete solution. This paper investigates the extent to which\r\npreviously self-admitted technical debt can be used to provide\r\nrecommendations to developers when they write new source code,\r\nsuggesting them when to \u201cself-admit\" design technical debt, or\r\npossibly when to improve the code being written.", "study_objective": "To achieve this\r\n\r\ngoal, we have developed a machine learning approach named TE-\r\nDIOUS (TEchnical Debt IdentificatiOn System), which leverages\r\n\r\nvarious kinds of method-level features as independent variables,\r\nincluding source code structural metrics, readability metrics and,\r\nlast but not least, warnings raised by static analysis tools.", "study_results": null, "artifact_name": ["CheckStyle", "PMD"], "artifact_description": "CheckStyle [1]\r\nis a static analysis tool often used to check the adherence\r\nto coding standards, but also to identify pieces of code that\r\nare good candidates for code smells. CheckStyle performs its\r\nanalyses using checks defined in a configuration file. In our\r\nstudy we used a default configuration file containing code\r\nstyles defined by Oracle2 and featuring 43 checks. PMD [2]\r\nis a source code analyzer able to find common programming\r\nflaws such as unused objects, unnecessary catch blocks,\r\nor incomprehensible naming.", "artifact_link": ["http://checkstyle.sourceforge.net/checks.html", "https://pmd.github.io/pmd-5.5.5/pmd-java/rules/index.html"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": "We have chosen CheckStyle and PMD because of their\r\nadoption by OSS [9], because of their capability of providing a\r\nrange of different kinds of warnings, related to code style and\r\npoor programming practices and, last but not least, because\r\nthey can be executed on the source code without requiring\r\ncompilation.", "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "133", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Code Analysis"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnud1ms_kOj0Z46M8333Zxb6jyzTufSMxXCSmfdUxvtOfZdIO4SoXWG6HffkhtEOAnko"}, "136": {"selection_timestamp": "7/19/2022 21:00:31", "study_title": "Compiling Static Software Metrics for Reliability and Maintainability from GitHub Repositories", "study_authors": "Jeremy Ludwig\r\nSteven Xu\r\nFrederick Webber", "study_author_type": "Both", "study_year": 2017.0, "study_venue": "International Conference on Systems, Man, and Cybernetics", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1109/SMC.2017.8122569", "study_bibtex": "@INPROCEEDINGS{Ludwig2017-dp,\r\n  title           = \"Compiling static software metrics for reliability and\r\n                     maintainability from {GitHub} repositories\",\r\n  booktitle       = \"2017 {IEEE} International Conference on Systems, Man, and\r\n                     Cybernetics ({SMC})\",\r\n  author          = \"Ludwig, Jeremy and Xu, Steven and Webber, Frederick\",\r\n  publisher       = \"IEEE\",\r\n  month           =  oct,\r\n  year            =  2017,\r\n  conference      = \"2017 IEEE International Conference on Systems, Man and\r\n                     Cybernetics (SMC)\",\r\n  location        = \"Banff, AB\"\r\n}", "study_summary": null, "study_problem": "This paper identifies a small, essential set of static\r\nsoftware code metrics linked to the software product quality\r\ncharacteristics of reliability and maintainability and to the most\r\ncommonly identified sources of technical debt.", "study_objective": "A plug-in is\r\ncreated for the Understand code visualization and static analysis\r\ntool that calculates and aggregates the metrics. The plug-in\r\nproduces a high-level interactive html report as well as\r\ndeveloper-level information needed to address quality issues\r\nusing Understand.", "study_results": null, "artifact_name": ["Understand", "CBR Insight"], "artifact_description": "The Understand code visualization\r\nand static code analysis tool, developed by Scientific\r\nToolworks, is used to perform all metric measurement and\r\ncalculation.\r\n\r\nThis project contains scripts that use the Understand static analysis tool to calculate key metrics associated with technical debt for a list of GitHub repositories and compiles the results into a single file.", "artifact_link": ["www.scitools.com", "https://github.com/StottlerHenke"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Plugin", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "The next\r\nstep in this project aims to use the described plug-in as part of\r\na research effort to define and validate the aggregation of\r\nthese metrics as part of a software quality model.", "artifact_other_comments": null, "study_code": "136", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate code metrics"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucZYPnKPd1G_Hc4CBsUjWp1ED9DzXPA_MvImcgUD0KpORlstl9hhokY65oIRNsSF9A"}, "178": {"selection_timestamp": "7/19/2022 16:50:36", "study_title": "Experiences Applying Automated Architecture Analysis Tool Suites", "study_authors": "Ran Mo\r\nWill Snipes\r\nYuanfang Cai\r\nSrini Ramaswamy\r\nRick Kazman\r\nMartin Naedele", "study_author_type": "Both", "study_year": 2018.0, "study_venue": "International Conference on Automated Software Engineering", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3238147.3240467", "study_bibtex": "@INPROCEEDINGS{Mo2018-us,\r\n  title      = \"Experiences applying automated architecture analysis tool\r\n                suites\",\r\n  booktitle  = \"Proceedings of the 33rd {ACM/IEEE} International Conference on\r\n                Automated Software Engineering\",\r\n  author     = \"Mo, Ran and Snipes, Will and Cai, Yuanfang and Ramaswamy, Srini\r\n                and Kazman, Rick and Naedele, Martin\",\r\n  publisher  = \"ACM\",\r\n  month      =  sep,\r\n  year       =  2018,\r\n  address    = \"New York, NY, USA\",\r\n  copyright  = \"http://www.acm.org/publications/policies/copyright\\_policy\\#Background\",\r\n  conference = \"ASE '18: 33rd ACM/IEEE International Conference on Automated\r\n                Software Engineering\",\r\n  location   = \"Montpellier France\"\r\n}", "study_summary": null, "study_problem": null, "study_objective": "In this paper, we report our experiences of applying three com-\r\nplementary automated software architecture analysis techniques,\r\n\r\nsupported by a tool suite, called DV8, to 8 industrial projects within\r\n\r\na large company.", "study_results": "Our experiences revealed that the metrics scores,\r\nquantitative debt analysis, and architecture flaw visualization can\r\neffectively bridge the gap between management and development,\r\nhelp them decide if, when, and where to refactor.", "artifact_name": ["DV8", "Understand"], "artifact_description": null, "artifact_link": ["https://archdia.com/", "https://scitools.com/"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": "Our experiences revealed that the metrics scores,\r\nquantitative debt analysis, and architecture flaw visualization can\r\neffectively bridge the gap between management and development,\r\nhelp them decide if, when, and where to refactor.\r\n\r\nThe automatically detected architec-\r\nture flaws and roots enabled the practitioners to precisely pinpoint,\r\n\r\nvisualize, and quantify the \u201chotspots\" within the systems that are\r\nresponsible for high maintenance costs.", "artifact_limitations": null, "artifact_gaps": "The practitioners\r\nalso suggested that they would like to know whether a product\u2019s\r\nDL and PC values have gotten worse over night. If so, they would\r\nlike to know how to locate the specific problem area.", "artifact_other_comments": null, "study_code": "178", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identitification of Architectural Flaws", "Calculation of TD"], "artifact_input": "Dependency Graph\r\nRevision History\r\nBug Reports", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucaB1YzJm0tykno4UPpqU82D0Hu2AznswSecXkk3gDDzb85ONx3crXfcsH3Czc5z7M"}, "196": {"selection_timestamp": "7/19/2022 20:28:36", "study_title": "Are Static Analysis Violations Really Fixed? A Closer Look at Realistic Usage of SonarQube", "study_authors": "Diego Marcilio\r\nRodrigo Bonifacio\r\nEduardo Monteiro\r\nEdna Canedo\r\nWelder Luz\r\nGustavo Pinto", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "International Conference on Program Comprehension", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/ICPC.2019.00040", "study_bibtex": "@INPROCEEDINGS{Marcilio2019-mj,\r\n  title           = \"Are static analysis violations really fixed? A closer look\r\n                     at realistic usage of {SonarQube}\",\r\n  booktitle       = \"2019 {IEEE/ACM} 27th International Conference on Program\r\n                     Comprehension ({ICPC})\",\r\n  author          = \"Marcilio, Diego and Bonifacio, Rodrigo and Monteiro,\r\n                     Eduardo and Canedo, Edna and Luz, Welder and Pinto,\r\n                     Gustavo\",\r\n  publisher       = \"IEEE\",\r\n  month           =  may,\r\n  year            =  2019,\r\n  copyright       = \"https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html\",\r\n  conference      = \"2019 IEEE/ACM 27th International Conference on Program\r\n                     Comprehension (ICPC)\",\r\n  location        = \"Montreal, QC, Canada\"\r\n}", "study_summary": null, "study_problem": "Even though\r\navailable research have already explored ASATs issues and how\r\nthey are fixed, these studies rely on revisions of the software,\r\ninstead of mining real usage of these tools and real issue reports.", "study_objective": "In this paper we contribute with a comprehensive, multi-method\r\nstudy about the usage of SonarQube (a popular static analysis\r\ntool), mining 421,976 issues from 246 projects in four different\r\ninstance of SonarQube: two hosted in open-source communities\r\n(Eclipse and Apache) and two hosted in Brazilian government\r\ninstitutions (Brazilian Court of Account (TCU) and Brazilian\r\nFederal Police (PF)).", "study_results": null, "artifact_name": ["SonarQube", "sonar-issues-miner"], "artifact_description": "We implement a tool3 that is able to extract several data\r\nfrom SonarQube instances. The data collection is done by\r\nquerying the API provided in the instance itself.", "artifact_link": ["https://github.com/dvmarcilio/sonar-issues-miner"], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "By mining four instances of\r\nSonarQube, we built a general comprehension of the practices\r\nfor fixing issues that this tool reports. We found a low rate\r\nof fixed issues and that one-third of the fixes occurs after one\r\nyear of the issue\u2019s report. In addition, we showed evidences\r\nthat 20% of the violation rules correspond to 80% of the fixes,\r\nwhich can assist practitioners to properly select a subset of\r\nrules that are relevant, and discard rules that are rarely fixed.", "artifact_limitations": null, "artifact_gaps": "Finally, mining issues from SonarQube can be challenging,\r\nspecially when considering different instance versions and\r\ndifferent host organizations. To help further research aiming at\r\nmining SonarQube issues, we recommend researchers to mine\r\nrules for the chosen language(s). As an example, EF most\r\nfixed rule was a custom one, that would not be analyzed if\r\nrules were not mined or a revision approach was used.", "artifact_other_comments": null, "study_code": "196", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Code Analysis"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufqPLmg7PRLJxAn66logXgjbxtw4F4y36TGCu3tgzPOTI3kGinSyEkL-q1oa810wrY"}, "202": {"selection_timestamp": "7/19/2022 20:51:17", "study_title": "Reusing Code from StackOverflow: The Effect on Technical Debt", "study_authors": "Nikolaos Nikolaidis\r\nGeorgios Digkas\r\nApostolos Ampatzoglou\r\nAlexander Chatzigeorgiou", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "Euromicro Conference on Software Engineering and Advanced Applications", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SEAA.2019.00022", "study_bibtex": "@INPROCEEDINGS{Digkas2019-gr,\r\n  title           = \"Reusing code from {StackOverflow}: The effect on technical\r\n                     debt\",\r\n  booktitle       = \"2019 45th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications ({SEAA})\",\r\n  author          = \"Digkas, Georgios and Nikolaidis, Nikolaos and Ampatzoglou,\r\n                     Apostolos and Chatzigeorgiou, Alexander\",\r\n  publisher       = \"IEEE\",\r\n  month           =  aug,\r\n  year            =  2019,\r\n  copyright       = \"https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html\",\r\n  conference      = \"2019 45th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications (SEAA)\",\r\n  location        = \"Kallithea-Chalkidiki, Greece\"\r\n}", "study_summary": null, "study_problem": "Despite the obvious benefit of increased\r\nproductivity, reuse can have a mixed effect on the quality of\r\nthe resulting code depending on the properties of the reused\r\nsolutions. An efficient concept for capturing a wide-range of\r\ninternal software qualities is the metaphor of Technical Debt\r\nwhich expresses the impact of shortcuts in software development\r\non its maintenance costs.", "study_objective": "In this paper, we present the results\r\nof an empirical study on the relation between the existence of\r\nreusing code retrieved from StackOverflow on the technical debt\r\nof the target system.", "study_results": null, "artifact_name": ["PMD", "SonarQube"], "artifact_description": "To check for duplicates between the two datasets we used\r\nPMD, which is a widely used static code analyzer. PMD\r\n\r\noffers clone detection functionality with the Copy/Paste Detec-\r\ntor (CPD) module, which can detect duplicated code in one\r\n\r\nor more files, in several programming languages, including\r\nJava. Each code fragment retrieved from StackOverflow was\r\nwrapped in a Java file and CPD was used to check for\r\nduplicates between each StackOverflow file and all candidate\r\nGitHub files.", "artifact_link": ["https://pmd.github.io/", "https://www.sonarqube.org/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "These findings confirm the high reputation\r\nthat StackOverflow enjoys among developers, indicating that\r\nbeyond an improvement of productivity, reuse of code can also\r\nenhance software quality.", "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "202", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Code Analysis"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuesjfzK22dklYdnMp73f-8Z0P3VaAXHlVSRNmouLF6rewpfX-Y0HexzapgI8hIpnuo"}, "205": {"selection_timestamp": "7/19/2022 21:06:16", "study_title": "CBR Insight: Measure and Visualize Source Code Quality", "study_authors": "Jeremy Ludwig\r\nDevin Cline", "study_author_type": "Industry", "study_year": 2019.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/TechDebt.2019.00017", "study_bibtex": "@INPROCEEDINGS{Ludwig2019-zx,\r\n  title           = \"{CBR} insight: Measure and visualize source code quality\",\r\n  booktitle       = \"2019 {IEEE/ACM} International Conference on Technical Debt\r\n                     ({TechDebt})\",\r\n  author          = \"Ludwig, Jeremy and Cline, Devin\",\r\n  publisher       = \"IEEE\",\r\n  month           =  may,\r\n  year            =  2019,\r\n  copyright       = \"https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html\",\r\n  conference      = \"2019 IEEE/ACM International Conference on Technical Debt\r\n                     (TechDebt)\",\r\n  location        = \"Montreal, QC, Canada\"\r\n}", "study_summary": null, "study_problem": "A critical aspect of software development is creating\r\nhigh-quality source code that is reliable, maintainable, and has\r\nlimited technical debt. Software development teams generally\r\nemploy a variety of design techniques, processes, and tools to\r\ncontinually work towards quality code while balancing the overall\r\ntime and budget demands of the project.", "study_objective": "The goal of CBR Insight\r\n(CBRI) is to provide an objective and understandable measure of\r\nsoftware quality that can help guide decisions and direct limited\r\nresources during software acquisition, development, and\r\n\r\nsustainment.", "study_results": null, "artifact_name": ["CBR Insight"], "artifact_description": "CBRI calculates static source code metrics for each of these\r\nthree areas. A brief description is given for non-standard\r\nmetrics. See the citations for more information. The architecture\r\nmetrics are Core Size and Propagation Cost [7]. Files in the Core\r\narchitecture group generally contain more defects and cost more\r\nto maintain, so a smaller core size is better. The two complexity\r\nmetrics are Duplicate Lines of Code and Overly Complex Files.", "artifact_link": ["https://github.com/StottlerHenke"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Validation in relevant environment", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Ongoing work on CBRI is currently focused on a number of\r\ndifferent issues. Some of these issues are in the inner workings\r\nof CBRI, investigating improvements to the library of peer\r\nprojects and the score aggregation methods. Other issues include\r\nchanges to the user interface: updating the graphical layout,\r\ndisplaying information on peer projects, and visualizing changes\r\nin the source code relative to a baseline measurement. The last\r\nissue is identifying additional metrics that gauge the clarity of\r\nsoftware as it relates to reliability and maintainability [10].", "artifact_other_comments": null, "study_code": "205", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate code metrics"], "artifact_input": "Source code", "selection_response_link": "https://docs.google.com/forms/u/2/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/formResponse"}, "208": {"selection_timestamp": "7/19/2022 21:23:01", "study_title": "DV8: Automated Architecture Analysis Tool Suites", "study_authors": "Yuanfang Cai\r\nRick Kazman", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/TechDebt.2019.00015", "study_bibtex": "@INPROCEEDINGS{Cai2019-da,\r\n  title           = \"{DV8}: Automated architecture analysis tool suites\",\r\n  booktitle       = \"2019 {IEEE/ACM} International Conference on Technical Debt\r\n                     ({TechDebt})\",\r\n  author          = \"Cai, Yuanfang and Kazman, Rick\",\r\n  publisher       = \"IEEE\",\r\n  month           =  may,\r\n  year            =  2019,\r\n  copyright       = \"https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html\",\r\n  conference      = \"2019 IEEE/ACM International Conference on Technical Debt\r\n                     (TechDebt)\",\r\n  location        = \"Montreal, QC, Canada\"\r\n}", "study_summary": null, "study_problem": "Development\r\n\r\nteams feel the increasing challenges of maintenance as the\r\narchitecture degrades, and often have intuitions about where\r\nthe problems are, but have difficulty pinpointing which files are\r\nproblematic and why. It is still a challenge for the development\r\nteams to quantify their projects\u2019 maintenance problems\u2014their\r\ndebts\u2014as a way of justifying the investment in refactoring.", "study_objective": "Here we present our tool suite called DV81. The objective\r\nof DV8 is to measure software modularity, detect architecture\r\nanti-patterns as technical debts, quantify the maintenance cost\r\nof each instance of an anti-pattern, and enable return on\r\ninvestment analyses of architectural debts.", "study_results": null, "artifact_name": ["DV8"], "artifact_description": "The architecture problems identified by DV8 are one type\r\n\r\nof technical debt. DV8 provides two ways to quantify archi-\r\ntecture debt. First, DV8 detects Architecture Roots [15], which\r\n\r\ncapture how bug-prone files are structurally connected and\r\nclustered together, and how they evolve over time. Considering\r\neach root as a debt [3], DV8 can calculate the maintenance\r\ncosts of files involved in each root and the benefits achievable\r\n\r\nthrough refactoring.", "artifact_link": ["https://www.archdia.net"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Expert Opinion", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": "Second, DV8 detects architecture anti-\r\npatterns [6], that is, recurring architecture problems among\r\n\r\nfiles with significant impacts on bug-proneness and change-\r\nproneness. DV8 not only identifies these anti-patterns, but\r\n\r\nalso quantifies the severity of each instance. DV8 has been\r\nrepeatedly validated in industrial settings and greatly valued\r\nby practitioners [3], [8], [9], [11], [14]", "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "208", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identity Architectural Debt", "Quantify Architectural Debt"], "artifact_input": null, "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudkmyEJSVY-A7DfY9LO-2CjKkP42cwxxYkT9yfg7Z32DH7NiPO2lupRNkytDBe0WvI"}, "278": {"selection_timestamp": "7/20/2022 15:33:53", "study_title": "AdaBoost-based Refused Bequest Code Smell Detection with Synthetic Instances", "study_authors": "Hao Chen\r\nZhilei Ren\r\nLei Qiao\r\nZhide Zhou\r\nGuojun Gao\r\nYue Ma\r\nHe Jiang", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Conference on Dependable Systems and Their Applications", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/DSA51864.2020.00019", "study_bibtex": "@INPROCEEDINGS{Chen2020-mk,\r\n  title           = \"{AdaBoost-based} refused bequest code smell detection with\r\n                     synthetic instances\",\r\n  booktitle       = \"2020 7th International Conference on Dependable Systems\r\n                     and Their Applications ({DSA})\",\r\n  author          = \"Chen, Hao and Ren, Zhilei and Qiao, Lei and Zhou, Zhide\r\n                     and Gao, Guojun and Ma, Yue and Jiang, He\",\r\n  publisher       = \"IEEE\",\r\n  month           =  nov,\r\n  year            =  2020,\r\n  conference      = \"2020 7th International Conference on Dependable Systems\r\n                     and Their Applications (DSA)\",\r\n  location        = \"Xi'an, China\"\r\n}", "study_summary": null, "study_problem": "Abstract\u2014Software requirements are constantly changing.\r\nConsequently, the development process is frequently under time\r\npressure, which results in technical debt. To illustrate the\r\nsymptoms of technical debt, 22 code smells have been introduced\r\nto indicate the poor design in code fragment, among which\r\nrefused bequest is one of the most harmful smells and with\r\nhigh diffuseness. However, refused bequest is rarely taken into\r\naccount because there is a lack of dataset. Moreover, it is difficult\r\nto design the detection rules for refused bequest compared with\r\nother popular smells.", "study_objective": "In this paper, we propose a machine-learning-based refused\r\nbequest smell detection framework SEADART, which features\r\nthe utilization of a set of synthetic smelly instances. Specifically,\r\nSEADART comprises three components: (1) a smell generation\r\n\r\napproach, and (2) a model training strategy, and (3) an AdaBoost-\r\nbased detection model. We evaluate the performance of the\r\n\r\nproposed framework.", "study_results": null, "artifact_name": ["Together", "iPlasma", "DECOR"], "artifact_description": "Model-Driven Architecture and data modeling systems in Micro Focus Together incorporate Unified Modeling Language (UML) for all-purpose systems modeling. This platform provides a collaborative approach to modeling enterprise architectures so that requirements, architectures, designs, and code are always in sync.\r\n\r\nFirst, among\r\nthese code smell detection tools, there are few designed for\r\nthe refused bequest identification. Iplasma has been widely\r\napplied as a benchmark for code smell detection algorithms\r\n\r\ncomparison [11, 24]. Besides, these tools are publicly avail-\r\nable, which means it enables other researchers to reproduce\r\n\r\nour experiment to make the validation and conduct further\r\nstudy.", "artifact_link": ["https://www.microfocus.com/en-us/products/together/overview", "http://loose.cs.upt.ro/index.php?n=Main.IPlasma", "https://www.ptidej.net/research/designsmells/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "278", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identitication of smells", "Calculate code metrics"], "artifact_input": "Source code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufPygmhZM_xvaJmGPDxNMNKjf8X0CSM_ZRhiGlIK4grQ2NzXeT9kvKPPAaTLOhI6-s"}, "353": {"selection_timestamp": "7/20/2022 15:46:58", "study_title": "Determining Enterprise Architecture Smells from Software Architecture Smells", "study_authors": "Benny Tieu\r\nSimon Hacks", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "Conference on Business Informatics", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/CBI52690.2021.10064", "study_bibtex": "@INPROCEEDINGS{Tieu2021-sq,\r\n  title           = \"Determining enterprise architecture smells from software\r\n                     architecture smells\",\r\n  booktitle       = \"2021 {IEEE} 23rd Conference on Business Informatics\r\n                     ({CBI})\",\r\n  author          = \"Tieu, Benny and Hacks, Simon\",\r\n  publisher       = \"IEEE\",\r\n  month           =  sep,\r\n  year            =  2021,\r\n  copyright       = \"https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html\",\r\n  conference      = \"2021 IEEE 23rd Conference on Business Informatics (CBI)\",\r\n  location        = \"Bolzano, Italy\"\r\n}", "study_summary": null, "study_problem": "However, TD is only limited\r\nto the technical aspects and does not describe smells found\r\non an enterprise level. Enterprise Architecture Debt (EAD)\r\nexpands the concepts of TD beyond the technical aspects such\r\nthat it covers the debts that can be found in all layers of an\r\nEnterprise Architecture (EA).", "study_objective": "The goal of this paper is to find EA smells derived from existing SA smells.", "study_results": null, "artifact_name": ["inFusion", "iPlasma", "Arcan"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "353", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of architectural smells"], "artifact_input": "Source code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueplppZidOrMN5prRBxkfTt_2ZQxLlr5T2dAnvHlOlOwCEvCGdVysczpt8cV9Fh410"}, "356": {"selection_timestamp": "7/20/2022 17:00:53", "study_title": "Experiences on Managing Technical Debt with Code Smells and AntiPatterns", "study_authors": "Jacinto Ramirez Lahti\r\nAntti-Pekka Tuovinen\r\nTommi Mikkonen", "study_author_type": "Both", "study_year": 2021.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/TechDebt52882.2021.00013", "study_bibtex": "@INPROCEEDINGS{Lahti2021-ot,\r\n  title           = \"Experiences on managing technical debt with code smells\r\n                     and {AntiPatterns}\",\r\n  booktitle       = \"2021 {IEEE/ACM} International Conference on Technical Debt\r\n                     ({TechDebt})\",\r\n  author          = \"Lahti, Jacinto Ramirez and Tuovinen, Antti-Pekka and\r\n                     Mikkonen, Tommi\",\r\n  publisher       = \"IEEE\",\r\n  month           =  may,\r\n  year            =  2021,\r\n  copyright       = \"https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html\",\r\n  conference      = \"2021 IEEE/ACM International Conference on Technical Debt\r\n                     (TechDebt)\",\r\n  location        = \"Madrid, Spain\"\r\n}", "study_summary": null, "study_problem": "However, as a metaphor,\r\ntechnical debt does not offer actionable advice on how to get\r\nrid of it. To get to a practical level in solving problems, more\r\nfocused mechanisms are needed. Commonly used approaches\r\nfor this include identifying code smells as quick indications of\r\npossible problems in the codebase and detecting the presence\r\nof AntiPatterns that refer to overt, recurring problems in design.", "study_objective": "In paper, our goal is to show how to effectively use common\r\ntools and the existing body of knowledge on code smells and\r\nAntiPatterns to detect technical debt and pay it back.", "study_results": null, "artifact_name": ["CodeMR", "IntelliJ IDEA"], "artifact_description": "CodeMR is a software quality tool that sup-\r\nports multiple languages, with integrations to multiple IDEs. It\r\n\r\nprovides an insight to the quality of software through an array\r\nof attributes \u2013 coupling, complexity, cohesion, size, and so on.\r\nIn general, these metrics are often affected by several features\r\nin code, which makes them promising for seeking code smells.", "artifact_link": ["https://www.codemr.co.uk/", "https://www.jetbrains.com/idea/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "356", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Commercial/Private", "artifact_license_evidence": null, "artifact_automation_provided": ["Code Analysis", "Smell Detection"], "artifact_input": "Source code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudbR2_7hbU5X1tnPY4Jv-n8cprkC61Wh6-Zba79M5vA7evgteBxXmh-Q6WsiWspE8c"}, "250": {"selection_timestamp": "7/20/2022 19:58:52", "study_title": "A Study on Architectural Smells Prediction", "study_authors": "Francesca Arcelli Fontana\r\nParis Avgeriou\r\nIlaria Pigazzini\r\nRiccardo Roveda", "study_author_type": "Both", "study_year": 2019.0, "study_venue": "Euromicro Conference on Software Engineering and Advanced Applications", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SEAA.2019.00057", "study_bibtex": "@INPROCEEDINGS{Arcelli_Fontana2019-hp,\r\n  title           = \"A study on architectural smells prediction\",\r\n  booktitle       = \"2019 45th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications ({SEAA})\",\r\n  author          = \"Arcelli Fontana, Francesca and Avgeriou, Paris and\r\n                     Pigazzini, Ilaria and Roveda, Riccardo\",\r\n  publisher       = \"IEEE\",\r\n  month           =  aug,\r\n  year            =  2019,\r\n  conference      = \"2019 45th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications (SEAA)\",\r\n  location        = \"Kallithea-Chalkidiki, Greece\"\r\n}", "study_summary": null, "study_problem": "Abstract\u2014Architectural smells can be detrimental to system\r\nmaintainability and evolvability, and represent a source of\r\narchitectural debt. Thus, it is very important to be able to\r\nunderstand how they evolved in the past and to predict their\r\nfuture evolution.", "study_objective": "In this paper, we evaluate if the existence of\r\narchitectural smells in the past versions of a project can be used\r\nto predict their presence in the future.", "study_results": null, "artifact_name": ["Arcan", "Machine Learning Packages R"], "artifact_description": "The detection of the above architectural smells is performed\r\nthrough a tool we had previously created, called Arcan.", "artifact_link": ["https://essere.disco.unimib.it/wiki/arcan/", "https://cran.r-project.org/package=klaR", "https://cran.r-project.org/package=C50", "https://cran.r-project.org/package=randomForest", "https://cran.r-project.org/package=kernlab", "https://cran.r-project.org/package=caret"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Prevention", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Expert Opinion", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "From the results obtained in the four analyzed projects, the\r\nprediction performance is high or very high. Hence, historical\r\narchitectural smell information can be used to predict the\r\npresence of AS in the future. In particular, we found that\r\nCD is a good predictor of CD smells. This can be useful to\r\ndevelopers/maintainers: if they pay particular attention to this\r\nAS and try to remove it as soon as the AS is introduced and\r\ndetected, they could reduce the possibility of incurring further\r\nCD in the future.", "artifact_limitations": null, "artifact_gaps": "We are particularly interested\r\n\r\nin understanding and studying the co-evolution of architectural\r\nsmells. This is particularly useful to better understand the AS,\r\ntheir evolution and also their removal. Through architectural\r\nrefactoring and software re-modularization we would like also\r\nto analyze the impact of refactoring on system complexity, on\r\nother software quality metrics and non-functional properties\r\n(e.g., performance, security, reliability) [21].", "artifact_other_comments": null, "study_code": "250", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of architectural smells"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnud5H0lkeDpZgYbgyAbCdDiXJweYHLCydxM8oKztMvBY8b_HT_yfjeEq6EvGWDcWB-g"}, "267": {"selection_timestamp": "7/20/2022 20:25:22", "study_title": "Learning to detect community smells in open source software projects", "study_authors": "Nuri Almarimi\r\nAli Ouni\r\nMohamed Wiem Mkaouer", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Knowledge-Based Systems", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1016/j.knosys.2020.106201", "study_bibtex": "@ARTICLE{Almarimi2020-jz,\r\n  title     = \"Learning to detect community smells in open source software\r\n               projects\",\r\n  author    = \"Almarimi, Nuri and Ouni, Ali and Mkaouer, Mohamed Wiem\",\r\n  journal   = \"Knowl. Based Syst.\",\r\n  publisher = \"Elsevier BV\",\r\n  volume    =  204,\r\n  number    =  106201,\r\n  pages     = \"106201\",\r\n  month     =  sep,\r\n  year      =  2020,\r\n  language  = \"en\"\r\n}", "study_summary": null, "study_problem": "Community smells are symptoms of organizational and social issues within the software development community that often lead to additional project costs. Recent studies identified a variety of community smells and defined them as sub-optimal patterns connected to organizational-social structures in the software development community.", "study_objective": "To early detect and discover existence of potential community smells in a software project, we introduce, in this paper, a novel machine learning-based detection approach, named csDetector, that learns from various existing bad community development practices to provide automated support in detecting such community smells.", "study_results": null, "artifact_name": ["CodeFace4Smells", "csDetector"], "artifact_description": "Another tool called Codeface4Smell has been\r\nproposed later as an extension of CodeFace to identify community\r\nsmells based on community metrics and statistical values to\r\nmeasure the quality and health characteristics of software devel-\r\nopment communities [12]. Codeface4Smell uses the development\r\nhistory and mailing lists to assess the social network among de-\r\nvelopers.", "artifact_link": ["https://github.com/maelstromdat/CodeFace4Smells"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Social Debt"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "As future work, we plan to extend our study to other com-\r\nmunity smell types and projects socio-technical characteristics,\r\n\r\nwhile providing ampler empirical evaluation,\r\nMore-\r\nover, we plan to extend our approach to provide software project\r\n\r\nmanager with community change recommendations to avoid\r\nsuch social debt in their projects. We also plan to assess the\r\nimpact of community smells on different aspects of software\r\nprojects.", "artifact_other_comments": null, "study_code": "267", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Detect community smells"], "artifact_input": "Github metadata (e.g., number of releases)\r\nSource Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucAnB2EAP2SMV-8q89k5a7l1DVteuwvczRCW3T9wA9GT_9Z2IeylHuLx84RFkiNShs"}, "132": {"selection_timestamp": "7/21/2022 13:06:19", "study_title": "Improving Object-Oriented Design ality: A Portfolio and Measurement-Based Approach", "study_authors": "Johannes Br\u00e4uer\r\nReinhold Pl\u00f6sch\r\nMatthias Saft\r\nChristian K\u00f6rner", "study_author_type": "Both", "study_year": 2017.0, "study_venue": "International Workshop on Software Measurement", "study_venue_type": "Workshop", "study_link": "http://doi.org/10.1145/3143434.3143454", "study_bibtex": "@INPROCEEDINGS{Brauer2017-ja,\r\n  title           = \"Improving object-oriented design quality\",\r\n  booktitle       = \"Proceedings of the 27th International Workshop on Software\r\n                     Measurement and 12th International Conference on Software\r\n                     Process and Product Measurement\",\r\n  author          = \"Br{\\\"a}uer, Johannes and Saft, Matthias and Pl{\\\"o}sch,\r\n                     Reinhold and K{\\\"o}rner, Christian\",\r\n  publisher       = \"ACM\",\r\n  month           =  oct,\r\n  year            =  2017,\r\n  address         = \"New York, NY, USA\",\r\n  copyright       = \"http://www.acm.org/publications/policies/copyright\\_policy\\#Background\",\r\n  conference      = \"IWSM/Mensura '17: 27th International Workshop on Software\r\n                     Measurement and 12th International Conference on Software\r\n                     Process and Product Measurement\",\r\n  location        = \"Gothenburg Sweden\"\r\n}", "study_summary": null, "study_problem": "To pay o this debt, the literature oers approaches for identifying these design aws; however, few methods for properly prioritizing investment eorts are available.", "study_objective": "In this paper, we propose an approach that supports the decision-making process re-\r\ngarding design improvements. It identies violations of design best practices that are then arranged within a two-dimensional portfolio matrix.", "study_results": null, "artifact_name": ["MUSE", "SonarQube"], "artifact_description": "To nd the violations of design\r\nbest practices, we developed a tool called MUSE because there is no\r\ntool available that would provide the exbility to speciy and check\r\nsuch best practices directly in code [25]. MUSE contains a set of\r\ndesign best practices (design rules) for the programming languages\r\nJava, C# and C++. Most design rules cover all three programming\r\nlanguages, since they are related to object-oriented concepts rather\r\nthan language features.\r\n\r\nIn SonarQube, the ndings are\r\nlinked to the source les, where developers can start investigating\r\nidentied issues.", "artifact_link": ["https://www.sonarqube.org/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Priorization", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "Our improvement portfolio matrix can be seen as a tool that\r\nprovides exactly that support for making proper decisions about design \r\nimprovement. It therefore combines the importance of design\r\nbest practice with benchmark values and can derive an overview\r\nof design aws for a particular project.", "artifact_limitations": null, "artifact_gaps": "In other words, we\r\nwould want to show a project team that the product performs well\r\nin, for example, information hiding, while having decits in regards\r\nto the single responsibility principle.", "artifact_other_comments": null, "study_code": "132", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of design violations", "Priorization of refactoring"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuc4LNIbUDEpSZbv9hpg6tIP9R3O5wFUIRSFAeoeEb0dupdH_W4b0ix6Ee65omh80uY"}, "152": {"selection_timestamp": "7/21/2022 13:33:01", "study_title": "To Adapt or Not to Adapt? Technical Debt and Learning Driven Self-Adaptation for Managing Runtime Performance", "study_authors": "Tao Chen\r\nRami Bahsoon\r\nShuo Wang\r\nXin Yao", "study_author_type": "Academia", "study_year": 2018.0, "study_venue": "International Conference on Performance Engineering", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3184407.3184413", "study_bibtex": "@INPROCEEDINGS{Chen2018-cx,\r\n  title           = \"To adapt or not to adapt?\",\r\n  booktitle       = \"Proceedings of the 2018 {ACM/SPEC} International\r\n                     Conference on Performance Engineering\",\r\n  author          = \"Chen, Tao and Bahsoon, Rami and Wang, Shuo and Yao, Xin\",\r\n  publisher       = \"ACM\",\r\n  month           =  mar,\r\n  year            =  2018,\r\n  address         = \"New York, NY, USA\",\r\n  copyright       = \"http://www.acm.org/publications/policies/copyright\\_policy\\#Background\",\r\n  conference      = \"ICPE '18: ACM/SPEC International Conference on Performance\r\n                     Engineering\",\r\n  location        = \"Berlin Germany\"\r\n}", "study_summary": null, "study_problem": "Self-adaptive system (SAS) can adapt itself to optimize various key\r\nperformance indicators in response to the dynamics and uncertainty\r\nin environment. In this paper, we present Debt Learning Driven\r\nAdaptation (DLDA), an framework that dynamically determines\r\nwhen and whether to adapt the SAS at runtime", "study_objective": "DLDA leverages the\r\ntemporal adaptation debt, a notion derived from the technical debt\r\nmetaphor, to quantify the time-varying money that the SAS carries\r\nin relation to its performance and Service Level Agreements.", "study_results": null, "artifact_name": ["Search-based Self-Adaptive Software Engine (SSASE)"], "artifact_description": "The principle of DLDA is that we adapt the SAS, if and\r\nonly if, it can make the SAS economically healthier (less debt) than\r\nthat of not adapting it. Particularly, our contributions include: (i)\r\nWe propose the temporal adaptation debt to quantify the net debt\r\nof SAS, which expresses the extent to which the SAS can repay\r\nits debt, if any, and create net profit from its decision (adapt or\r\nnot). (ii) The labeling data is then used to train a binary and online\r\nclassifier, which continuously classifies a re-emergent or unforeseen\r\ncircumstances into the class label (i.e., to adapt or not) that can bring\r\nless debt, then inform the planner of SAS. (iii) DLDA is independent\r\nto the online learning classifier and planner for adaptation, in which\r\nDLDA also learns the effectiveness of a planner.", "artifact_link": ["https://github.com/taochen/ssase"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Framework", "artifact_type_evidence": null, "artifact_td_activities": ["Monitoring", "Measurement"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Adaptation TD", "Net Debt"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Our future work includes investigating the possibility of predicting for the long-term adaptation triggers, and how short-/long-term\r\nprediction could affect the trigger of adaptation. We also plan to\r\napply DLDA on extreme domains of SAS, e.g., mobile environment.", "artifact_other_comments": null, "study_code": "152", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculates the debt related to adaptation of SAS"], "artifact_input": "Computational Data (e.g., CPU Usage, Memory Usage)", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnud43pULE5_jXCq9YxLTBVKcagfaz6RL_C29LmSKmz2Kl1BEXxgLT5peB-Aoqn3xrlo"}, "225": {"selection_timestamp": "7/21/2022 13:42:59", "study_title": "CodeArena: Inspecting and Improving Code Quality Metrics using Minecraft", "study_authors": "Simon Baars\r\nSander Meester", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/TechDebt.2019.00023", "study_bibtex": "@INPROCEEDINGS{Baars2019-oe,\r\n  title           = \"{CodeArena}: Inspecting and improving code quality metrics\r\n                     using minecraft\",\r\n  booktitle       = \"2019 {IEEE/ACM} International Conference on Technical Debt\r\n                     ({TechDebt})\",\r\n  author          = \"Baars, Simon and Meester, Sander\",\r\n  publisher       = \"IEEE\",\r\n  month           =  may,\r\n  year            =  2019,\r\n  copyright       = \"https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html\",\r\n  conference      = \"2019 IEEE/ACM International Conference on Technical Debt\r\n                     (TechDebt)\",\r\n  location        = \"Montreal, QC, Canada\"\r\n}\r\n", "study_summary": null, "study_problem": "Abstract\u2014To minimize technical debt and increase the main-\r\ntainability of software, it is essential to make developers aware of\r\n\r\nwhat factors influence the maintainability of a codebase.", "study_objective": "To make\r\nthe field of code quality and maintenance intuitive to developers,\r\nwe propose CodeArena, which is an extension to the popular 3D\r\nsandbox game called Minecraft.", "study_results": null, "artifact_name": ["CodeArena"], "artifact_description": "CodeArena converts patterns in a codebase that are considered\r\nharmful to monsters in Minecraft, which can then be fought to\r\nimprove the codebase. This way, the developer can gradually\r\nimprove the quality of the code, while learning about code quality\r\nin an engaging way.", "artifact_link": ["https://github.com/SimonBaars/CodeArena"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "225", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify violations in code quality"], "artifact_input": "Source code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueOt9_OIkNCXwMUUUQXG1IyPnpuznF3hJFO1avXZxHPVpmlqbB4J4KfM5QZ178WtEs"}, "228": {"selection_timestamp": "7/21/2022 14:04:17", "study_title": "Towards an Autonomous Bot for Automatic Source Code Refactoring", "study_authors": "Marvin Wyrich\r\nJustus Bogner", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "International Workshop on Bots in Software Engineering ", "study_venue_type": "Workshop", "study_link": "http://doi.org/10.1109/BotSE.2019.00015", "study_bibtex": "@INPROCEEDINGS{Wyrich2019-oh,\r\n  title           = \"Towards an autonomous bot for automatic source code\r\n                     refactoring\",\r\n  booktitle       = \"2019 {IEEE/ACM} 1st International Workshop on Bots in\r\n                     Software Engineering ({BotSE})\",\r\n  author          = \"Wyrich, Marvin and Bogner, Justus\",\r\n  publisher       = \"IEEE\",\r\n  month           =  may,\r\n  year            =  2019,\r\n  copyright       = \"https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html\",\r\n  conference      = \"2019 IEEE/ACM 1st International Workshop on Bots in\r\n                     Software Engineering (BotSE)\",\r\n  location        = \"Montreal, QC, Canada\"\r\n}", "study_summary": null, "study_problem": " However, empirical studies have shown that these solutions are not\r\nwidely accepted by software developers and most refactorings\r\nare still performed manually. For example, developers reported\r\nthat refactoring tools should support functionality for reviewing\r\nchanges. They also criticized that introducing such tools would\r\nrequire substantial effort for configuration and integration into\r\nthe current development environment.", "study_objective": "In this paper, we present our work towards the RefactoringBot, an autonomous bot that integrates into the team like a\r\nhuman developer via the existing version control platform. The\r\nbot automatically performs refactorings to resolve code smells\r\nand presents the changes to a developer for asynchronous review\r\nvia pull requests.", "study_results": null, "artifact_name": ["Refactoring-Bot", "SonarQube"], "artifact_description": "In this paper, we present our work towards the RefactoringBot, an autonomous bot that integrates into the team like a\r\nhuman developer via the existing version control platform. The\r\nbot automatically performs refactorings to resolve code smells\r\nand presents the changes to a developer for asynchronous review\r\nvia pull requests. This way, developers are not interrupted in their\r\nworkflow and can review the changes at any time with familiar\r\ntools. Proposed refactorings can then be integrated into the code\r\nbase via the push of a button. We elaborate on our vision, discuss\r\ndesign decisions, describe the current state of development, and\r\ngive an outlook on planned development and research activitie", "artifact_link": ["https://github.com/Refactoring-Bot"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Bot", "artifact_type_evidence": null, "artifact_td_activities": ["Repayment", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": "Automatic refactoring offers much potential for increasing\r\nthe effectiveness and efficiency of code quality improvement.\r\nDue to the complex integration into existing environments and\r\nthe habitual way developers work, tool support has so far not\r\nbeen sufficiently accepted by developers.", "artifact_limitations": null, "artifact_gaps": "The usefulness and acceptance of the Refactoring-Bot will\r\n\r\nbe evaluated in future studies. In particular, we see the inter-\r\naction between bot and development team as an interesting\r\n\r\nfield of research and expect future studies to provide valuable\r\ninsights into the role of bots in automating maintenance tasks.", "artifact_other_comments": null, "study_code": "228", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": "However, it just need to bee attached to a project to start refactoring the code.", "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify Code Smells", "Refactor the source code"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufpqNszaiTIbqIzjn-zIRToUgNDme4kg4hK349fr_Ex55VgFmF80h5xQRTi5pcrVwI"}, "264": {"selection_timestamp": "7/21/2022 14:28:51", "study_title": "Overview of an Automated Framework to Measure and Track the Quality Level of a Product", "study_authors": "Mariana Falco\r\nEzequiel Scott\r\nGabriela Robiolo", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Biennial Congress of Argentina", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1109/ARGENCON49523.2020.9505405", "study_bibtex": "@INPROCEEDINGS{Falco2020-vt,\r\n  title           = \"Overview of an automated framework to measure and track\r\n                     the quality level of a product\",\r\n  booktitle       = \"2020 {IEEE} Congreso Bienal de Argentina ({ARGENCON})\",\r\n  author          = \"Falco, Mariana and Scott, Ezequiel and Robiolo, Gabriela\",\r\n  publisher       = \"IEEE\",\r\n  month           =  dec,\r\n  year            =  2020,\r\n  conference      = \"2020 IEEE Congreso Bienal de Argentina (ARGENCON)\",\r\n  location        = \"Resistencia, Argentina\"\r\n}", "study_summary": null, "study_problem": "Abstract\u2014Product owners need to comprehend the product\r\n\r\nquality level, in a synthetic and intuitive way to facilitate the de-\r\ncision of accepting or rejecting the iteration. This article presents\r\n\r\nthe basis of an automated framework to measure and monitor\r\nthe quality level of a software product, within each iteration.", "study_objective": "This\r\nframework is based on the Product Quality Evaluation Method\r\n(PQEM), which was designed by the authors and it allows the\r\nevaluation of the quality characteristics of a software product,\r\nusing the Goal-Question-Metric approach, the ISO/IEC 25010,\r\nISO/IEC 25023, the extension made of test coverage concept\r\nto quality coverage applied to each quality characteristic, and\r\ntechnical debt and waste.", "study_results": null, "artifact_name": ["SonarQube", "Sikuli", "JMeter"], "artifact_description": "Sikuli can be used to identify portability issues\r\nJmeter can be used to measure performance", "artifact_link": ["Sikuli web site \u2013 http://sikulix.com//", "JMeter web site \u2013 https://jmeter.apache.org/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD", "Build TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": "is based on PQEM [5], which allows measuring\r\nthe quality level of each iteration of a product. It should be\r\nnoted that the framework is automatic and the measurement\r\nis semi-automatic, and in this context it is an automated tool\r\nthat will be developed throughout this year. But, it is viable to\r\nmention that applications and validations of the PQEM method\r\nhave already been made.", "artifact_limitations": null, "artifact_gaps": "In this context, it is expected to develop new research and\r\ntools, in order to have a robust and complete framework useful\r\nfor any project leader, technical leaders and quality managers.\r\nAlso, the energy efficiency for CPU-intensive processing is an\r\nimportant concern that is studied from several perspectives.\r\nFor example, they showed that using energy-aware job stealing\r\nincreases the energy efficiency of mobile computational Grids\r\nbecause it increases the number of jobs that can be executed\r\nusing the same amount of energy [24].", "artifact_other_comments": null, "study_code": "264", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of issues"], "artifact_input": "Source Code\r\nGUI", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudjzR0Dama9pSU6eO6VLkxcbmNj5Ucu-aHF-MxA_tIBqYBRi4ZnzSl9Invln4GPOY4"}, "265": {"selection_timestamp": "7/21/2022 15:55:49", "study_title": "Software Architecture Reconstruction via a Genetic Algorithm: Applying the Move Class Refactoring", "study_authors": "Theodoros Maikantis\r\nAngeliki-Agathi Tsintzira\r\nApostolos Ampatzoglou\r\nElvira-Maria Ar-Vanitou\r\nAlexander Chatzigeorgiou\r\nIoannis Stamelos\r\nStamatia Bibi\r\nIgnatios Deligiannis", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Pan-Hellenic Conference on Informatics", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3437120.3437292", "study_bibtex": "@INPROCEEDINGS{Maikantis2020-hr,\r\n  title      = \"Software architecture reconstruction via a genetic algorithm:\r\n                Applying the move class refactoring\",\r\n  booktitle  = \"24th {Pan-Hellenic} Conference on Informatics\",\r\n  author     = \"Maikantis, Theodoros and Tsintzira, Angeliki-Agathi and\r\n                Ampatzoglou, Apostolos and Arvanitou, Elvira-Maria and\r\n                Chatzigeorgiou, Alexander and Stamelos, Ioannis and Bibi,\r\n                Stamatia and Deligiannis, Ignatios\",\r\n  publisher  = \"ACM\",\r\n  month      =  nov,\r\n  year       =  2020,\r\n  address    = \"New York, NY, USA\",\r\n  conference = \"PCI 2020: 24th Pan-Hellenic Conference on Informatics\",\r\n  location   = \"Athens Greece\"\r\n}", "study_summary": null, "study_problem": "However, in practice, this principle is\r\nviolated due to poor architecting design decisions, lack of time, or\r\ncoding shortcuts, leading to a phenomenon termed as architectural technical debt (ATD).", "study_objective": "To alleviate this problem (lack of architectural modularity), the most common solution is the application of a software refactoring, namely Move Class\u2014i.e., moving classes\r\n(the core artifact in object-oriented systems) from one module to another. To identify Move Class refactoring opportunities, we employ a search-based optimization process, relying on optimization metrics, through which optimal moves are derived.", "study_results": null, "artifact_name": ["DeRecGEA"], "artifact_description": "In this section, we present the proposed algorithm for applying the\r\nMove Class refactoring. In particular, we organize the section, based\r\non the generic steps of the GEA, presented in Section 2. The goal of\r\nDeRecGEA is to group classes, into modular components, in a recursive manner (as dictated by GEA), resulting into sub-components. These sub-components, act as the input of GEA input, to achieve the intended hierarchical structure. The component structure is a\r\nnon-restrictive one, in the sense that they only aim at characterizing groups of classes. As a result if two components of two different individuals have the same name, they are not considered the same, because they could be labeling two different class groups.", "artifact_link": ["https://github.com/teomaik/DeRec-GEA"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Algorithm", "artifact_type_evidence": null, "artifact_td_activities": ["Repayment", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "The results on the two small-scale projects\r\nare satisfactory, in the sense that their modularity is significantly\r\nimproved.", "artifact_limitations": "However, regarding the large-scale project the results are\r\nencouraging, but still not satisfactory. In particular, we have been\r\n\r\nable to reduce the size of the project (in terms of number of compo-\r\nnents), by only getting a limited modularity penalty.", "artifact_gaps": "Nevertheless, we encourage practitioners (esp.\r\n\r\nof small- and medium-scale applications) to experiment with the\r\ndeveloped tool and Move Class refactorings, since they seem as\r\npromising solutions for architecture decay in terms of modularity.", "artifact_other_comments": null, "study_code": "265", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify architectural smells", "Proceed code refactoring"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufYGyQHCxzv-K7LX-AYlHbiT8ArdJ3Y-3jGfS4vqm7Bif_dteZEa4Pqm4Dedwjz_qE"}, "268": {"selection_timestamp": "7/21/2022 16:09:49", "study_title": "On the Influence of UML Class Diagrams Refactoring on Code Debt: A Family of Replicated Empirical Studies", "study_authors": "S\u00e1vio Freire\r\nAmanda Passos\r\nManoel Mendon\u00e7a\r\nCl\u00e1udio Sant\u2019Anna\r\nRodrigo O. Sp\u00ednola", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Euromicro Conference on Software Engineering and Advanced Applications", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SEAA51224.2020.00064", "study_bibtex": "@INPROCEEDINGS{Freire2020-ch,\r\n  title           = \"On the influence of {UML} class diagrams refactoring on\r\n                     code debt: A family of replicated empirical studies\",\r\n  booktitle       = \"2020 46th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications ({SEAA})\",\r\n  author          = \"Freire, Savio and Passos, Amanda and Mendonca, Manoel and\r\n                     Sant'Anna, Claudio and Spinola, Rodrigo O\",\r\n  publisher       = \"IEEE\",\r\n  month           =  aug,\r\n  year            =  2020,\r\n  conference      = \"2020 46th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications (SEAA)\",\r\n  location        = \"Portoroz, Slovenia\"\r\n}\r\n", "study_summary": null, "study_problem": null, "study_objective": null, "study_results": null, "artifact_name": ["SonarQube", "PMD", "Enterprise Architect", "EMF Refactor"], "artifact_description": null, "artifact_link": ["https://sparxsystems.com/products/ea/", "https://www.sonarsource.com/", "https://pmd.github.io/", "https://www.eclipse.org/emf-refactor/"], "artifact_sdlc": ["nan"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": null, "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "268", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": null, "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuf-GTPuZi1fwNx5CdKbAZG0xRl15xuhGf1xxVcb51Yq7sYJkdmWgu_BFcNWVH6m-b0"}, "273": {"selection_timestamp": "8/8/2022 16:05:50", "study_title": "Automating Detection of Occurrences of PostgreSQL Database Design Problems", "study_authors": "Erki Eessaar", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": " International Baltic Conference on Databases and Information Systems", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1007/978-3-030-57672-1_14", "study_bibtex": "@INCOLLECTION{Eessaar2020-fd,\r\n  title     = \"Automating detection of occurrences of {PostgreSQL} database\r\n               design problems\",\r\n  booktitle = \"Communications in Computer and Information Science\",\r\n  author    = \"Eessaar, Erki\",\r\n  publisher = \"Springer International Publishing\",\r\n  pages     = \"176--189\",\r\n  series    = \"Communications in computer and information science\",\r\n  year      =  2020,\r\n  address   = \"Cham\"\r\n}", "study_summary": null, "study_problem": "Many database design smells manifest\r\nthe same problems as code smells. It could also be that a database schema makes\r\nincorrect statements about the domain of the database or lacks necessary elements,\r\ni.e., is incomplete. Thus, database schemas can have numerous problems and\r\nfinding these is a prerequisite of improving the schemas.", "study_objective": "The paper introduces\r\na catalog of open-source SQL queries that have been designed for finding the\r\noccurrences of design problems in PostgreSQL databases (https://github.com/erki77/database-design-queries). Most of the queries help us to detect the occurrences\r\nof database design smells.", "study_results": null, "artifact_name": ["DBQueries"], "artifact_description": "Each query is classified either as a problem detection query (72% of the queries), a\r\nsoftware measure query (7%), or a general query (21%). Problem detection queries are\r\nmeant for directly finding problems in the database design. Each row that such query\r\nreturns refers to a possible occurrence of a problem in the database. An example of\r\nsuch query is to find base tables that have neither a unique constraint nor the primary\r\nkey.", "artifact_link": ["https://github.com/erki77/database-design-queries"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "SQL Queries", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Focused on database"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "The main advantage of the queries is that these make possible to quickly check database\r\ndesign and receive instant feedback. This is important in any context, not only learning\r\nto design. For instance, execution of a set of more than 300 queries (without generating\r\nfixing statements), which results quite probably point to the problems, and generating\r\nthe report of results takes about 30 s based on a database of approximately 200 tables.", "artifact_limitations": "A weakness of using system-catalog based queries about database design is that one\r\ncannot get feedback about the database design while modeling the database.\r\nThe queries have been designed for and have been tested against the latest version\r\nof the DBMS and some of these do not work in some earlier system versions.", "artifact_gaps": "Future work includes identifying additional design problems, writing queries based\r\non these, refactoring the existing queries, and using the queries to evaluate larger\r\ndatabases. A line of work is to translate the queries for some other DBMS. Because\r\nNoSQL DBMSs increasingly make it possible to specify explicit schema-on-write in\r\ndatabases it is relevant to research the potential design problems in these schemas.", "artifact_other_comments": null, "study_code": "273", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify design smells"], "artifact_input": "Databases", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufjiS8o5ArbGgt4ktfSOCM6K452aEr1XgH-Bs98FRCn2tpCO-v6VP9Lh6iBHSrdmg0"}, "294": {"selection_timestamp": "7/21/2022 19:40:53", "study_title": "Piranha: Reducing Feature Flag Debt at Uber", "study_authors": "Murali Krishna Ramanathan\r\nLazaro Clapp, Rajkishore Barik\r\nManu Sridharan", "study_author_type": "Both", "study_year": 2020.0, "study_venue": "International Conference on Software Engineering: Software Engineering in Practice", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3377813.3381350", "study_bibtex": "@INPROCEEDINGS{Ramanathan2020-xh,\r\n  title      = \"Piranha\",\r\n  booktitle  = \"Proceedings of the {ACM/IEEE} 42nd International Conference on\r\n                Software Engineering: Software Engineering in Practice\",\r\n  author     = \"Ramanathan, Murali Krishna and Clapp, Lazaro and Barik,\r\n                Rajkishore and Sridharan, Manu\",\r\n  publisher  = \"ACM\",\r\n  month      =  jun,\r\n  year       =  2020,\r\n  address    = \"New York, NY, USA\",\r\n  conference = \"ICSE '20: 42nd International Conference on Software Engineering\",\r\n  location   = \"Seoul South Korea\"\r\n}", "study_summary": null, "study_problem": "Feature flags are commonly used in mobile app development and\r\ncan introduce technical debt related to deleting their usage from\r\nthe codebase. This can adversely affect the overall reliability of\r\nthe apps and increase their maintenance complexity. Reducing this\r\ndebt without imposing additional overheads on the developers\r\nnecessitates the design of novel tools and automated workflows.", "study_objective": "In this paper, we describe the design and implementation of\r\nPiranha, an automated code refactoring tool which is used to\r\nautomatically generate differential revisions (a.k.a diffs) to delete\r\ncode corresponding to stale feature flags.", "study_results": null, "artifact_name": ["Piranha"], "artifact_description": "Piranha is a tool to automatically refactor code related to stale flags. At a higher level, the input to the tool is the name of the flag and the expected behavior, after specifying a list of APIs related to flags in a properties file. Piranha will use these inputs to automatically refactor the code according to the expected behavior.", "artifact_link": ["https://github.com/uber/piranha"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Repayment"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Applications", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in relevant environment", "artifact_maturity_level_evidence": null, "artifact_advantages": "To study the manual effort involved after\r\na diff is created by Piranha, we compute the number of lines\r\nremoved by Piranha automatically and the subsequent manual\r\neffort. We observe that the additional\r\nmanual effort required on PiranhaObjC generated diffs is minimal.", "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "294", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Refactoring of feature flags"], "artifact_input": "Flag name\r\nAPIs related to flags", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueGRrXVUTji6UP7uPNeQMB9PDFXW00y44g-LVXmjqAZ8ZfXrhs74fke41vQl3Bxvzg"}, "445": {"selection_timestamp": "7/22/2022 12:21:12", "study_title": "A DQN-based agent for automatic software refactoring", "study_authors": "Hamidreza Ahmadi\r\nMehrdad Ashtiani\r\nMohammad Abdollahi Azgomi\r\nRaana Saheb-Nassagh", "study_author_type": "Academia", "study_year": 2022.0, "study_venue": "Information and Software Technology", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1016/j.infsof.2022.106893", "study_bibtex": "@article{Ahmadi2022,\r\ntitle = {A DQN-based agent for automatic software refactoring},\r\njournal = {Information and Software Technology},\r\nvolume = {147},\r\npages = {106893},\r\nyear = {2022},\r\nissn = {0950-5849},\r\ndoi = {https://doi.org/10.1016/j.infsof.2022.106893},\r\nurl = {https://www.sciencedirect.com/science/article/pii/S0950584922000556},\r\nauthor = {Hamidreza Ahmadi and Mehrdad Ashtiani and Mohammad Abdollahi Azgomi and Raana Saheb-Nassagh},\r\nkeywords = {Software refactoring, Design patterns, Technical debt, Software metrics, Reinforcement learning}}", "study_summary": "The study presents a new approach to automatic refactoring software systems. To this, authors improved a search-based approach adding an intelligent which learns from older refactoring action. With this, authors intend to reduce uncertainty and time-consumption of SBSE-based approaches.", "study_problem": "Refactoring software projects usually comes at a high cost. The automatic software refactoring methods that recently has received a lot of attention is based on search-based software engineering (SBSE) methods. Although because of comprehensiveness and versatility SBSE is considered an appropriate method for automatic refactoring, it has its downsides, the most important of which are the uncertainty of the results and the exponential execution time.", "study_objective": "In this research, a solution is proposed inspired by search-based refactoring while taking advantage of exploitation in reinforcement learning techniques. In the proposed approach, the problem of uncertainty is solved by targeting the selection of refactoring actions used in the search-based approach. Also, due to the reduction of the dependency between the choice of the appropriate refactoring and its execution time, the time problem in large software refactoring has been greatly improved.", "study_results": "The proposed approach managed to increase the accuracy to more than twice of the SBSE refactoring approaches, while reducing the execution time of refactoring by more than 98%. The results of the tests show that with increasing the volume and size of the software, the performance of the proposed approach also improves compared to the methods based on SBSE, both in terms of reducing technical debt and speeding up the refactoring process.", "artifact_name": ["A-CMA", "A-CMA DQN"], "artifact_description": "The tool is able to automatically refactor Java code to repay technical debt. For this, it applies a set of metrics to the code to identify the violations of the code (i.e., identify the TD) and uses a intelligent agent to select the most suitable refactoring action (i.e., repay the TD)", "artifact_link": ["https://hrahmadi71.github.io/a-cma/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Repayment", "Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Increasing the number of refactoring actions: There are plenty of\r\nrefactoring actions that can be used on different software. Having a\r\ntool that covers a high variety of refactoring actions may be used\r\nwidely in different software systems.\r\n\r\nTesting a different reward function: In the proposed model, a simple\r\nreward function was used to have a better comparison with the\r\nrelated work. In future work, the reward function can be changed.\r\nFor example, the amount of reward can be provided by the software\r\ndevelopers themselves. There is also a possibility to have a dynamic\r\nreward function, which changes according to the number of code\r\nsmells or refactored modules.", "artifact_other_comments": null, "study_code": "445", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify Violations", "Proceeds Refactoring"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucblIM4YpFvv7NXl4NZR_t3nrd5k1ObFEE2gvET2d_Sq5EzuDw4rfdRb7SFj-8mrYg"}, "444": {"selection_timestamp": "7/22/2022 12:27:54", "study_title": "DebtFree: minimizing labeling cost in self-admitted technical debt identification using semi-supervised learning", "study_authors": "Huy Tu\r\nTim Menzies", "study_author_type": "Academia", "study_year": 2022.0, "study_venue": "Empirical Software Engineering", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1007/s10664-022-10121-w", "study_bibtex": "@article{Tu2022,\r\n  author    = {Huy Tu and\r\n               Tim Menzies},\r\n  title     = {DebtFree: Minimizing Labeling Cost in Self-Admitted Technical Debt\r\n               Identification using Semi-Supervised Learning},\r\n  journal   = {CoRR},\r\n  volume    = {abs/2201.10592},\r\n  year      = {2022},\r\n  url       = {https://arxiv.org/abs/2201.10592},\r\n  eprinttype = {arXiv},\r\n  eprint    = {2201.10592},\r\n  timestamp = {Tue, 01 Feb 2022 14:59:01 +0100},\r\n  biburl    = {https://dblp.org/rec/journals/corr/abs-2201-10592.bib},\r\n  bibsource = {dblp computer science bibliography, https://dblp.org}\r\n}", "study_summary": "The study proposes a new framework/method to automatically label self-admitted technical debt", "study_problem": "Current active-learning SATD recognition tool involves manual inspection of 24% of the test comments on average to reach 90% of the recall. Among all the test comments, about 5% are SATDs. The human experts are then required to read almost a quintuple of the SATD comments which indicates the inefficiency of the tool. Plus, human experts are still prone to error: 95% of the false-positive labels from previous work were actually true positives.", "study_objective": "To solve the above problems, we propose DebtFree, a two-mode framework based on unsupervised learning for identifying SATDs. In mode1, when the existing training data is unlabeled, DebtFree starts with an unsupervised learner to automatically pseudo-label the programming comments in the training data. In contrast, in mode2 where labels are available with the corresponding training data, Debt Free starts with a pre-processor that identifies the highly prone SATDs from the test dataset.", "study_results": "Specifically, DebtFree can reduce the labeling effort by 99% in mode1 (unlabeled training data), and up to 63% in mode2 (labeled training data) while improving the current active learner\u2019s F1 relatively to almost 100%.", "artifact_name": ["DebtFree"], "artifact_description": "DebtFree is a framework/method that makes possible automatics labeling of self-admitted technical debt (SATD). This framework is composed by three approaches:\r\nPseudo-Labeling: This step is required if the training data does not have any labels to\r\nstart with. First, we frugally pseudo-labels the training data with unsupervised learning,\r\ni.e., identifying hidden patterns in data in order to map unlabeled examples in two\r\ngroups.\r\n\r\nFiltering: identify early and remove instances from the test dataset that are likely to be SATDs.\r\n\r\nActive Learning: We train on some labeled data and then guide the human experts to manually find the comments that are most likely to contain SATDs. It is critical to assess whether the labeled data is insightful enough to guide the human experts for the entire labeling process. If not, we propose Falcon, a new active learning policy to take advantage of such data while still ensuring effectiveness.\r\n\r\nIf there is a lack of labeled data, DebtFree(0) first pseudo-labels the training data\u2019s labels using an unsupervised learning method that is based on \u201ctechnical-debt proneness tendency\u201d. When there are abundant labeled training data, DebtFree(100) applies the same unsupervised learner to find the best tendency on the training data to filter out the highly prone SATDs from the test data. Then, an active learning model iteratively trains and update on both historically labeled data and new human-labeled ones while guiding the human experts to target the most likely SATDs according to the model\u2019s ranking.", "artifact_link": ["https://github. com/HuyTu7/DebtFree"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Framework", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": "- DebtFree is not able to identify the type of TD\r\n- DebtFree is not able to analyze other software artifacts (e.g., issues)", "artifact_gaps": "\u2013 Survey more advanced feature engineering in the active learning strategy for finding the\r\nrest of SATDs. For example, explore N-gram patterns (Wattanakriengkrai et al. 2019)\r\nand word embeddings with deep neural networks (Flisar and Podgorelec 2019).\r\n\u2013 Explore other sampling techniques to help with unbalanced class data (one of the key\r\ncharacteristics for SATDs Ren et al. 2019).\r\n\u2013 Test whether replacing the random forest model in DebtFree with a deep learning\r\nmodel (i.e., CNN Ren et al. 2019) will further improve its performance.\r\n\u2013 Extend the work to label debt in other artifacts where technical debt may be\r\npresented (e.g. issue trackers, documentation) and other software engineering domains\r\n(e.g., security, issue close times, static warning analysis, etc) and compare it with other\r\nstate-of-the-art methods which continue to appear.", "artifact_other_comments": null, "study_code": "444", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of SATD"], "artifact_input": "Code Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudoBd8RiyFNdfmEN8pONTOfG0-aQEnn50bKHntBbR0DXt93rmOpQLIlOKiuok0ojcI"}, "433": {"selection_timestamp": "7/22/2022 14:53:21", "study_title": "Empirical evaluation of an architectural technical debt index in the context of the Apache and ONAP ecosystems", "study_authors": "Roberto Verdecchia\r\nIvano Malavolta\r\nPatricia Lago\r\nIpek Ozkaya", "study_author_type": "Academia", "study_year": 2022.0, "study_venue": "PeerJ Computer Science", "study_venue_type": "Journal", "study_link": "https://doi.org/10.7717/peerj-cs.833", "study_bibtex": "@article{10.7717/peerj-cs.833,\r\n title = {Empirical evaluation of an architectural technical debt index in the context of the Apache and ONAP ecosystems},\r\n author = {Verdecchia, Roberto and Malavolta, Ivano and Lago, Patricia and Ozkaya, Ipek},\r\n year = 2022,\r\n month = feb,\r\n keywords = {Technical debt, Software architecture, Index, Software metrics, Software portfolio analysis, Empirical evaluation},\r\n volume = 8,\r\n pages = {e833},\r\n journal = {PeerJ Computer Science},\r\n issn = {2376-5992},\r\n url = {https://doi.org/10.7717/peerj-cs.833},\r\n doi = {10.7717/peerj-cs.833}\r\n}", "study_summary": "The study presents a new approach for the analysis of architectural TD in software systems. ", "study_problem": null, "study_objective": null, "study_results": null, "artifact_name": ["ATDx", "SonarQube"], "artifact_description": "ATDx is a data-driven approach providing an overview of the architectural technical debt identifiable via source code analysis of a software-intensive system. The approach, based on the analysis of a software portfolio, uses pre-computed architectural rule violations (ART) and granularity levels (GrT) to calculate the severity level of violations via a clustering algorithm. Results are aggregated into different architectural technical debt dimensions (ATDDT).", "artifact_link": ["https://github.com/S2-group/ATDx_replication_package"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": null, "artifact_evidence_level_evidence": null, "artifact_maturity": null, "artifact_maturity_level_evidence": null, "artifact_advantages": "Nevertheless, to date, how to gain an informative and encompassing viewpoint of the potentially highly heterogeneous (Verdecchia et al., 2021) ATD present in a software-intensive system is still an open question.", "artifact_limitations": null, "artifact_gaps": "- The level of granulite rely on automate a task (measure TD), automate the whole process could be a good direction", "artifact_other_comments": "\"Rather, with ATDx we strive for the establishment of a sound, comprehensive, and intuitive architectural view of the ATD detectable via source-code analysis, which helps facilitate conversations, understanding, and awareness of the current state of ATD in software-intensive systems.\r\n\r\nSonarQube and clustering algorithms were applied\"", "study_code": "433", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify architectural smells", "Calculates TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnue5ZDdXq6P22p4mrVZreFAzCxdsB4p9yQggJTxy6PRXkOZMRZlI9rRO1BTMOTMAyyg"}, "448": {"selection_timestamp": "7/22/2022 14:59:22", "study_title": "SATDBailiff-mining and tracking self-admitted technical debt", "study_authors": "Eman Abdullah AlOmar\r\nBen Christians\r\nMihal Busho\r\nAhmed Hamad AlKhalid\r\nAli Ouni\r\nChristian Newman\r\nMohamed Wiem Mkaouer", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "Science of Computer Programming", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1016/j.scico.2021.102693", "study_bibtex": "@article{AlOmar2022,\r\n  doi = {10.1016/j.scico.2021.102693},\r\n  url = {https://doi.org/10.1016/j.scico.2021.102693},\r\n  year = {2022},\r\n  month = jan,\r\n  publisher = {Elsevier {BV}},\r\n  volume = {213},\r\n  pages = {102693},\r\n  author = {Eman Abdullah AlOmar and Ben Christians and Mihal Busho and Ahmed Hamad AlKhalid and Ali Ouni and Christian Newman and Mohamed Wiem Mkaouer},\r\n  title = {{SATDBailiff}-mining and tracking self-admitted technical debt},\r\n  journal = {Science of Computer Programming}\r\n}", "study_summary": "The study proposes a new tool to identify Self-Admmited TD. SATDBailiff is given as input links to open source projects, and its output is a list of all identified SATDs, and for each detected SATD, SATDBailiff reports all its associated changes, including any updates to its text, all the way to reporting its removal.", "study_problem": "However, empirical studies, analyzing the survivability and removal of SATD comments, are challenged by potential code changes or SATD comment updates that may interfere with properly tracking their appearance, existence, and removal.", "study_objective": "In this paper, we propose SATDBailiff, a tool that uses an existing state-of-the-art SATD detection tool, to identify SATD in method comments, then properly track their lifespan.", "study_results": "Results show that SATDBailiff is efficient by averaging an accuracy score of 0.97 when tracking SATD instances from their appearance in the project until their disappearance.", "artifact_name": ["SATDBailiff"], "artifact_description": "SATDBailiff is given as input links to open source projects, and its output is a list of all identified SATDs, and for each detected SATD, SATDBailiff reports all its associated changes, including any updates to its text, all the way to reporting its removal. The goal of SATDBailiff is to aid researchers and practitioners in better tracking SATDs instances, and providing them with a reliable tool that can be easily extended.", "artifact_link": ["https://github.com/smilevo/SATDBailiff"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "\"- It implements state-of-the-arte tool for identify SATD\r\n- It is open-source\r\n- It is flexible in terms of adding new detection tools\"", "artifact_limitations": "\"- It does not explore different types of TD\r\n- It is not explored how it can be use to automatically track the SATD\r\n- Non-English comments can not be used to identify SATD\"", "artifact_gaps": "- Implement non-English support", "artifact_other_comments": null, "study_code": "448", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of SATD"], "artifact_input": "Code Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufZ8fYa5YgqlrwFe3ijwI0Ntce5vNJqsspL-uTcIOQxKmEXJwYGasAXOlEBxCfdmLU"}, "409": {"selection_timestamp": "7/22/2022 15:10:27", "study_title": "An empirical study on the co-occurrence between refactoring actions and Self-Admitted Technical Debt removal", "study_authors": "Martina Iammarino\r\nFiorella Zampetti\r\nLerina Aversano\r\nMassimiliano Di Penta", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "The Journal of Systems and Software", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1016/j.jss.2021.110976", "study_bibtex": "@article{Iammarino2021,\r\n  doi = {10.1016/j.jss.2021.110976},\r\n  url = {https://doi.org/10.1016/j.jss.2021.110976},\r\n  year = {2021},\r\n  month = aug,\r\n  publisher = {Elsevier {BV}},\r\n  volume = {178},\r\n  pages = {110976},\r\n  author = {Martina Iammarino and Fiorella Zampetti and Lerina Aversano and Massimiliano Di Penta},\r\n  title = {An empirical study on the co-occurrence between refactoring actions and Self-Admitted Technical Debt removal},\r\n  journal = {Journal of Systems and Software}\r\n}", "study_summary": "The study presents an empirical study concerning the relationship between SATD and refactoring activity. To do that, authors have analyzed commits of four open source projects in Java. They studied how SATD co-occur with refactoring process.", "study_problem": "Previous research has studied SATD from different perspectives, including its distribution, impact on software quality, and removal. In this paper, we investigate the relationship between refactoring and SATD removal.", "study_objective": "By leveraging a dataset of SATD and their removals in four open-source projects and by using an automated refactoring detection tool, we study the co-occurrence of refactoring and SATD removals.", "study_results": "removals. Results of the study indicate that refactoring is more likely to co-occur with SATD removals than with other commits, however, in most cases, they belong to different quality improvement activities performed at the same time. ", "artifact_name": ["RMiner"], "artifact_description": "RefactoringMiner is a library/API written in Java that can detect refactorings applied in the history of a Java project.", "artifact_link": ["https://github.com/tsantalis/RefactoringMiner"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Library", "artifact_type_evidence": null, "artifact_td_activities": ["Repayment", "Monitoring"], "artifact_td_activities_evidence": null, "artifact_td_type": ["SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "- It can automatically detect refactoring activity thorough comment analysis\r\n- It extend the possibility of track TD along the project evolution\r\n- It also supports other languages (i.e., Kotlin and Python)\"", "artifact_limitations": "- Although it was used in 5 studies concerning TD, it is not focused on it", "artifact_gaps": "- A natural future work is understanding how the tool can be applied to track SATD\r\n- To study how it is possible to use this tool to monitor TD\r\n- Integrate de tool as a plugin in IDE or a process inside CI operation\r\n- Authors also provided some future works as follows:\r\nIn particular, we aim to perform an in-depth quantitative and qualitative analysis of commits aimed at performing general quality improvement activities (e.g., those in which we  observed a co-occurrence of refactoring activities and SATD removals), with the aim of determining (i) when they are performed, e.g., together with feature additions or in periods in which the project evolution is fairly stable, and (ii) what other quality characteristics are addressed, including metric profiles, code smells, and static analysis warnings.", "artifact_other_comments": null, "study_code": "409", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of refactorings"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnue8ooRm4uu1GqTEj9pqG5eoHn8JG5SsmsXeIKpg82VKwvqQ4i6nI3r53wzGl0c2WRM"}, "422": {"selection_timestamp": "7/22/2022 15:30:35", "study_title": "Detection of Design Smells Using Adaptive Neuro-Fuzzy Approaches", "study_authors": "Amjad AbuHassan\r\nMohammad Alshayeb\r\nLahouari Ghouti", "study_author_type": "Academia", "study_year": 2022.0, "study_venue": "International Journal of Fuzzy Systems", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1007/s40815-022-01248-5", "study_bibtex": "@ARTICLE{AbuHassan2022-ds,\r\n  title     = \"Detection of design smells using adaptive neuro-fuzzy approaches\",\r\n  author    = \"AbuHassan, Amjad and Alshayeb, Mohammad and Ghouti, Lahouari\",\r\n  journal   = \"Int. J. Fuzzy Syst.\",\r\n  publisher = \"Springer Science and Business Media LLC\",\r\n  month     =  feb,\r\n  year      =  2022,\r\n  language  = \"en\"\r\n}\r\n", "study_summary": null, "study_problem": "Although these smells are not directly connected to design\r\nand coding bugs, they are high indicators of technical debt\r\n\r\nthat may arise as bugs in future software releases. There-\r\nfore, refactoring plays a significant role in the overall\r\n\r\nsoftware evolution process.", "study_objective": "To fix the underlying code and\r\ndesign smells, they must be first detected and classified. As\r\n\r\ncode smells have been the focus of research in the litera-\r\nture, this paper focuses on detecting design smells. A novel\r\n\r\ndesign smell detection scheme is proposed using adaptive\r\nneuro-fuzzy approaches.", "study_results": null, "artifact_name": ["Together", "Designite"], "artifact_description": "We used the Together tool to extract the metrics.", "artifact_link": ["We used Designite [49, 50], a de-facto tool in design quality eval-", "uation, to detect 17 different model smells."], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "extended to be used to detect new smells with good per-\r\nformance results as our experiment results show high\r\n\r\nperformance for different projects and smells. Future work\r\ncan consider different variations of ANFIS as that may\r\nachieve better results. Furthermore, we plan to investigate a\r\nlarger set of software metrics and check their effect on the\r\nresults. Moreover, we will consider more software smells.", "artifact_other_comments": null, "study_code": "422", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate code Metrics", "Identification of model smells"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnud9qGmF7CvRvV3LWMni9RC0LQI5JENFy7QgO8WIl-JycFXsd6db7RCrWbzU4ZAx8tE"}, "423": {"selection_timestamp": "7/22/2022 15:41:30", "study_title": "Crowdsmelling: A preliminary study on using collective knowledge in code smells detection", "study_authors": "Jose Pereira dos Reis\r\nFernando Brito e Abreu\r\nGlauco de Figueiredo Carneiro", "study_author_type": "Academia", "study_year": 2022.0, "study_venue": "Empirical Software Engineering", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1007/s10664-021-10110-5", "study_bibtex": "@ARTICLE{Reis2022-em,\r\n  title     = \"Crowdsmelling: A preliminary study on using collective knowledge\r\n               in code smells detection\",\r\n  author    = \"Reis, Jos{\\'e} Pereira dos and Abreu, Fernando Brito e and\r\n               Carneiro, Glauco de Figueiredo\",\r\n  journal   = \"Empir. Softw. Eng.\",\r\n  publisher = \"Springer Science and Business Media LLC\",\r\n  volume    =  27,\r\n  number    =  3,\r\n  month     =  may,\r\n  year      =  2022,\r\n  language  = \"en\"\r\n}", "study_summary": null, "study_problem": "Code smells are seen as major source of technical debt and, as such, should be detected and\r\nremoved. However, researchers argue that the subjectiveness of the code smells detection\r\nprocess is a major hindrance to mitigate the problem of smells-infected code.", "study_objective": "This paper\r\npresents the results of a validation experiment for the Crowdsmelling approach proposed\r\nearlier.", "study_results": null, "artifact_name": ["JDeodorant"], "artifact_description": "They used JDeodorant1 as an\r\nauxiliary tool in the detection. The use of tools to help detect code smells in the process\r\nof creating oracles is usual.\r\n\r\nWe chose to\r\nuse JDeodorant because it detects refactoring opportunities for the 3 code smells we used,\r\nbecause it is one of the best known and used tools, as we can see in the paper by Tsantalis\r\net al. (2018).", "artifact_link": ["https://users.encs.concordia.ca/~nikolaos/jdeodorant/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Plugin", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "We are currently developing a plugin for the Eclipse IDE, which extracts the code\r\n\r\nmetrics, detects the code smells, identifies the code smells in the code, receives the program-\r\nmer\u2019s opinion regarding the detection of the code smell (i.e., if the programmer agrees or not\r\n\r\nwith the code smell and stores all this information in a database). This plugin is expected to\r\nsimplify the use of the Crowdsmelling approach, making it simple for programmers to use\r\nwhen developing their Java projects.", "artifact_other_comments": null, "study_code": "423", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of code smells"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudPHqoR_Mw86ygPXA924Y5Hbc2UW43GHcPDIj825jp2qqDKqJw1Su-5o53zP8klFVY"}, "429": {"selection_timestamp": "7/22/2022 15:41:30", "study_title": "Technical debt as an indicator of software security risk: a machine learning approach for software development enterprises", "study_authors": "Miltiadis Siavvas\r\nDimitrios Tsoukalas\r\nMarija Jankovic\r\nDionysios Kehagias\r\nDimitrios Tzovaras", "study_author_type": "Academia", "study_year": 2022.0, "study_venue": "ENTERPRISE INFORMATION SYSTEMS", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1080/17517575.2020.1824017", "study_bibtex": "@ARTICLE{Siavvas2022-wk,\r\n  title     = \"Technical debt as an indicator of software security risk: a\r\n               machine learning approach for software development enterprises\",\r\n  author    = \"Siavvas, Miltiadis and Tsoukalas, Dimitrios and Jankovic, Marija\r\n               and Kehagias, Dionysios and Tzovaras, Dimitrios\",\r\n  journal   = \"Enterp. Inf. Syst.\",\r\n  publisher = \"Informa UK Limited\",\r\n  volume    =  16,\r\n  number    =  5,\r\n  pages     = \"1--43\",\r\n  month     =  may,\r\n  year      =  2022,\r\n  language  = \"en\"\r\n}\r\n", "study_summary": null, "study_problem": "Although sev-\r\neral factors have been studied for their ability to indicate software\r\n\r\nsecurity risk, very limited attention has been given to technical debt\r\n(TD), despite its potential relevance to software security.", "study_objective": "To this\r\nend, in the present study, we investigate the ability of common TD\r\nindicators to indicate security risks in software products, both at\r\nproject-level and at class-level of granularity.", "study_results": "Our findings suggest\r\nthat TD indicators may potentially act as security indicators as well.", "artifact_name": ["SonarQube", "FindBugs", "PMD"], "artifact_description": "In fact, SonarQube has been used for calculating the SAVD of the selected 210 software applications (see Section). To detect potential vulnerabilities, SonarQube uses various popular analysers (such as FindBugs and PMD) under the\r\nhood and aggregates their reports,", "artifact_link": ["https://www.sonarqube.org/", "http://findbugs.sourceforge.net/", "https://pmd.github.io/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "In addition, in the present study, the SAVD metric was used as a measure of software security risk and the SonarQube static analysis platform was used for its quantification.\r\nIn the future, we are planning to redo the present analysis using other open-\r\nsource or commercial static code analysers for quantifying SAVD, while we are also\r\nplanning to consider other software security risk indicators like the Attack Surface\r\n(Howard 2007; Manadhata and Wing 2011). Finally, if the results of the present study are generalised, we are planning to implement our models in the form of individual tools (or as part of common IDEs or software quality platforms), which will facilitate decision making during the overall SDLC, by helping developers and project managers identify and mitigate security risks early enough in the development process.", "artifact_other_comments": null, "study_code": "429", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate code metrics", "Static code analysis"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucXS76qKn777ltmq0k33Arbud55Oaf1Ep0QIcqiNtK_ydMR_2Il5GPCA4C7uYpkKm4"}, "212": {"selection_timestamp": "7/22/2022 16:51:02", "study_title": "Identification of Self-Admitted Technical Debt\r\nUsing Enhanced Feature Selection Based\r\non Word Embedding", "study_authors": "JERNEJ FLISAR\r\nVILI PODGORELEC", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "IEEE Access", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1109/ACCESS.2019.2933318", "study_bibtex": "@ARTICLE{Flisar2019-go,\r\n  title     = \"Identification of self-admitted technical debt using enhanced\r\n               feature selection based on word embedding\",\r\n  author    = \"Flisar, Jernej and Podgorelec, Vili\",\r\n  journal   = \"IEEE Access\",\r\n  publisher = \"Institute of Electrical and Electronics Engineers (IEEE)\",\r\n  volume    =  7,\r\n  pages     = \"106475--106494\",\r\n  year      =  2019\r\n}\r\n", "study_summary": null, "study_problem": "Self-admitted technical debt (SATD) is annotated in source code comments by developers and has been recognized as a great source of discovering flawed software. To reduce manual effort, some recent studies have focused on automated detection of SATD using text classification methods. ", "study_objective": "We developed a new SATD identification method, which takes advantage of a large corpus of unlabeled code comments, extracted from open source projects, to train a word embedding model. ", "study_results": null, "artifact_name": ["Scikit-learn", "word2vec", "comment_parser"], "artifact_description": null, "artifact_link": ["https://scikit-learn.org/stable/", "https://www.tensorflow.org/tutorials/text/word2vec", "https://pypi.python.org/pypi/comment parser"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "The classification process for identification of SATD com-\r\nments took about 13 minutes,13 which is a reasonable time,\r\n\r\nconsidering the number of analyzed projects, since the aver-\r\nage time was around 3 seconds per project.", "artifact_limitations": null, "artifact_gaps": "In the future, we plan to perform more analyses on how to\r\n\r\noptimize all the parameters for improving the word embed-\r\nding model, so that the search for most similar features will be\r\n\r\neven more accurate.", "artifact_other_comments": null, "study_code": "212", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify SATD"], "artifact_input": "Code Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufxNH8OwUuKJ-ZcFoAby2E7Lx8_-s8JBtaeB9l3Zr9gJTIYqYoOCeHMCEtThw8ZYvE"}, "216": {"selection_timestamp": "7/22/2022 17:20:37", "study_title": "Is Self-Admitted Technical Debt a Good Indicator of Architectural Divergences?", "study_authors": "Giancarlo Sierra\r\nAhmad Tahmid\r\nEmad Shihab\r\nNikolaos Tsantalis", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "International Conference on Software Analysis, Evolution and Reengineering", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1109/SANER.2019.8667999", "study_bibtex": "@INPROCEEDINGS{Sierra2019-kq,\r\n  title           = \"Is self-admitted technical debt a good indicator of\r\n                     architectural divergences?\",\r\n  booktitle       = \"2019 {IEEE} 26th International Conference on Software\r\n                     Analysis, Evolution and Reengineering ({SANER})\",\r\n  author          = \"Sierra, Giancarlo and Tahmid, Ahmad and Shihab, Emad and\r\n                     Tsantalis, Nikolaos\",\r\n  publisher       = \"IEEE\",\r\n  month           =  feb,\r\n  year            =  2019,\r\n  copyright       = \"https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html\",\r\n  conference      = \"2019 IEEE 26th International Conference on Software\r\n                     Analysis, Evolution and Reengineering (SANER)\",\r\n  location        = \"Hangzhou, China\"\r\n}", "study_summary": null, "study_problem": "However, it is not known if addressing information left by developers in the form source code comments can give insight about the design flaws in a system and have the potential to provide fixes for bad architectural implementations.", "study_objective": "This paper investigates the possibility of using SATD comments to resolve architectural divergences. We leverage a data set of previously classified SATD comments to trace them\r\nto the architectural divergences of a large open source system, namely ArgoUML.", "study_results": null, "artifact_name": ["Understand"], "artifact_description": "We used the IDE to create a UDB file for\r\nthe project\u2019s source code; this file contains all the entities,\r\nand more importantly, the file dependencies of the project.", "artifact_link": ["https://scitools.com/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "Our preliminary results show that\r\nmerely 4 out of 29 divergences (14%) can be directly traced\r\nto SATD, and that looking at SATD comments can provide\r\nenough information to fix them. To validate this, we manually\r\nimplemented the changes as suggested by debt comments in\r\neach of the 4 traced divergences and confirmed that address-\r\ning the comments directly leads to resolve the divergences.", "artifact_limitations": "Although SATD can be used as an indicator for architectural\r\ndivergences, it requires considerable time and effort, and will\r\nnot result in a significant architectural improvement.", "artifact_gaps": "To generalize our findings, we plan on replicating this\r\nstudy on a broader scale. Looking at SATD comments that\r\ncan be traced to architectural divergences resulted effective\r\nin resolving them,", "artifact_other_comments": null, "study_code": "216", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Static Code Analysis"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucjg2WFMcPYSTlYA2inQh4YSnOp5gVRKZiLnCKWnZAo7zz9qnHq0v6d49eVZcLpuME"}, "241": {"selection_timestamp": "7/25/2022 16:08:26", "study_title": "Understanding automated and human-based technical debt identification approaches-a two-phase study", "study_authors": "Rodrigo O. Sp\u00ednola\r\nNico Zazworka\r\nAntonio Vetro\r\nForrest Shull\r\nCarolyn Seaman", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "Journal of the Brazilian Computer Society", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1186/s13173-019-0087-5", "study_bibtex": "@article{Sp_nola_2019,\r\n\tdoi = {10.1186/s13173-019-0087-5},\r\n\turl = {https://doi.org/10.1186%2Fs13173-019-0087-5},\r\n\tyear = 2019,\r\n\tmonth = {jun},\r\n\tpublisher = {Springer Science and Business Media {LLC}},\r\n\tvolume = {25},\r\n\tnumber = {1},\r\n\tauthor = {Rodrigo O. Sp{\\'{\\i}}nola and Nico Zazworka and Antonio Vetro and Forrest Shull and Carolyn Seaman},\r\n\ttitle = {Understanding automated and human-based technical debt identification approaches-a two-phase study},\r\n\tjournal = {Journal of the Brazilian Computer Society}\r\n}", "study_summary": null, "study_problem": "However, there is a lack of evidence on how different TD identification tools could\r\nbe complementary and, also, how human-based identification compares with them.", "study_objective": "To understand how to effectively elicit TD from humans, to investigate several types of tools for TD identification, and to understand the developers\u2019 point of view about TD indicators and items reported by tools.", "study_results": "Aggregation seems to be an appropriate way to combine TD reported by developers. The tools used\r\ncannot help in identifying many important TD types, so involving humans is necessary.", "artifact_name": ["CodeVizard", "FindBugs"], "artifact_description": "As well as their ability to find common smells and\r\nissues. They were, at the time, the best tools available\r\nfor our purposes. The resulting data described, for each\r\nfile (i.e., class) in the code base, how many of each type\r\nof code smells were identified and how many of each\r\ntype of ASA issues were present. Each FindBugs issue\r\nhas a category (e.g., Performance, Correctness), and a\r\npriority from 1 (highest) to 3 (lowest). We also selected\r\nand computed for each file the following structural\r\n\r\nmetrics: Lines of Code, McCabe\u2019s Cyclomatic Complex-\r\nity, Density of Comments, and Sum of Maximum Nest-\r\ning of all Methods in a Class. Lines of Code and\r\n\r\nMcCabe\u2019s Cyclomatic Complexity are widely used in\r\nthe literature on defect and maintainability prediction\r\n\r\n(e.g., [31, 35]).", "artifact_link": ["http://www.cs.umd.edu/~basili/hpcs/index.php_id=21", "http://findbugs.sourceforge.net/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Defect TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Validation in relevant environment", "artifact_maturity_level_evidence": null, "artifact_advantages": "In addition,\r\n\r\nthree different automated approaches\u2014code smells,\r\nASA issues, and traditional code metrics\u2014did well in\r\npointing to source code files with defect debt and also\r\ncould point to some instances of design debt.", "artifact_limitations": null, "artifact_gaps": "How much of the potential TD reported by\r\ntools, but not reported by developers, is \u201creal\u201d\r\nTD? That is, is there a value in using tools to\r\nidentify TD that developers are not aware of?\r\n How can manual TD identification be better\r\nintegrated into the development process, in\r\norder to make it more efficient and feasible?\r\n Is developer-identified or tool-identified TD\r\nmore likely to lead to future maintenance issues\r\n(i.e., which is more likely to be \u201creal\u201d TD)?\r\n How can TD principal and interest be better\r\nand more objectively quantified in order to\r\nfacilitate decisions and prioritization of debt\r\nitems, in the face of potentially conflicting\r\npriorities among stakeholders?", "artifact_other_comments": null, "study_code": "241", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of Code Smells", "Calculation of Code Metrics"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/u/2/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/formResponse"}, "245": {"selection_timestamp": "7/25/2022 16:22:23", "study_title": "Neural Network-based Detection of Self-Admitted Technical Debt: From Performance to Explainability", "study_authors": "XIAOXUE REN\r\nZHENCHANG XING\r\nXIN XIA\r\nDAVID LO\r\nXINYU WANG\r\nJOHN GRUNDY", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "Transactions on Software Engineering and Methodology", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1145/3324916", "study_bibtex": "@article{Ren_2019,\r\n\tdoi = {10.1145/3324916},\r\n\turl = {https://doi.org/10.1145%2F3324916},\r\n\tyear = 2019,\r\n\tmonth = {jul},\r\n\tpublisher = {Association for Computing Machinery ({ACM})},\r\n\tvolume = {28},\r\n\tnumber = {3},\r\n\tpages = {1--45},\r\n\tauthor = {Xiaoxue Ren and Zhenchang Xing and Xin Xia and David Lo and Xinyu Wang and John Grundy},\r\n\ttitle = {Neural Network-based Detection of Self-Admitted Technical Debt},\r\n\tjournal = {{ACM} Transactions on Software Engineering and Methodology}\r\n}", "study_summary": null, "study_problem": "However, several characteristics of SATD features in code comments, such as vocabulary diversity, project uniqueness, length, and semantic variations, pose a big challenge to the accuracy of pattern or traditional text-mining-based SATD detection, especially for cross-project deployment.", "study_objective": "To improve the accuracy of SATD prediction, especially for cross-project prediction, we propose a Convolutional Neural Network\u2013 (CNN) based approach for classifying code comments as SATD or non-SATD.", "study_results": null, "artifact_name": ["Convulational Neural Networks with Tensorflow"], "artifact_description": null, "artifact_link": ["https://github.com/dennybritz/cnn-text-classification-tf", "https://www.tensorflow.org/tutorials/text/word2vec"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "Our evaluation shows that our CNN-based approach can effectively learn to extract variable-\r\nlength text features in code comments for SATD classification. Relying on this feature learning capability, our approach can extract intuitive SATD features and patterns that align well with human-identified features and patterns.", "artifact_limitations": "However, the SATD patterns that our approach automatically extracts from the comment data are more comprehensive and with a more diverse vocabulary, which is hard to summarize just by human observation.", "artifact_gaps": "In the future, we will enhance our classification model with more comment data. With a richer dataset, we expect that more SATD features and patterns will be extracted.", "artifact_other_comments": null, "study_code": "245", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of SATD"], "artifact_input": "Code Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuedv0SsctL03eJG_oWJ9W2DTbHnwwgmbLoM-s138hcggzVj2B39mDLV9nAvBHTDYFs"}, "246": {"selection_timestamp": "7/25/2022 16:42:13", "study_title": "VisminerTD: a tool for automatic identification and interactive monitoring of the evolution of technical debt items", "study_authors": "Thiago S. Mendes\r\nFelipe G. S. Gomes\r\nDavid P. Gon\u00e7alves\r\nManoel G. Mendon\u00e7a\r\nRenato L. Novais\r\nRodrigo O. Sp\u00ednola", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "Journal of the Brazilian Computer Society", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1186/s13173-018-0083-1", "study_bibtex": "@article{Mendes_2019,\r\n\tdoi = {10.1186/s13173-018-0083-1},\r\n\turl = {https://doi.org/10.1186%2Fs13173-018-0083-1},\r\n\tyear = 2019,\r\n\tmonth = {jan},\r\n\tpublisher = {Springer Science and Business Media {LLC}},\r\n\tvolume = {25},\r\n\tnumber = {1},\r\n\tauthor = {Thiago S. Mendes and Felipe G. S. Gomes and David P. Gon{\\c{c}}alves and Manoel G. Mendon{\\c{c}}a and Renato L. Novais and Rodrigo O. Sp{\\'{\\i}}nola},\r\n\ttitle = {{VisminerTD}: a tool for automatic identification and interactive monitoring of the evolution of technical debt items},\r\n\tjournal = {Journal of the Brazilian Computer Society}\r\n}", "study_summary": null, "study_problem": "It is worthwhile to have automatic mechanisms to monitor it, as TD monitoring requires the analysis of large amounts of complex data. Therefore, the combination of software metrics\r\nand code comment analysis, in the identification, and information visualization techniques, in monitoring, present themselves as a promising strategy to manage TD.", "study_objective": "This work presents VisminerTD, a tool that allows the automatic identification and interactive monitoring of the evolution of TD items by combining software metrics, code comment analysis, and information visualization.", "study_results": null, "artifact_name": ["VisminerTD"], "artifact_description": "VisminerTD is an open-source web tool that has multi-\r\nple visual perspectives and different visual strategies of\r\nanalysis to support development teams in activities of\r\nidentifying and monitoring the evolution of TD items.\r\nVisminerTD runs on top of RepositoryMiner", "artifact_link": ["https://visminer.github.io", "https://github.com/visminer/repositoryminer", "https://github.com/visminer/visminertd-client", "https://github.com/visminer/visminertd-service"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Representation/Documentation", "Monitoring", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Requirements TD", "Architectural TD", "Design TD", "Code TD", "Test TD", "Build TD", "Documentation TD", "Defect TD", "People TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "Although that the\r\nVisminerTD is just in its initial state, we intend to improve\r\nthe VisminerTD adding support for more programming\r\n\r\nlanguages and more features in the future releases, espe-\r\ncially features related to the combination of data from\r\n\r\nTD identification and software repositories, such as, an\r\nadviser for who must to pay a TD based in its commit\r\nhistory.", "artifact_limitations": null, "artifact_gaps": "(i) evolve Vismin-\r\nerTD based on the users\u2019 perception regarding its use; (ii) replicate the second study in other academic/industry\r\nscenarios; (iii) investigate when/how to use the proposed strategy in the context of a software development pro-\r\ncess and what impacts (e.g., in terms of effort) it brings \r\nto the development team; (iv) improve both RepositoryMiner and VisminerTD (e.g., adding more features and\r\nsupport for more programming languages), and (v) evaluate/evolve the accuracy of the RepositoryMiner automatic\r\nTD identification process considering industry projects and their development teams.", "artifact_other_comments": null, "study_code": "246", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of TD", "Monitoring of TD", "Visualization of TD"], "artifact_input": "Source Code\r\nCode Comments", "selection_response_link": "https://docs.google.com/forms/u/2/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/formResponse"}, "248": {"selection_timestamp": "7/25/2022 17:55:14", "study_title": "The Technical Debt Dataset", "study_authors": "Valentina Lenarduzzi\r\nNyyti Saarim\u00e4ki\r\nDavide Taibi", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": " International Conference on Predictive Models and Data Analytics in Software Engineering", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3345629.3345630", "study_bibtex": "@inproceedings{Lenarduzzi_2019,\r\n\tdoi = {10.1145/3345629.3345630},\r\n\turl = {https://doi.org/10.1145%2F3345629.3345630},\r\n\tyear = 2019,\r\n\tmonth = {sep},\r\n\tpublisher = {{ACM}},\r\n\tauthor = {Valentina Lenarduzzi and Nyyti Saarim\u00e4ki and Davide Taibi},\r\n\ttitle = {The Technical Debt Dataset},\r\n\tbooktitle = {Proceedings of the Fifteenth International Conference on Predictive Models and Data Analytics in Software Engineering}\r\n}", "study_summary": null, "study_problem": "Despite this, empirical studies on software projects are expensive because of the time\r\nneeded to analyze the projects. In addition, the results are difficult\r\nto compare as studies commonly consider different projects.", "study_objective": "In this work, we propose the Technical Debt Dataset, a curated set of\r\nproject measurement data from 33 Java projects from the Apache\r\nSoftware Foundation.", "study_results": null, "artifact_name": ["Ptidej", "SonarQube", "RMiner", "BetterCodeHub", "CoverityScan"], "artifact_description": null, "artifact_link": ["https://www.ptidej.net/tools/designpatterns/index_html#1", "https://bettercodehub.com", "https://scan.coverity.com", "https://www.sonarqube.org", "https://github.com/tsantalis/RefactoringMiner"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "248", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate code metrics", "Detect code smells"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudKPTsqedTdgCeQXqZJJtM4VJqcjmE1bk_ShLB7xjLF4pw4Ue2xrZeYXmeUr1db5gY"}, "287": {"selection_timestamp": "7/25/2022 18:03:34", "study_title": "Predicting technical debt from commit contents: reproduction and extension with automated feature selection", "study_authors": "Leevi Rantala\r\nMika Mantyl", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Software Quality Journal", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1007/s11219-020-09520-3", "study_bibtex": "@article{Rantala_2020,\r\n\tdoi = {10.1007/s11219-020-09520-3},\r\n\turl = {https://doi.org/10.1007%2Fs11219-020-09520-3},\r\n\tyear = 2020,\r\n\tmonth = {jul},\r\n\tpublisher = {Springer Science and Business Media {LLC}},\r\n\tvolume = {28},\r\n\tnumber = {4},\r\n\tpages = {1551--1579},\r\n\tauthor = {Leevi Rantala and Mika M\u00e4ntyl\u00e4},\r\n\ttitle = {Predicting technical debt from commit contents: reproduction and extension with automated feature selection},\r\n\tjournal = {Software Quality Journal}\r\n}", "study_summary": null, "study_problem": null, "study_objective": "We reproduce and improve on a prior work by Yan\r\net al. (2018) on detecting commits that introduce self-admitted technical debt. We use\r\nmultiple natural language processing methods: Bag-of-Words, topic modeling, and word\r\nembedding vectors.", "study_results": "As a concrete result, we release a list of the predictor words that correlate pos-\r\nitively with SATD, as well as our used datasets and scripts to enable replication studies and to aid in the creation of future classifiers.", "artifact_name": ["SonarQube", "Machine Learning Model"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "Thirdly, we solve the problem on how to create generalizable results from texts built\r\nfrom multiple sources. The key is to define two thresholds, one for how many times the\r\nword has to appear in a repository to be included in its vocabulary, and second one is to set\r\na limit on how many of the repository vocabularies the word has to be in.", "artifact_limitations": null, "artifact_gaps": "In the future, we will expand our research beyond manually labeled commits by detect-\r\ning SATD inducing commits automatically.", "artifact_other_comments": null, "study_code": "287", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of SATD"], "artifact_input": "Source Code\r\nCode Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnud3-czTw9KFrKbjO1brRpt_MFzBJNMV4JO14_4H-75g_CTHlFu8hHWwH3GoXES_oGY"}, "289": {"selection_timestamp": "7/25/2022 18:17:29", "study_title": "Does migrating a monolithic system to microservices decrease the technical debt?", "study_authors": "Valentina Lenarduzzi\r\nFrancesco Lomio\r\nNyyti Saarim\u00e4ki\r\nDavide Taibi", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "The Journal of Systems and Software", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1016/j.jss.2020.110710", "study_bibtex": "@article{Lenarduzzi_2020,\r\n\tdoi = {10.1016/j.jss.2020.110710},\r\n\turl = {https://doi.org/10.1016%2Fj.jss.2020.110710},\r\n\tyear = 2020,\r\n\tmonth = {nov},\r\n\tpublisher = {Elsevier {BV}},\r\n\tvolume = {169},\r\n\tpages = {110710},\r\n\tauthor = {Valentina Lenarduzzi and Francesco Lomio and Nyyti Saarim\u00e4ki and Davide Taibi},\r\n\ttitle = {Does migrating a monolithic system to microservices decrease the technical debt?},\r\n\tjournal = {Journal of Systems and Software}\r\n}", "study_summary": null, "study_problem": "The migration from a monolithic system to microservices requires a deep refactoring\r\nof the system. Therefore, such a migration usually has a big economic impact and companies tend to postpone several activities during this process, mainly to speed up the migration itself, but also because of the demand for releasing new features.", "study_objective": "We monitored the technical debt of an SME while it migrated from a legacy monolithic\r\nsystem to an ecosystem of microservices. Our goal was to analyze changes in the code technical debt before and after the migration to microservices.", "study_results": null, "artifact_name": ["CAST Software", "Coverity Scan", "SQUORE", "Designite", "SonarQube"], "artifact_description": null, "artifact_link": ["CAST Software https://www.castsoftware.com/", "Coverity Scan https://scan.coverity.com", "SQUORE https://www.squoring.com/en/produits/squore-software-analytics/", "Designite http://designite-tools.com", "SonarQube http://www.sonarqube.org"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Future work will include an investigation of the impact of\r\nother types of TD during the migration to microservices. We\r\n\r\naim to analyze the same projects using tools for detecting ar-\r\nchitectural smells. Moreover, we aim to investigate TD due to\r\n\r\ntemporary architectural decisions.", "artifact_other_comments": null, "study_code": "289", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify code smells", "Calculate TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/u/2/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/formResponse"}, "297": {"selection_timestamp": "7/25/2022 19:15:38", "study_title": "Software Archinaut: A Tool to Understand Architecture, Identify Technical Debt Hotspots and Manage Evolution", "study_authors": "Humberto Cervantes\r\nRick Kazman", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3387906.3388633", "study_bibtex": "@inproceedings{Cervantes_2020,\r\n\tdoi = {10.1145/3387906.3388633},\r\n\turl = {https://doi.org/10.1145%2F3387906.3388633},\r\n\tyear = 2020,\r\n\tmonth = {jun},\r\n\tpublisher = {{ACM}},\r\n\tauthor = {Humberto Cervantes and Rick Kazman},\r\n\ttitle = {Software archinaut},\r\n\tbooktitle = {Proceedings of the 3rd International Conference on Technical Debt}\r\n}", "study_summary": null, "study_problem": null, "study_objective": "In this paper we present Software Archinaut--a tool used to help\r\nidentify technical debt hotspots in an architecture, and manage the\r\nevolution of the architecture once these hotspots are discovered.", "study_results": null, "artifact_name": ["Software Archinaut", "Depends", "Designite", "SCC", "GitLog", "DV8", "RMiner", "SonarQube", "Understand", "Lattix", "Structure 101", "CodeScene"], "artifact_description": "Archinaut is a platform that integrates analyses from different tools.\r\nIt supports three main usage scenarios: 1) understanding the\r\narchitecture, 2) identifying technical debt hotspots, and 3)\r\nmonitoring and controlling the evolution of the architecture. We\r\nillustrate these scenarios by using Apache Kafka as an example.", "artifact_link": ["https://github.com/multilang-depends/depends", "http://www.designite-tools.com/", "https://github.com/boyter/scc", "https://archdia.com/", "https://github.com/tsantalis/RefactoringMiner", "https://scitools.com/", "https://www.lattix.com/", "https://structure101.com/", "https://codescene.io/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "297", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate TD", "Calculate Code Metrics"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/u/2/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/formResponse"}, "301": {"selection_timestamp": "7/25/2022 20:26:07", "study_title": "Long Term-short Memory Neural Networks and Word2vec for Self-admitted Technical Debt Detection", "study_authors": "Rafael Meneses Santos\r\nIsrael Meneses Santos\r\nMethanias Cola\u00e7o Rodrigues J\u00fanior\r\nManoel Gomes de Mendon\u00e7a Neto", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Conference on Enterprise Information Systems", "study_venue_type": "Conference", "study_link": "http://doi.org/10.5220/0009796001570165", "study_bibtex": "@inproceedings{Santos_2020,\r\n\tdoi = {10.5220/0009796001570165},\r\n\turl = {https://doi.org/10.5220%2F0009796001570165},\r\n\tyear = 2020,\r\n\tpublisher = {{SCITEPRESS} - Science and Technology Publications},\r\n\tauthor = {Rafael Santos and Israel Santos and Methanias Rodrigues J{\\'{u}}nior and Manoel Neto},\r\n\ttitle = {Long Term-short Memory Neural Networks and Word2vec for Self-admitted Technical Debt Detection},\r\n\tbooktitle = {Proceedings of the 22nd International Conference on Enterprise Information Systems}\r\n}", "study_summary": null, "study_problem": "Developers often insert comments in which they admit that there is a need to improve that\r\npart of the code later. This is known as Self-Admitted Technical Debt (SATD).", "study_objective": "Evaluate a Long short-term memory (LSTM) neural network model combined with Word2vec for word embedding to identify design and requirement SATDs from comments in source code.", "study_results": null, "artifact_name": ["Word2vec", "Long short-term memory"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Requirements TD", "Design TD", "SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "301", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of SATD"], "artifact_input": "Code Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucRWEoe4TNxElJDpZvtf-F90CvCiUK769sIXgjWGTXoQHSuhoveGQkmyaBNwIfAJ9o"}, "184": {"selection_timestamp": "7/26/2022 13:05:54", "study_title": "Towards an Architectural Debt Index", "study_authors": "Riccardo Roveda\r\nFrancesca Arcelli Fontana\r\nIlaria Pigazzini\r\nMarco Zanoni", "study_author_type": "Both", "study_year": 2018.0, "study_venue": "Euromicro Conference on Software Engineering and Advanced Applications", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SEAA.2018.00073", "study_bibtex": "@INPROCEEDINGS{Roveda2018-dj,\r\n  title           = \"Towards an Architectural Debt Index\",\r\n  booktitle       = \"2018 44th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications ({SEAA})\",\r\n  author          = \"Roveda, Riccardo and Arcelli Fontana, Francesca and\r\n                     Pigazzini, Ilaria and Zanoni, Marco\",\r\n  publisher       = \"IEEE\",\r\n  month           =  aug,\r\n  year            =  2018,\r\n  conference      = \"2018 44th Euromicro Conference on Software Engineering and\r\n                     Advanced Applications (SEAA)\",\r\n  location        = \"Prague\"\r\n}", "study_summary": null, "study_problem": "Different indexes have been proposed to evaluate\r\nsoftware quality and technical debt. Usually these indexes take\r\ninto account different code level issues and several metrics, well\r\nknown software metrics or new ones defined ad hoc for a specific\r\npurpose.", "study_objective": "In this paper we propose and define a new index, more\r\noriented to the evaluation of architectural violations. We describe\r\nin detail the index, called Architectural Debt Index, that we\r\nintegrated in a tool developed for architectural smell detection.", "study_results": null, "artifact_name": ["Arcan", "Sonargraph", "SonarQube", "CAST", "Structure101", "Massey Architecture Explorer", "Lattix", "STAN"], "artifact_description": null, "artifact_link": ["https://www.sonarqube.org", "https://www.castsoftware.com", "https://structure101.com/", "http://xplrarc.massey.ac.nz/", "https://lattix.com/", "https://stan4j.com/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "184", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of Architectural Smells"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudMR3AG9ZS9B5YOfInovuQuibCatdr_7DiEFckQUn5KJnvUvWrqlJUG3gv_5zpRbLw"}, "307": {"selection_timestamp": "7/26/2022 13:14:58", "study_title": "Are SonarQube Rules Inducing Bugs?", "study_authors": "Valentina Lenarduzzi\r\nFrancesco Lomio\r\nHeikki Huttunen\r\nDavide Taibi", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Conference on Software Analysis, Evolution and Reengineering", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SANER48275.2020.9054821", "study_bibtex": "@INPROCEEDINGS{Lenarduzzi2020-dh,\r\n  title           = \"Are {SonarQube} Rules Inducing Bugs?\",\r\n  booktitle       = \"2020 {IEEE} 27th International Conference on Software\r\n                     Analysis, Evolution and Reengineering ({SANER})\",\r\n  author          = \"Lenarduzzi, Valentina and Lomio, Francesco and Huttunen,\r\n                     Heikki and Taibi, Davide\",\r\n  publisher       = \"IEEE\",\r\n  month           =  feb,\r\n  year            =  2020,\r\n  copyright       = \"https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html\",\r\n  conference      = \"2020 IEEE 27th International Conference on Software\r\n                     Analysis, Evolution and Reengineering (SANER)\",\r\n  location        = \"London, ON, Canada\"\r\n}", "study_summary": null, "study_problem": "However, our local companies were not confident in the usefulness of the rules\r\nproposed by SonarQube and contracted us to investigate the\r\nfault-proneness of these rules.", "study_objective": "In this work we aim at understanding which SonarQube rules are\r\nactually fault-prone and to understand which machine learning\r\nmodels can be adopted to accurately identify fault-prone rules.", "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": "\u2022 Analyze the fault-proneness of SonarQube rule violations,\r\nand in particular, understand if rules classified as \u201dbugs\u201d\r\nare more fault-prone than security and maintainability\r\nrules.\r\n\u2022 Analyze the accuracy of the quality model provided by\r\nSonarQube in order to understand the fault-prediction\r\naccuracy of the rules classified as \u201dbugs\u201d.", "artifact_link": ["https://www.sonarqube.org"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "Our results show that 26 violations can be considered fault-\r\nprone from the XGBoost model. However, the analysis of\r\nthe residuals showed that 32 sq-violations were commonly\r\nintroduced in a fault-inducing commit and then removed in the\r\nfault-fixing commit but only two of them are considered fault-\r\nprone from the machine learning algorithms.", "artifact_limitations": "Lesson 1: SonarQube violations are not good predictors\r\nof fault-proneness if considered individually, but can be good\r\npredictors if considered together. Machine learning techniques,\r\nsuch as XGBoost can be used to effectively train a customized\r\nmodel for each company.\r\nLesson 2: SonarQube violations classified as \u201dbugs\u201d do not\r\nseem to be the cause of faults.\r\nLesson 3: SonarQube violation severity is not related to\r\nthe fault-proneness and therefore, developers should carefully\r\nconsider the severity as decision factor for refactoring a\r\nviolation.", "artifact_gaps": "Future works include the replication of this work consid-\r\nering the severity levels of SonarQube rules and their impor-\r\ntance. We are working on the definition of a more accurate\r\n\r\nmodel for predicting TD [30] Moreover, we are planning\r\nto investigate whether classes that SonarQube identify as\r\nproblematic are more fault-prone than those not affected by\r\nany problem.", "artifact_other_comments": null, "study_code": "307", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Code Analysis"], "artifact_input": "Source code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnue9ZOTPgy8G9qj3J-d1mgH9b2sdEzYGMvOoWYK889bZ8Xj6ZYIaehgqj4koHuWreDs"}, "310": {"selection_timestamp": "7/26/2022 13:29:45", "study_title": "On the Relationship between Self-Admitted Technical Debt Removals and Technical Debt Measures", "study_authors": "Lerina Aversano\r\nMartina Iammarino\r\nMimmo Carapella\r\nAndrea Del Vecchio\r\nLaura Nardi", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Algorithms", "study_venue_type": "Journal", "study_link": "http://doi.org/10.3390/a13070168", "study_bibtex": "@ARTICLE{Aversano2020-nx,\r\n  title     = \"On the relationship between self-admitted technical debt\r\n               removals and technical debt measures\",\r\n  author    = \"Aversano, Lerina and Iammarino, Martina and Carapella, Mimmo and\r\n               Vecchio, Andrea Del and Nardi, Laura\",\r\n  journal   = \"Algorithms\",\r\n  publisher = \"MDPI AG\",\r\n  volume    =  13,\r\n  number    =  7,\r\n  pages     = \"168\",\r\n  month     =  jul,\r\n  year      =  2020,\r\n  language  = \"en\"\r\n}\r\n", "study_summary": null, "study_problem": "When developers admit the presence of technical debt\r\nin the source code, through comments or commit messages, it is called self-admitted technical debt\r\n(SATD). This aspect of TD has been the subject of numerous research studies, which have investigated\r\nits distribution, the impact on software quality, and removal.", "study_objective": "Therefore, this work focuses on the\r\nrelationship between SATD and TD values.", "study_results": null, "artifact_name": ["SonarQube", "CK"], "artifact_description": "Instead, the SonarQube tool was used to measure TD values.", "artifact_link": ["https://sonarqube.org/", "https://github.com/mauricioaniche/ck"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD", "SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "Indeed, SATD removals correspond to class removal operations in 59.44% of cases and method removal in 19.49% of cases. Intuitively, this may indicate that developers tend to face technical debt resolution problems by eliminating the classes involved. This is\r\na strong solution from a software design point of view and suggests that it is possible to hypothesize that the methods and functions belonging to the removed classes can be moved and integrated into other classes.", "artifact_limitations": null, "artifact_gaps": "In the future, we envision to carry out a quantitative and qualitative investigation on the effects on quality profiles of software project deriving from the use of subjective measure of technical debt.", "artifact_other_comments": null, "study_code": "310", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculates TD Principal", "Calculate code metrics"], "artifact_input": "Source code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudDWm1SNJLKenwHueaKXTMaA_bga63K-qrGHU0vE9N2HrX108UUSFQjgVLzPSYdVSU"}, "319": {"selection_timestamp": "7/26/2022 13:55:50", "study_title": "Automated Identification of On-hold Self-admitted Technical Debt", "study_authors": "Rungroj Maipradit\r\nBin Lin\r\nCsaba Nagy\r\nGabriele Bavota\r\nMichele Lanza\r\nHideaki Hata\r\nKenichi Matsumoto", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Working Conference on Source Code Analysis and Manipulation", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SCAM51674.2020.00011", "study_bibtex": "@INPROCEEDINGS{Maipradit2020-fh,\r\n  title           = \"Automated identification of on-hold self-admitted\r\n                     technical debt\",\r\n  booktitle       = \"2020 {IEEE} 20th International Working Conference on\r\n                     Source Code Analysis and Manipulation ({SCAM})\",\r\n  author          = \"Maipradit, Rungroj and Lin, Bin and Nagy, Csaba and\r\n                     Bavota, Gabriele and Lanza, Michele and Hata, Hideaki and\r\n                     Matsumoto, Kenichi\",\r\n  publisher       = \"IEEE\",\r\n  month           =  sep,\r\n  year            =  2020,\r\n  copyright       = \"https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html\",\r\n  conference      = \"2020 IEEE 20th International Working Conference on Source\r\n                     Code Analysis and Manipulation (SCAM)\",\r\n  location        = \"Adelaide, Australia\"\r\n}", "study_summary": null, "study_problem": "Self-admitted technical debt (SATD) is a particular form of\r\ntechnical debt: developers consciously perform the hack but also\r\ndocument it in the code by adding comments as a reminder\r\n(or as an admission of guilt).", "study_objective": "We present an approach, based on regular expressions and\r\nmachine learning, which is able to detect issues referenced in code\r\ncomments, and to automatically classify the detected instances\r\nas either \u201cOn-hold\u201d (the issue is referenced to indicate the\r\nneed to wait for its resolution before completing a task), or as\r\n\u201ccross-reference\u201d, (the issue is referenced to document the code,\r\nfor example to explain the rationale behind an implementation\r\nchoice).", "study_results": null, "artifact_name": ["Ngweight", "Auto-SKlearn", "Spacy"], "artifact_description": null, "artifact_link": ["https://spacy.io/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "To identify On-hold\r\n\r\nSATD, we developed a classifier using n-gram and auto-\r\nsklearn, resulting in an average precision of 0.79, an average\r\n\r\nrecall of 0.70, an average F1-score of 0.73, and an average\r\nAUC of 0.97. In short, On-hold SATD can indeed be detected\r\nautomatically in a fairly reliable way.", "artifact_limitations": null, "artifact_gaps": "The next logical step is thus the design and implementation\r\nof the recommender system we described in Section VI and\r\naimed at facilitating the identification, understanding, and\r\nresolution of On-hold SATD instances.", "artifact_other_comments": null, "study_code": "319", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of SATD"], "artifact_input": "Code Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuczD7ZgLYmch23z6Y1Lq2AMA91PdylrQmROUDiqk4TjmDfLuhq6liXzL6-flItw5ZU"}, "323": {"selection_timestamp": "7/26/2022 14:18:01", "study_title": "E-Debitum: Managing Software Energy Debt", "study_authors": "Daniel Maia\r\nMarco Couto\r\nJo\u00e3o Saraiva\r\nRui Pereira", "study_author_type": "Both", "study_year": 2020.0, "study_venue": "International Conference on Automated Software Engineering Workshops", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3417113.3422999", "study_bibtex": "@INPROCEEDINGS{Maia2020-jj,\r\n  title      = \"{E-Debitum}\",\r\n  booktitle  = \"Proceedings of the 35th {IEEE/ACM} International Conference on\r\n                Automated Software Engineering Workshops\",\r\n  author     = \"Maia, Daniel and Couto, Marco and Saraiva, Jo{\\~a}o and\r\n                Pereira, Rui\",\r\n  publisher  = \"ACM\",\r\n  month      =  sep,\r\n  year       =  2020,\r\n  address    = \"New York, NY, USA\",\r\n  conference = \"ASE '20: 35th IEEE/ACM International Conference on Automated\r\n                Software Engineering\",\r\n  location   = \"Virtual Event Australia\"\r\n}", "study_summary": null, "study_problem": "This paper extends previous work on the concept of a new software\r\nenergy metric: Energy Debt.", "study_objective": "This paper presents the implementation a SonarQube tool called\r\nE-Debitum which calculates the energy debt of Android applications\r\nthroughout their versions.", "study_results": null, "artifact_name": ["E-Debitum"], "artifact_description": "The first plugin imple-\r\nments a set of rules corresponding to the aforementioned energy\r\nsmells. As such, it is dubbed as the rules plugin. It is used during\r\nthe analysis process to detect and document any and all energy\r\nsmells present in the code, alongside any other issues actively being\r\nsearched for by the platform.\r\nThe second plugin, dubbed the metrics plugin, is active immedi-\r\nately after the code scan is complete and is responsible for measur-\r\ning the minimum/maximum estimated values of Energy Debt in the\r\nprogram. It tallies up the number of instances of each given code\r\nsmell and, using the estimated joule per minute expenditure they\r\ncause, stores the total debt value in its best/worst case scenarios.", "artifact_link": ["https://github.com/e-debitum/E-Debitum-tool"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Energy Debt"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": "The automatic detection of the presented energy code smells,\r\nand the computation of energy debt and interest, has been achieved\r\n\r\nusing our E-Debitum tool. This tool is usable within the Sonar-\r\nQube framework through two plugins. Using E-Debitum, we were\r\n\r\nable to perform an experimental validation on 3 popular Android\r\napplications across various releases.", "artifact_limitations": null, "artifact_gaps": "We are currently working on extending the smell catalog, which\r\n\r\nwe consider, to be updated with more energy code smells. Addi-\r\ntionally, we are preparing a large scale study on the energy debt of\r\n\r\nhundreds of open-source Android applications.", "artifact_other_comments": null, "study_code": "323", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["identify energy smells", "Calculate the amount of energy debt"], "artifact_input": "Source Code", "selection_response_link": null}, "379": {"selection_timestamp": "7/26/2022 21:58:21", "study_title": "The Technical Debt Density Over Multiple Releases and the Refactoring Story", "study_authors": "Mrwan BenIdris\r\nHany Ammar\r\nDale Dzielski", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "International Journal of Software Engineering and Knowledge Engineering", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1142/S0218194021500017", "study_bibtex": "@article{BenIdris_2021,\r\n\tdoi = {10.1142/s0218194021500017},\r\n\turl = {https://doi.org/10.1142%2Fs0218194021500017},\r\n\tyear = 2021,\r\n\tmonth = {jan},\r\n\tpublisher = {World Scientific Pub Co Pte Lt},\r\n\tvolume = {31},\r\n\tnumber = {01},\r\n\tpages = {99--116},\r\n\tauthor = {Mrwan BenIdris and Hany Ammar and Dale Dzielski},\r\n\ttitle = {The Technical Debt Density Over Multiple Releases and the Refactoring Story},\r\n\tjournal = {International Journal of Software Engineering and Knowledge Engineering}\r\n}", "study_summary": null, "study_problem": "The bad smell is an imperfect solution in the software system that negatively impacts the internal software quality and maintainability. In this paper, we will study  \u0304ve open-source software projects (OSSPs) that have several releases and also estimate the numbers of architecture smells (ASs), design smells (DSs), and code smells (CSs) for every release.", "study_objective": "Designite will be used to detect smells. We describe a case study conducted to explore\r\nthe following: (1) What is the average smells density for architecture, design, and code smells in an OSSP? (2) Does the density of each smell type increase over multiple releases? (3) What percentage of each smell-type density is eliminated by refactoring?", "study_results": null, "artifact_name": ["Designite"], "artifact_description": "Designite was the only tool that is able to discover\r\narchitecture smell (AS), design smell (DS), and code smell (CS). Designite supports\r\nC# language and was able to identify seven common architectures, 17 designs, and\r\n11 code smells; every type of smell is de \u0304ned in Table 1. Designite provides a simple\r\nand interactive implementation of DSM to help analyze the dependencies among the\r\nsource code entities [23]. Around 55 universities from di\u00aeerent countries used\r\nDesignite tool and it has been used in several published papers. This is important\r\nbecause it implies that the Designite tool is trustable to use.", "artifact_link": ["https://www.designite-tools.com/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "This empirical study aimed to analyze ATD, DD, and CD that were created by\r\ndevelopers. More than 25 kinds of smells in  \u0304ve C# open-source projects were\r\ndetected in this study.", "artifact_limitations": null, "artifact_gaps": "As we stated in Finding 3, the architecture smells were the least eliminated type of\r\nsmells because they are di\u00b1cult to deal with and manage. Consequently, in the\r\nfuture, we plan to focus on the tracking of architecture smells over multiple releases\r\nto estimate their impact on the internal structure of the software components. Apart\r\nfrom this, we plan to estimate the overall refactoring e\u00aeort of the architecture smells\r\non software components.", "artifact_other_comments": "Important\r\nC#", "study_code": "379", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify code smells", "Identify architectural smells", "Identify desgin smells"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueMmToI8eH4r83-FOKKHr0uL8OYzLS4ap9UCeIcnL5l-2SWrOnNMcYPKVpN3MflGds"}, "380": {"selection_timestamp": "7/26/2022 22:12:49", "study_title": "Experience With Managing Technical Debt in Scientific Software Development Using the\r\nEXA2PRO Framework", "study_authors": "NIKOLAOS NIKOLAIDIS\r\nDIMITRIOS ZISIS\r\nAPOSTOLOS AMPATZOGLOU\r\nALEXANDER CHATZIGEORGIOU\r\nDIMITRIOS SOUDRIS", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "IEEE Access", "study_venue_type": "Journal", "study_link": "http://doi.org/10.1109/ACCESS.2021.3079271", "study_bibtex": "@article{Nikolaidis_2021,\r\n\tdoi = {10.1109/access.2021.3079271},\r\n\turl = {https://doi.org/10.1109%2Faccess.2021.3079271},\r\n\tyear = 2021,\r\n\tpublisher = {Institute of Electrical and Electronics Engineers ({IEEE})},\r\n\tvolume = {9},\r\n\tpages = {72524--72534},\r\n\tauthor = {Nikolaos Nikolaidis and Dimitrios Zisis and Apostolos Ampatzoglou and Alexander Chatzigeorgiou and Dimitrios Soudris},\r\n\ttitle = {Experience With Managing Technical Debt in Scientific Software Development Using the {EXA}2PRO Framework},\r\n\tjournal = {{IEEE} Access}\r\n}", "study_summary": null, "study_problem": "Nevertheless, based on the literature and practice,\r\nmaintainability seems to be ranked as an important key-driver for the development of such applications; since\r\nthe effort needed to update the code before the experimentation (e.g., executing a simulation) is common\r\nand should not receive low priority.", "study_objective": "In this paper, we present the outcome of a 3-year research project on\r\nTechnical Debt Management (TDM) for scientific software development. The outcome of the project is a\r\nframework (termed: EXA2PRO TDM framework) and an accompanying platform for assisting scientific\r\nsoftware developers in managing the TD of their applications.", "study_results": null, "artifact_name": ["EXA2PRO"], "artifact_description": "The EXA2PRO TDM toolbox is released both as an Eclipse\r\nplugin4\r\nand as a standalone5\r\n\r\napplication. The main function-\r\nalities of the EXA2PRO TDM toolbox (plugin version) are\r\n\r\npresented below.", "artifact_link": ["https://github.com/nikosnikolaidis/Exa2Pro-Plugin", "https://github.com/nikosnikolaidis/Exa2Pro"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Framework", "artifact_type_evidence": null, "artifact_td_activities": ["Repayment", "Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Finally, we believe that\r\nan additional interesting future work direction will be the\r\nfine-grained assessment of the effect of the aforementioned\r\nrefactorings on performance.", "artifact_other_comments": null, "study_code": "380", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate code metrics", "Shows refactoring suggestions"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufLXUo2CHdXBCTq1ap2AGLqmzVq68QfSmZ_zOfrqxup6z8vaDbAn2TjyLhT6bd1_v8"}, "383": {"selection_timestamp": "7/27/2022 16:39:47", "study_title": "Technical Debt Forecasting Based on Deep Learning Techniques", "study_authors": "Maria Mathioudaki\r\nDimitrios Tsoukalas\r\nMiltiadis Siavvas\r\nDionysios Kehagias", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": " International Conference on Computational Science and Its Applications", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1007/978-3-030-87007-2_22", "study_bibtex": "@incollection{Mathioudaki_2021,\r\n\tdoi = {10.1007/978-3-030-87007-2_22},\r\n\turl = {https://doi.org/10.1007%2F978-3-030-87007-2_22},\r\n\tyear = 2021,\r\n\tpublisher = {Springer International Publishing},\r\n\tpages = {306--322},\r\n\tauthor = {Maria Mathioudaki and Dimitrios Tsoukalas and Miltiadis Siavvas and Dionysios Kehagias},\r\n\ttitle = {Technical Debt Forecasting Based on Deep Learning Techniques},\r\n\tbooktitle = {Computational Science and Its Applications {\\textendash} {ICCSA} 2021}\r\n}", "study_summary": null, "study_problem": "Most of these approaches however focus on the TD value (in terms of money or effort) of a software project in its current state and often tend to overlook the potential utility that a future approximation of this value would introduce in the TD Management process\r\n[5].", "study_objective": "To this end, in the present paper we investigate whether the adoption of Deep\r\nLearning models may lead to accurate and practical TD forecasts, giving partic-\r\nular emphasis on the long-term predictions that have been the most important\r\nlimitation of our previous relevant studies [15,16]. For this purpose, we utilize\r\nTD measurements throughout the different commits of five open-source Java\r\nprojects obtained from the Technical Debt Dataset [18]. Subsequently, based on\r\nthis dataset, a Multi-layer Perceptron (MLP) model is constructed and exper-\r\niments are performed for each of the five projects for 5 to 150 commits ahead.", "study_results": null, "artifact_name": ["Keras", "Scikit-Learn", "SonarQube"], "artifact_description": "SonarQube: Measurement of TD\r\nScikit: For data pre-processing tasks we used Python programming language and more specifically the scikit-learn3 ML library.\r\nKeras: For the implementation of the MLP model we used Python and more specif-\r\nically the Tensorflow Keras library.", "artifact_link": ["https://www.tensorflow.org/guide/keras/sequential_model"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Prevention"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Not cited"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "Our experiments showed that Deep Learning is indeed a promising approach\r\nfor TD forecasting. In fact, its adoption resulted in models with sufficient pre-\r\ndictive performance for both short-and long-term TD forecasts, demonstrating\r\nmeaningful results even for 150 steps ahead into the future.", "artifact_limitations": null, "artifact_gaps": "Future work includes the evaluation of the proposed approach on software\r\nproducts that belong to different domains and that are written in different pro-\r\ngramming languages, in order to verify the generalizability of our results. Based\r\non previous work [17], we also plan to examine the adoption of Deep Learning\r\nfor cross-project TD forecasting, that is, building a forecasting model based on\r\ndata retrieved from one project and using it to get reliable forecasts for a new,\r\npreviously unknown software project. Finally, recent studies have highlighted\r\nthat TD may be closely related to software security [23]. Hence, another inter-\r\nesting direction would be to examine whether TD forecasting can be used as a\r\nmeans to project the future evolution of important security-related aspects of a\r\nsoftware under development, such as the manifestation of vulnerabilities.", "artifact_other_comments": "Artificial Inteligence", "study_code": "383", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Predict occurence of TD"], "artifact_input": "An existing dataset with TD Values.", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufkxhEEfCT1iHdd5i7le0owesYvaP-x2TCaAa0FeZbn4JZR2RPRZMlCPH9vaObGuP4"}, "387": {"selection_timestamp": "7/27/2022 19:14:08", "study_title": "Machine Learning for Technical Debt Identification", "study_authors": "Dimitrios Tsoukalas\r\nNikolaos Mittas\r\nAlexander Chatzigeorgiou\r\nDionysios Kehagias\r\nApostolos Ampatzoglou\r\nTheodoros Amanatidis\r\nLefteris Angelis", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "IEEE TRANSACTIONS ON SOFTWARE ENGINEERING", "study_venue_type": "Journal", "study_link": "http://doi.org/10.1109/TSE.2021.3129355", "study_bibtex": "@article{Tsoukalas_2021,\r\n\tdoi = {10.1109/tse.2021.3129355},\r\n\turl = {https://doi.org/10.1109.tse.2021.3129355},\r\n\tyear = 2021,\r\n\tpublisher = {Institute of Electrical and Electronics Engineers ({IEEE})},\r\n\tpages = {1--1},\r\n\tauthor = {Dimitrios Tsoukalas and Nikolaos Mittas and Alexandros Chatzigeorgiou and Dionisis D. Kehagias and Apostolos Ampatzoglou and Theodoros Amanatidis and Lefteris Angelis},\r\n\ttitle = {Machine Learning for Technical Debt Identification},\r\n\tjournal = {{IEEE} Transactions on Software Engineering}\r\n}", "study_summary": null, "study_problem": "The identification and quantification of TD rely heavily on the use of a small handful of sophisticated tools that check for violations of certain predefined rules, usually through static analysis. Different tools result in divergent TD estimates calling into question the reliability of findings derived by a single tool.", "study_objective": "To alleviate this issue we use 18 metrics pertaining to source code, repository activity, issue tracking, refactorings, duplication and commenting rates of each class as features for statistical and Machine Learning models, so as to classify them as High-TD or not. As a\r\nbenchmark we exploit 18,857 classes obtained from 25 Java projects, whose high levels of TD has been confirmed by three leading tools.", "study_results": null, "artifact_name": ["TD Benchmarker", "PyDriller ", "RMiner", "CK [26]", "PMD\u2019s Copy/Paste Detector", "cloc", "Scikit-Learn"], "artifact_description": "More specifically, PyDriller (v1.15.5, 2021), i.e., a Python framework meant for mining Git repositories, was used to compute module-level Git-related metrics, such as commits count, code churn, and contributors experience across the whole evolution of the projects.\r\n\r\nCK (v0.6.3, 2020), a tool that calculates class level metrics in Java projects by means of static analysis was used to compute various OO metrics, such as CBO, DIT, and\r\nLCOM for each module. Subsequently, CPD (v6.30.0, 2020), a tool able to locate duplicate code in various programming languages, including Java, was employed to compute the\r\ntotal number of duplicated lines for each module. Finally, cloc (v1.88, 2020), an open-source tool able to count comment lines and source code lines in many programming languages, was used to compute the total number of code and comment lines for each module.", "artifact_link": ["https://pmd.github.io/latest/pmd_userdocs_cpd.html", "https://github.com/AlDanial/cloc#quick-start-", "https://scikit-learn.org/stable/", "https://github.com/theoam/TDBenchmarker"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "The associated Module Inspection ratio was found to be approximately 0.10 while the recall is close to 0.86, implying that one tenth of the system classes would have to be inspected by the development team for identifying 86% of all true high-TD classes.", "artifact_limitations": null, "artifact_gaps": "Further research can focus on the common characteristics shared by the problematic classes aiming at the establishment of efficient TD prevention guidelines.", "artifact_other_comments": "Artificial Intelligence", "study_code": "387", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify TD", "Calculate TD"], "artifact_input": "Source Code\r\nGit Metadata\r\nCode Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuceiMNHoTc9r6NHqOcosmZE2UGKiRPTfTHiY3VL7B_iTNwF7qhQ6YRwS7RVTr-rXMs"}, "390": {"selection_timestamp": "7/27/2022 19:34:26", "study_title": "FixMe: A GitHub Bot for Detecting and Monitoring On-Hold Self-Admitted Technical Debt", "study_authors": "Saranphon Phaithoon\r\nSupakarn Wongnil\r\nPatiphol Pussawong\r\nMorakot Choetkiertikul\r\nChaiyong Ragkhitwetsagul\r\nThanwadee Sunetnanta\r\nRungroj Maipradit\r\nHideaki Hata\r\nKenichi Matsumoto\u2020", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "International Conference on Automated Software Engineering", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1109/ASE51524.2021.9678680", "study_bibtex": "@inproceedings{Phaithoon_2021,\r\n\tdoi = {10.1109/ase51524.2021.9678680},\r\n\turl = {https://doi.org/10.1109%2Fase51524.2021.9678680},\r\n\tyear = 2021,\r\n\tmonth = {nov},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Saranphon Phaithoon and Supakarn Wongnil and Patiphol Pussawong and Morakot Choetkiertikul and Chaiyong Ragkhitwetsagul and Thanwadee Sunetnanta and Rungroj Maipradit and Hideaki Hata and Kenichi Matsumoto},\r\n\ttitle = {{FixMe}: A {GitHub} Bot for Detecting and Monitoring On-Hold Self-Admitted Technical Debt},\r\n\tbooktitle = {2021 36th {IEEE}/{ACM} International Conference on Automated Software Engineering ({ASE})}\r\n}\r\n", "study_summary": null, "study_problem": "When the referenced issues are resolved, the On-hold SATD also need to be addressed, but since monitoring these issue reports takes a lot of time and effort, developers may not be aware of the resolved issues and leave the On-hold SATD in the code.", "study_objective": "In this paper, we propose FixMe, a GitHub bot that helps developers detecting and monitoring On-hold SATD in their repositories and notify them whenever the On-hold SATDs are ready to be fixed (i.e. the referenced issues are resolved).", "study_results": null, "artifact_name": ["FixMe"], "artifact_description": "We introduce the FixMe bot which is an On-hold SATD detection tool seamlessly integrated with GitHub to assist developers in monitoring issue status and notify whenever On-\r\nhold SATD becomes ready-to-be-fixed.", "artifact_link": ["https://www.fixmebot.app/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Bot", "artifact_type_evidence": null, "artifact_td_activities": ["Monitoring", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "The FixMe bot allows developers to perform bot configuration according to their project environment and practice including detection techniques, target branch selection, and notification method selection through the bot\u2019s web application.", "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": "Artificial Intelligence", "study_code": "390", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify SATD", "Notify authors"], "artifact_input": "Github Commits", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuc7IPalhKW9fyhaKK3M6yMVQHtAyDsAYlTGqdXKyvGkan4ujw9rd_LUYGPLxQ4nbLw"}, "392": {"selection_timestamp": "7/27/2022 20:13:26", "study_title": "A Clustering Approach Towards Cross\u2010Project Technical Debt Forecasting", "study_authors": "Dimitrios Tsoukalas\r\nMaria Mathioudaki\r\nMiltiadis Siavvas\r\nDionysios Kehagias\r\nAlexander Chatzigeorgiou", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "SN Computer Science", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1007/s42979-020-00408-4", "study_bibtex": "@article{Tsoukalas_2021,\r\n\tdoi = {10.1007/s42979-020-00408-4},\r\n\turl = {https://doi.org/10.1007%2Fs42979-020-00408-4},\r\n\tyear = 2021,\r\n\tmonth = {jan},\r\n\tpublisher = {Springer Science and Business Media {LLC}},\r\n\tvolume = {2},\r\n\tnumber = {1},\r\n\tauthor = {Dimitrios Tsoukalas and Maria Mathioudaki and Miltiadis Siavvas and Dionysios Kehagias and Alexander Chatzigeorgiou},\r\n\ttitle = {A Clustering Approach Towards Cross-Project Technical Debt Forecasting},\r\n\tjournal = {{SN} Computer Science}\r\n}", "study_summary": null, "study_problem": "Cross-project TD forecasting, that is, building a forecasting model based on data retrieved from one project and using it to get reliable forecasts for a new, previously unknown software project, would allow project managers and developers leverage the benefts of TD forecasting in cases where a long history of commits is not available, e.g., from the very\r\nearly stages of the development.", "study_objective": "To this end, in the present paper, to overcome the aforementioned problem, we intro-\r\nduce a novel clustering-based approach that aims to improve the performance of TD forecasting models in cross-project prediction.", "study_results": null, "artifact_name": ["Scikit-Learn", "SonarQube"], "artifact_description": "All of the four aforementioned feature selection algorithms were put in practice using Python in conjunction with the scikit-learn ML library. Each of the algorithms described\r\nabove was employed independently on the feature set and retained the top N = 5 features that were selected by each method.", "artifact_link": ["https://scikit-learn.org/stable/", "https://sonarqube.org"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Prevention", "Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "To investigate the generalizability of the produced results, we plan to replicate our study on a broader spectrum of real-world software applications that are written in other programming languages and that belong to diferent domains.\r\n\r\nWe consider to extend this study by considering also TD indicators retrieved from other sources, such as diferent ASA tools and OO metric suits.\r\n\r\nWe also plan to investigate the extension of cross-project TD forecasting to lower levels of granularity of a software project, such as package, class or function level.\r\n\r\nOther future work would be to consider more sophisticated clustering methods, as well as the possibility that the clustering process dynamically", "artifact_other_comments": "Artificial Intelligence", "study_code": "392", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate code metrics", "Predict TD"], "artifact_input": "Source Code\r\nGithub Metadata", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/formResponse?edit2=2_ABaOnudpw3BUPxum4bVEmIfwpTB-gL2daiffmUffDj08FKtvIJlaTX2ESqr9PeDyTNp-UMY"}, "398": {"selection_timestamp": "7/27/2022 20:47:49", "study_title": "Impact of Opportunistic Reuse Practices to Technical Debt", "study_authors": "Rafael Capilla\r\nTommi Mikkonen\r\nCarlos Carrillo\r\nFrancesca Arcelli Fontana\r\nIlaria Pigazzini\r\nValentina Lenarduzzi", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/TechDebt52882.2021.00011", "study_bibtex": "@inproceedings{Capilla_2021,\r\n\tdoi = {10.1109/techdebt52882.2021.00011},\r\n\turl = {https://doi.org/10.1109%2Ftechdebt52882.2021.00011},\r\n\tyear = 2021,\r\n\tmonth = {may},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Rafael Capilla and Tommi Mikkonen and Carlos Carrillo and Francesca Arcelli Fontana and Ilaria Pigazzini and Valentina Lenarduzzi},\r\n\ttitle = {Impact of Opportunistic Reuse Practices to Technical Debt},\r\n\tbooktitle = {2021 {IEEE}/{ACM} International Conference on Technical Debt ({TechDebt})}\r\n}", "study_summary": null, "study_problem": "However, reusing software opportunistically can lead to a loss of quality and induce TD, especially when the architecture is changed in the process. However, to the best\r\nof our knowledge, no studies have investigated the impact of opportunistic reuse in TD.", "study_objective": "In this paper, we carry out an exploratory study to investigate to what extent reusing components opportunistically negatively affects the quality of systems. We use one commercial and one research tool to analyze the TD ratios of three case systems, before and after opportunistically extending them with open-source software.", "study_results": null, "artifact_name": ["SonarQube", "Arcan"], "artifact_description": null, "artifact_link": ["https://essere.disco.unimib.it/wiki/arcan/", "https://www.sonarqube.org/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "show that for larger projects the TD ratio provided by SonarQube remains stable or \r\n ecreases, but in most cases, the number of code smells and TD issues increase. The same happens when we add a large component to a small project.", "artifact_limitations": null, "artifact_gaps": "In future work, we plan to evaluate these initial trends in more projects and repositories and compare them to programs implemented with some other programming languages like\r\nPython.", "artifact_other_comments": null, "study_code": "398", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate Architectural TD", "Calculate Code TD"], "artifact_input": "Source Code", "selection_response_link": null}, "334": {"selection_timestamp": "7/28/2022 15:42:30", "study_title": "Evaluating the agreement among technical debt measurement tools: building an empirical benchmark of technical debt liabilities", "study_authors": "Theodoros Amanatidis\r\nNikolaos Mittas\r\nAthanasia Moschou\r\nAlexander Chatzigeorgiou\r\nApostolos Ampatzoglou\r\nLefteris Angelis", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Empirical Software Engineering", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1007/s10664-020-09869-w", "study_bibtex": "@ARTICLE{Amanatidis2020-vo,\r\n  title     = \"Evaluating the agreement among technical debt measurement tools:\r\n               building an empirical benchmark of technical debt liabilities\",\r\n  author    = \"Amanatidis, Theodoros and Mittas, Nikolaos and Moschou,\r\n               Athanasia and Chatzigeorgiou, Alexander and Ampatzoglou,\r\n               Apostolos and Angelis, Lefteris\",\r\n  journal   = \"Empir. Softw. Eng.\",\r\n  publisher = \"Springer Science and Business Media LLC\",\r\n  volume    =  25,\r\n  number    =  5,\r\n  pages     = \"4161--4204\",\r\n  month     =  sep,\r\n  year      =  2020,\r\n  language  = \"en\"\r\n}", "study_summary": null, "study_problem": "The use of different rulesets can often be beneficial as it leads to the identification of a wider set of problems; however, for the common usage scenario where developers or researchers rely on a single tool, diverse estimates of TD and the identification of different mitigation actions limits the credibility and applicability of the findings.", "study_objective": "The objective of this study is two-fold: First, we evaluate the degree of agreement among leading TD assessment tools. Second, we propose a framework to capture the diversity\r\nof the examined tools with the aim of identifying few \u201creference assessments\u201d (or class/file\r\nprofiles) representing characteristic cases of classes/files with respect to their level of TD.", "study_results": null, "artifact_name": ["AnaConDebt", "CAST", "CodeScene", "DebtFlag", "Debtgrep", "DV8", "Kiuwan", "NDepend", "SonarQube", "Squore", "TD-Tracker", "TEDMA", "VisminerTD"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["nan"], "artifact_sdlc_evidence": null, "artifact_type": null, "artifact_type_evidence": null, "artifact_td_activities": ["nan"], "artifact_td_activities_evidence": null, "artifact_td_type": ["nan"], "artifact_td_type_evidence": null, "artificat_evidence_level": null, "artifact_evidence_level_evidence": null, "artifact_maturity": null, "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": "IMPORTANT", "study_code": "334", "artifact_vendor": null, "artifact_level_automation": null, "artifact_level_automation_evidence": null, "artifact_license": null, "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": null, "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufKCqEUuHw3mB6tJU4XENdVWTYDeznCIXnvv5N2wB0ZxV_UMnqS46KD9cqvi8AATnA"}, "340": {"selection_timestamp": "7/28/2022 15:48:49", "study_title": "On the Lack of Consensus Among Technical Debt Detection Tools", "study_authors": "Jason Lefever\r\nYuanfang Cai\r\nHumberto Cervantes\r\nRick Kazman\r\nHongzhou Fang", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "International Conference on Software Engineering: Software Engineering in Practice", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/ICSE-SEIP52600.2021.00021", "study_bibtex": "@INPROCEEDINGS{Lefever2021-ot,\r\n  title           = \"On the lack of consensus among technical debt detection\r\n                     tools\",\r\n  booktitle       = \"2021 {IEEE/ACM} 43rd International Conference on Software\r\n                     Engineering: Software Engineering in Practice\r\n                     ({ICSE-SEIP})\",\r\n  author          = \"Lefever, Jason and Cai, Yuanfang and Cervantes, Humberto\r\n                     and Kazman, Rick and Fang, Hongzhou\",\r\n  publisher       = \"IEEE\",\r\n  month           =  may,\r\n  year            =  2021,\r\n  conference      = \"2021 IEEE/ACM 43rd International Conference on Software\r\n                     Engineering: Software Engineering in Practice (ICSE-SEIP)\",\r\n  location        = \"Madrid, ES\"\r\n}", "study_summary": null, "study_problem": "But to what extent do these tools agree with each other in terms of the files that they identify as problematic? If the top-ranked files reported by these tools are largely consistent, then we can be confident in using any of these tools. Otherwise, a problem of accuracy arises. In this paper, we report the results of an empirical study analyzing 10\r\nprojects using multiple tools.", "study_objective": null, "study_results": "Our results show that: 1) these tools report very different results even for the most common measures, such as size, complexity, file cycles, and package cycles. 2) These tools also differ dramatically in terms of the set of problematic files they identify, since each implements its own definitions of \u201cproblematic\u201d. After normalizing by size, the most problematic file sets that the tools identify barely overlap. 3) Our results show\r\nthat code-based measures, other than size and complexity, do not even moderately correlate with a file\u2019s change-proneness or error-proneness.", "artifact_name": ["SonarQube", "Designite Java", "DV8", "Structure101", "Archinaut", "Succinct Code Counter"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["nan"], "artifact_sdlc_evidence": null, "artifact_type": null, "artifact_type_evidence": null, "artifact_td_activities": ["nan"], "artifact_td_activities_evidence": null, "artifact_td_type": ["nan"], "artifact_td_type_evidence": null, "artificat_evidence_level": null, "artifact_evidence_level_evidence": null, "artifact_maturity": null, "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": "IMPORTANT", "study_code": "340", "artifact_vendor": null, "artifact_level_automation": null, "artifact_level_automation_evidence": null, "artifact_license": null, "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": null, "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucJgGXQkvyN0cLvkOaf09EGb2dq2K4xyjeWmriaMAG66-fbdZJPZdVGsvf_8InmUME"}, "348": {"selection_timestamp": "7/28/2022 15:56:04", "study_title": "An Overview and Comparison of Technical Debt Measurement Tools", "study_authors": "Paris Avgeriou\r\nDavide Taibi\r\nApostolos Ampatzoglou\r\nFrancesca Arcelli Fontana\r\nTerese Besker\r\nAlexander Chatzigeorgiou\r\nValentina Lenarduzzi\r\nAntonio Martini\r\nAthanasia Moschou\r\nIlaria Pigazzini\r\nNyyti Saarim\u00e4ki\r\nDarius Sas\r\nSaulo Soares de Toledo\r\nAngeliki Tsintzira", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "IEEE Software", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1109/MS.2020.3024958", "study_bibtex": "@ARTICLE{Avgeriou2021-fi,\r\n  title     = \"An overview and comparison of technical debt measurement tools\",\r\n  author    = \"Avgeriou, Paris C and Taibi, Davide and Ampatzoglou, Apostolos\r\n               and Arcelli Fontana, Francesca and Besker, Terese and\r\n               Chatzigeorgiou, Alexander and Lenarduzzi, Valentina and Martini,\r\n               Antonio and Moschou, Athanasia and Pigazzini, Ilaria and\r\n               Saarimaki, Nyyti and Sas, Darius Daniel and de Toledo, Saulo\r\n               Soares and Tsintzira, Angeliki Agathi\",\r\n  journal   = \"IEEE Softw.\",\r\n  publisher = \"Institute of Electrical and Electronics Engineers (IEEE)\",\r\n  volume    =  38,\r\n  number    =  3,\r\n  pages     = \"61--71\",\r\n  month     =  may,\r\n  year      =  2021,\r\n  copyright = \"https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html\"\r\n}", "study_summary": null, "study_problem": null, "study_objective": "Different tools adopt different terms, metrics, and ways to identify and measure technical debt.We attempt to clarify the situation by comparing the features and popularity of technical debt measurement tools and analyzing the existing empirical evidence on their validity.", "study_results": null, "artifact_name": ["CAST", "SonarGraph", "NDepend", "SonarQube", "SQuORE", "CodeMRI", "Code Inspector", "DV8", "SymfonyInsight"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["nan"], "artifact_sdlc_evidence": null, "artifact_type": null, "artifact_type_evidence": null, "artifact_td_activities": ["nan"], "artifact_td_activities_evidence": null, "artifact_td_type": ["nan"], "artifact_td_type_evidence": null, "artificat_evidence_level": null, "artifact_evidence_level_evidence": null, "artifact_maturity": null, "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": "IMPORTANT", "study_code": "348", "artifact_vendor": null, "artifact_level_automation": null, "artifact_level_automation_evidence": null, "artifact_license": null, "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": null, "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/formResponse?edit2=2_ABaOnucfihh4ysgQG3s3FEy5Kj9B4VB7gj2UeXBI3qnzZ_2ckG07U2yeoYY3RYU60MIJwtI"}, "403": {"selection_timestamp": "7/28/2022 16:42:27", "study_title": "DebtHunter: A Machine Learning-based Approach for Detecting Self-Admitted Technical Debt", "study_authors": "Irene Sala\r\nAntonela Tommasel\r\nFrancesca Arcelli Fontana", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "Evaluation and Assessment in Software Engineering", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3463274.3464455", "study_bibtex": "@INPROCEEDINGS{Sala2021-gk,\r\n  title      = \"{DebtHunter}: A machine learning-based approach for detecting\r\n                self-admitted technical debt\",\r\n  booktitle  = \"Evaluation and Assessment in Software Engineering\",\r\n  author     = \"Sala, Irene and Tommasel, Antonela and Arcelli Fontana,\r\n                Francesca\",\r\n  publisher  = \"ACM\",\r\n  month      =  jun,\r\n  year       =  2021,\r\n  address    = \"New York, NY, USA\",\r\n  conference = \"EASE 2021: Evaluation and Assessment in Software Engineering\",\r\n  location   = \"Trondheim Norway\"\r\n}", "study_summary": null, "study_problem": "Due to limited time, budget or resources, a team is prone to introduce code that does not follow the best software development practices. This code that introduces instability in the software projects is known as Technical Debt (TD). Often, TD intentionally manifests in source code, which is known as Self-Admitted Technical Debt (SATD).", "study_objective": "This paper presents DebtHunter, a natural language processing (NLP)- and machine learning (ML)- based approach for identifying and classifying SATD in source code comments.", "study_results": null, "artifact_name": ["DebtHunter"], "artifact_description": "The tool provides developers with the capability of classifying either source code comments or issue tracker comments, and with the possibility of training new classification models to learn the particularities of the systems to be analyzed. The", "artifact_link": ["https://github.com/PandaMinore/DebtHunter-Tool"], "artifact_sdlc": ["nan"], "artifact_sdlc_evidence": null, "artifact_type": null, "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Requirements TD", "Design TD", "Test TD", "Documentation TD", "Defect TD", "SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "(2) The materialization of DebtHunter into a tool that could be used as part of a continuous evolution environment to monitor the development process and make developers aware of how and where SATD is introduced, thus helping them to manage and resolve it. The tool\r\ncan analyse both source code and the corresponding issue tracker.", "artifact_limitations": null, "artifact_gaps": "In this regard, it would be desirable to create a newly labeled collection including issue trackers comments of, at least, the same systems analyzed by da S. Maldonado and Shihab [5] to assess the descriptive power of issue trackers regarding SATD and improve the DebtHunter model.", "artifact_other_comments": "Artificial Intelligence\r\nContinuous Practices", "study_code": "403", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of SATD"], "artifact_input": "Code Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufuPhz5nWBHyn_Gw7zkwZxx0jcSlEj-WfdqOr8d-KnyVZoSjTbkQAMEGACR1Dlyrj8"}, "407": {"selection_timestamp": "7/28/2022 17:38:01", "study_title": "Technical Debt predictive model through Temporal Convolutional Network", "study_authors": "Lerina Aversano\r\nMario Luca Bernardi\r\nMarta Cimitile\r\nMartina Iammarino", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "International Joint Conference on Neural Networks", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1109/IJCNN52387.2021.9534423", "study_bibtex": "@INPROCEEDINGS{Aversano2021-ut,\r\n  title           = \"Technical Debt predictive model through Temporal\r\n                     Convolutional Network\",\r\n  booktitle       = \"2021 International Joint Conference on Neural Networks\r\n                     ({IJCNN})\",\r\n  author          = \"Aversano, Lerina and Bernardi, Mario Luca and Cimitile,\r\n                     Marta and Iammarino, Martina\",\r\n  publisher       = \"IEEE\",\r\n  month           =  jul,\r\n  year            =  2021,\r\n  conference      = \"2021 International Joint Conference on Neural Networks\r\n                     (IJCNN)\",\r\n  location        = \"Shenzhen, China\"\r\n}", "study_summary": null, "study_problem": "Technical debt is a metaphor that refers to all the consequences of poorly written code and trade-offs in development. Early technical debt diagnosis is important for software developers because it allows planning for software maintenance and improvement activities, such as refactoring, to prevent system degradation. Several studies have been conducted in the literature on the identification of the technical debt and its consequences,\r\nthanks to useful tools for identifying the problem within the source code.", "study_objective": "On the other hand, this work aims to explore a\r\ndeep learning approach to predict the rise of technical debt in\r\nsoftware code by leveraging the knowledge of changing quality\r\nmetrics.", "study_results": null, "artifact_name": ["Keras", "Tensorflow"], "artifact_description": "Therefore, the classifier we used in this study was built using the Keras API, specific for neural networks and Tensorflow a library for high-performance numerical calculations.", "artifact_link": ["https://keras.io", "https://www.tensorflow.org"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Prevention"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Of course, there are several future works to tackle, but the\r\ncurrent results form the basis for further experimentation,\r\ninvolving well-known software projects, as well as lower levels\r\nof granularity of a software project considering the level of\r\nfunction.", "artifact_other_comments": null, "study_code": "407", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Predict TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufGJ9V-E2mGGESnCY7O1pdQmDKOzpZz_GftrqTzHGYiQI90QvFNWy2X0kaPGp6jtnw"}, "414": {"selection_timestamp": "7/29/2022 16:31:31", "study_title": "Architectural Technical Debt of Multiagent Systems Development Platforms", "study_authors": "Ilaria Pigazzini\r\nDaniela Briola\r\nFrancesca Arcelli Fontana", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "Workshop From Objects to Agents", "study_venue_type": "Workshop", "study_link": null, "study_bibtex": null, "study_summary": null, "study_problem": null, "study_objective": null, "study_results": null, "artifact_name": ["Arcan"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": "Multiagent systems", "study_code": "414", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify architectural TD", "Calculate Architectural TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucET1Cimnh-LY0G4fV7J0On9n8gptOJIG0IWAyCENmBTm__GTOYuvDX4bUpOcMathI"}, "431": {"selection_timestamp": "7/29/2022 16:40:36", "study_title": "Practice of Tech Debt Assessment and Management with TETRA", "study_authors": "Boris Kontsevoi\r\nDenis Syraeshko\r\nSergei Terekhov", "study_author_type": "Industry", "study_year": 2021.0, "study_venue": "International Congress on Information and Communication Technology", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1007/978-981-16-2380-6_74", "study_bibtex": "@incollection{Kontsevoi_2021,\r\n\tdoi = {10.1007/978-981-16-2380-6_74},\r\n\turl = {https://doi.org/10.1007/2F978-981-16-2380-6_74},\r\n\tyear = 2021,\r\n\tmonth = {sep},\r\n\tpublisher = {Springer Singapore},\r\n\tpages = {843--850},\r\n\tauthor = {Boris Kontsevoi and Denis Syraeshko and Sergei Terekhov},\r\n\ttitle = {Practice of Tech Debt Assessment and Management with {TETRA}{\\texttrademark}},\r\n\tbooktitle = {Proceedings of Sixth International Congress on Information and Communication Technology}\r\n}", "study_summary": null, "study_problem": "The paper covers the further development of the company\u2019s proprietary\r\napproach to the assessment of software product quality and measurement of tech-\r\nnical debt.", "study_objective": "In the current paper, the authors show assessment results of the existing e-\r\nlearning project with the help of the Technical dEbT Reduction plAtform (TETRATM)\r\n\r\nwith exact numbers of all reviewed metrics and assigned indices as well.", "study_results": null, "artifact_name": ["TETRA"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Applications", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": "The expansion of the concept of technical debt increases the role of subjective, albeit expert, assessment and excludes the possibility of complete automation of the process.\r\n\r\nA single application of assessment captures current issues and their poten-\r\ntial impact on product development, but technical debt minimization requires\r\nsuch assessments on a regular basis, the cyclicality of which depends on the\r\nsize/condition of the project and the resources available.", "artifact_gaps": "Evaluation using the TETRATM approach allows the identification of technical\r\ndebt in various areas but does not give a direct answer about the methods of its\r\nminimization. The resulting assessment requires interpretation and further inves-\r\ntigation of the causes of the problems, as well as the real interest of the team and\r\nmanagement in changing established practices.", "artifact_other_comments": "e-Learning Platform\r\nIMPORTANT FOR DISCUSSION", "study_code": "431", "artifact_vendor": null, "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Commercial/Private", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of TD", "Measurement of TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueOo9UynbYgaDbVRMmUzySMKrI5dmdZCzmd7TbWSUuNYnwg9QwYQmHW9qRe9m8Lvd4"}, "432": {"selection_timestamp": "7/31/2022 12:31:42", "study_title": "Toward prioritization of self\u2010admitted technical debt: an approach to support decision to payment", "study_authors": "Bruno Santos de Lima\r\nRogerio Eduardo Garcia\r\nDanilo Medeiros Eler", "study_author_type": "Academia", "study_year": 2022.0, "study_venue": "Software Quality Journal", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1007/s11219-021-09578-7", "study_bibtex": "@article{de_Lima_2022,\r\n\tdoi = {10.1007/s11219-021-09578-7},\r\n\turl = {https://doi.org/10.1007%2Fs11219-021-09578-7},\r\n\tyear = 2022,\r\n\tmonth = {jan},\r\n\tpublisher = {Springer Science and Business Media {LLC}},\r\n\tauthor = {Bruno Santos de Lima and Rogerio Eduardo Garcia and Danilo Medeiros Eler},\r\n\ttitle = {Toward prioritization of self-admitted technical debt: an approach to support decision to payment},\r\n\tjournal = {Software Quality Journal}\r\n}", "study_summary": null, "study_problem": "Several studies explore the identifcation of SATD, but approaches to support the payment stage are lacking, particularly approaches to indicate which SATD priority for payment.", "study_objective": "This paper presents an approach to support the prioritization activity in SATD payment. The Prioritization Approach focuses on creating associations between SATD associations and problems found in the source code, identifed by Automatic Static Analysis.", "study_results": null, "artifact_name": ["SonarQube", "SATD Detector", "Priorization Approach"], "artifact_description": "The Prioritization Approach uses terms present in the descriptions of SATD comments and\r\nissues present in the code block associated with SATD comments to indicate TD prioritiza-\r\ntion. Given instances of SATD identifed by the SATD Detector and Issues identifed by\r\nSonarQube, the Prioritization Approach makes associations of Priority Terms and Issues to\r\nindicate which SATD instances should be prioritized in a future TD payment stage.", "artifact_link": ["https://github.com/brunoslima/SATDPriorityParse"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Priorization", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD", "SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "The results showed that using the SATD description (comments) and the issues present\r\nin the source code associated with comments allows increase precision to prioritize SATD.\r\nThat is the main contribution of this work. This work also opens a new perspective for\r\nfuture research to prioritize SATD, considering the possible problems in the code snippets\r\nin which the SATD instance is located.", "artifact_limitations": null, "artifact_gaps": "As future work, it is possible to increase and, consequently, improve the dictionary of Priority Terms by manual analysis of other sets of SATD instances identifed in other software projects other than those explored in this work. In conjunction with research groups and developers, another future work is to obtain a set of SATD comments classifed manually as a priority by mutual agreement considering the opinions of researchers and developers.\r\n\r\nFinally, the Prioritization Approach\u2019s implementation can be improved by facilitating\r\nthe user analysis through visual approaches to facilitate understanding the SATD instances\r\nidentifed as a priority since, currently, these are presented in the form of simple listing.\r\nThus, in parallel, it contributes to the TD Visualization area, in which studies are still\r\nincipient (Rios et al., 2018).", "artifact_other_comments": "IMPORTANT", "study_code": "432", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify SATD", "Prioritize the repayment"], "artifact_input": "Source Code\r\nCode Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufSXzjZkr5UQA0SZ7JfPjwazHEyS7KdXZtPiFwFXE3Zoikn7KWCziVE6801Ciskajg"}, "442": {"selection_timestamp": "7/31/2022 12:47:04", "study_title": "Identifying Self-Admitted Technical Debts With Jitterbug: A Two-Step Approach", "study_authors": "Identifying Self-Admitted Technical Debts With Jitterbug: A Two-Step Approach", "study_author_type": "Academia", "study_year": 2022.0, "study_venue": "IEEE TRANSACTIONS ON SOFTWARE ENGINEERING", "study_venue_type": "Journal", "study_link": "http://doi.org/10.1109/TSE.2020.3031401", "study_bibtex": "@article{Yu_2022,\r\n\tdoi = {10.1109/tse.2020.3031401},\r\n\turl = {https://doi.org/10.1109%2Ftse.2020.3031401},\r\n\tyear = 2022,\r\n\tmonth = {may},\r\n\tpublisher = {Institute of Electrical and Electronics Engineers ({IEEE})},\r\n\tvolume = {48},\r\n\tnumber = {5},\r\n\tpages = {1676--1691},\r\n\tauthor = {Zhe Yu and Fahmid Morshed Fahid and Huy Tu and Tim Menzies},\r\n\ttitle = {Identifying Self-Admitted Technical Debts With Jitterbug: A Two-Step Approach},\r\n\tjournal = {{IEEE} Transactions on Software Engineering}\r\n}", "study_summary": null, "study_problem": "The current automated solutions do not\r\nhave satisfactory precision and recall in identifying SATDs to fully automate the process.", "study_objective": "To solve the above problems, we propose a two-step framework called Jitterbug for identifying SATDs.", "study_results": null, "artifact_name": ["Jitterbug"], "artifact_description": "In Step 1, Jitterbug utilizes a novel pattern recognition technique to identify patterns that could yield very high precision (if one comment has the recorded patterns\r\nthen there is a close to 100 percent chance it is related to SATDs). In Step 2, Then machine learning models are trained to guide humans to discover SATDs from comments that do\r\nnot have high precision patterns, as well as to estimate the number of SATDs left in the comments. This", "artifact_link": ["https://github.com/ai-se/Jitterbug"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Framework", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "1) Apply hyper-parameter tuning on data preprocess ing and model configuration to see if our current conclusions still hold and whether tuning can further improve the performance.\r\n\r\n2) Prototype Jitterbug as a tool to make it more user-friendly.\r\n\r\n3) Explore more complex patterns (other than just single word patterns Easy has explored) in Step 1. \r\n\r\n4) Explore more advanced feature engineering in Step 2 for finding the \u201chard to find\u201d SATDs. E.g., explore N-gram patterns [39] and word embeddings with deep neural networks [40].\r\n\r\n5) Explore whether replacing the random forest model in Jitterbug with a deep learning model (CNN [3]) will further improve its performance.\r\n\r\n6) Extend the work to other types of technical debts and compare it with other state-of-the-art methods which continue to appear.", "artifact_other_comments": null, "study_code": "442", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of SATD"], "artifact_input": "Code Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufb-o4NNujIJ7oFfswV4Yg46tx3jAFMnImrzrVvxROJgMnm68Fr28ECyqVGubvKj-E"}, "447": {"selection_timestamp": "7/31/2022 13:39:50", "study_title": "SDK4ED: A platform for technical debt management", "study_authors": "Apostolos Ampatzoglou\r\nAlexander Chatzigeorgiou\r\nElvira Maria Arvanitou\r\nStamatia Bibi", "study_author_type": "Academia", "study_year": 2022.0, "study_venue": "Journal Of Software: Practice and Experience", "study_venue_type": "Journal", "study_link": " https://doi.org/10.1002/spe.3093", "study_bibtex": "@article{Ampatzoglou_2022,\r\n\tdoi = {10.1002/spe.3093},\r\n\turl = {https://doi.org/10.1002%2Fspe.3093},\r\n\tyear = 2022,\r\n\tmonth = {may},\r\n\tpublisher = {Wiley},\r\n\tvolume = {52},\r\n\tnumber = {8},\r\n\tpages = {1879--1902},\r\n\tauthor = {Apostolos Ampatzoglou and Alexander Chatzigeorgiou and Elvira Maria Arvanitou and Stamatia Bibi},\r\n\ttitle = {$\\less$scp$\\greater${SDK}4ED$\\less$/scp$\\greater$\r\n\t\t            : A platform for technical debt management},\r\n\tjournal = {Software: Practice and Experience}\r\n}", "study_summary": null, "study_problem": null, "study_objective": "In this article, we present the SDK4ED platform that enables efficient\r\ntechnical debt management (i.e., measurement, evolution analysis, prevention,\r\netc.) at the code level, and evaluate its capabilities in an industrial setting. The\r\nSDK4ED platform is the outcome of a 3-year project, including several software\r\nindustries.", "study_results": null, "artifact_name": ["SDK4ED"], "artifact_description": "First, while coding, a continuous TD Prevention activity takes places, attempting to limit the amount of TD that is introduced in the system. However, since this process cannot be 100% efficient and zero TD is unrealistic,4 there will be a need for TD Identification. In this step, a long list of ranked artifacts that suffer from TD will be generated. The presentation of TD items will be accompanied by the outcomes of TD Quantification and TD Prioritization. This process will be performed along evolution offering continuous TD Monitoring. For selected (by the engineers) artifacts, opportunities for TD Repayment are presented, so as to reduce their TD Principal so as to reduce their TD Principal, as well as the accumulation of future TD Interest. All the aforementioned activities are visualized in dashboards and a full history of all monitored indices are persistently stored, in order to achieve TD Representation and Documentation. Finally, we note that the platform is web-based so that all company stakeholders (e.g., architects, developers, managers, etc.) can have access to the data, being provided with different views based on their roles, enabling TD Communication. At the current development", "artifact_link": ["https://sdk4ed.eu/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Prevention", "Communication", "Representation/Documentation", "Repayment", "Monitoring", "Priorization", "Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "With respect to the next steps on evolving the platform, 5 out of 6 features are final, whereas refactoring so far supports only two object-oriented refactoring opportunities. In the near future, we plan to include in the platform additional refactoring identification approaches.", "artifact_limitations": "First, regarding the platform we acknowledge that not all types of TD are covered.\r\nAdditionally, we cannot claim for a ground truth calculation of TD principal and TD interest. ", "artifact_gaps": null, "artifact_other_comments": "IMPORTANT", "study_code": "447", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Cover all TD Activities in source code level"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueGbwQAIR57qmzxcTKsntNlsGv3_SC3nT7KCv3L84fLV69IJshyg73IrWPyHSuV5WY"}, "137": {"selection_timestamp": "7/31/2022 13:27:03", "study_title": "What if I had no smells?", "study_authors": "Davide Falessi\r\nBarbara Russo\r\nKathleen Mullen", "study_author_type": "Both", "study_year": 2017.0, "study_venue": "International Symposium on Empirical Software Engineering and Measurement", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1109/esem.2017.14", "study_bibtex": "@inproceedings{Falessi_2017,\r\n\tdoi = {10.1109/esem.2017.14},\r\n\turl = {https://doi.org/10.1109/esem.2017.14},\r\n\tyear = 2017,\r\n\tmonth = {nov},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Davide Falessi and Barbara Russo and Kathleen Mullen},\r\n\ttitle = {What if I Had No Smells?},\r\n\tbooktitle = {2017 {ACM}/{IEEE} International Symposium on Empirical Software Engineering and Measurement ({ESEM})}\r\n}\r\n", "study_summary": null, "study_problem": null, "study_objective": "This is an interesting question that no previous study, to\r\nthe best of our knowledge, has tried to answer. In this paper, we\r\npresent a method for implementing a what-if scenario analysis\r\nestimating the number of defective files in the absence of smells.", "study_results": "Our industrial case study shows that 20% of the total defective\r\nfiles were likely avoidable by avoiding smells. Such estimation\r\nneeds to be used with the due care though as it is based on a\r\nhypothetical history (i.e., zero number of smells and same process\r\nand product change characteristics).", "artifact_name": ["SonarQube"], "artifact_description": null, "artifact_link": ["https://sonarqube.org/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "137", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of Code Smelss"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudV-r63d4vKy1bUDRVeO7XYEZ_dPjPd3cGZeyJDxNmTUyrJcMZ-5kAvcGfbMG6CtDc"}, "308": {"selection_timestamp": "7/31/2022 13:39:17", "study_title": "On Energy Debt: Managing Consumption on Evolving Software", "study_authors": "Marco Couto\r\nDaniel Maia\r\nJo\u00e3o Saraiva\r\nRui Pereira", "study_author_type": "Industry", "study_year": 2020.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3387906.3388628", "study_bibtex": "@inproceedings{Couto_2020,\r\n\tdoi = {10.1145/3387906.3388628},\r\n\turl = {https://doi.org/10.1145/3387906.3388628},\r\n\tyear = 2020,\r\n\tmonth = {jun},\r\n\tpublisher = {{ACM}},\r\n\tauthor = {Marco Couto and Daniel Maia and Jo{\\~{a}}o Saraiva and Rui Pereira},\r\n\ttitle = {On energy debt},\r\n\tbooktitle = {Proceedings of the 3rd International Conference on Technical Debt}\r\n}", "study_summary": null, "study_problem": "This paper introduces the concept of energy debt: a new metric, reflecting the implied cost in terms of energy consumption over time, of choosing a flawed implementation of a software system rather than a more robust, yet possibly time consuming, approach. A\r\nflawed implementation is considered to contain code smells, known to have a negative influence on the energy consumption.", "study_objective": "Similar to technical debt, if energy debt is not properly addressed, it can accumulate an energy \u201cinterest\u201d. This interest will keep increasing as new versions of the software are released, and eventually reach a point where the interest will be higher than the initial en-\r\nergy debt.", "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": "The next step towards estimating energy debt is to define a strategy to analyze the occurrence of such smells in a given release. The starting point for this task will be to use a common source code analysis tool capable of detecting code smells. There are several\r\nways to achieve this. For instance, SonarQube, which is a widel used tool for technical debt estimation, provides an API for defining detection rules for issues/smells of different languages.", "artifact_link": ["https://sonarqube.org"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Energy Debt"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Currently, we are concluding the construction of a catalog of re-\r\nported state-of-the-art energy code smells, and their known energy\r\ncosts per usage time, which can be considered when calculating\r\nenergy debt. Additionally, an extension of the concept of energy\r\ndebt is being developed within the SonarQube framework, where it\r\nwill support the inference of the context and number of detected\r\nsmells, based on our catalog.", "artifact_other_comments": "Important", "study_code": "308", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of Code Smells"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudXXTZX2hfoKBPZhEL8FhkOZi2edrAVxLGPGehEtn3-a_5Jk1i4VHF3F-i2P2nPh6Q"}, "420": {"selection_timestamp": "7/31/2022 14:00:51", "study_title": "Towards a taxonomy of code review smells", "study_authors": "Emre Do\u011fan\r\nEray T\u00fcz\u00fcn", "study_author_type": "Academia", "study_year": 2022.0, "study_venue": "Information and Software Technology", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1016/j.infsof.2021.106737", "study_bibtex": "@article{Do_an_2022,\r\n\tdoi = {10.1016/j.infsof.2021.106737},\r\n\turl = {https://doi.org/10.1016%2Fj.infsof.2021.106737},\r\n\tyear = 2022,\r\n\tmonth = {feb},\r\n\tpublisher = {Elsevier {BV}},\r\n\tvolume = {142},\r\n\tpages = {106737},\r\n\tauthor = {Emre Do{\\u{g}}an and Eray T\u00fcz\u00fcn},\r\n\ttitle = {Towards a taxonomy of code review smells},\r\n\tjournal = {Information and Software Technology}\r\n}", "study_summary": null, "study_problem": "In spite of minor differences in different platforms, the primary purpose of all these rules and practices leads to a faster and more effective code review process. Non-conformance of developers to this process does not only reduce the advantages of the code review but\r\ncan also introduce waste in later stages of the software development.", "study_objective": "The aim of this study is to provide an empirical understanding of the bad practices followed in the code review process, that are code review (CR) smells.", "study_results": null, "artifact_name": ["Not Cited"], "artifact_description": null, "artifact_link": ["https://doi.org/10.6084/m9.figshare.12890864."], "artifact_sdlc": ["Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Script", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Process Debt"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "A future direction would be to measure the impact of each smell on code quality in order to observe the bad effects of such practices quantitatively.\r\n\r\nAnother future work for this study is to implement some practical\r\ntools to detect the CR smells. After the term code smell is introduced\r\nby Kent Beck [94], several smell detection tools have been proposed in\r\norder to enhance software maintainability by automatically detecting\r\ncode smells [95]. Similarly, a detection tool for code review smells\r\nis essential in order to speed up the process and enhance the review\r\nquality.\r\n\r\nIn addition to smell detection, some tools/extensions can be\r\nuseful to avoid these smells (e.g., reminder mails for sleeping reviews,\r\nunreviewed/self-reviewed PR blocker etc.). The usage of such tools in\r\nthe software development teams can reduce the risk of wasting the\r\ndevelopers\u2019 effort and time.", "artifact_other_comments": "IMPORTANT", "study_code": "420", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of Code Review Smells"], "artifact_input": "Code Review History", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuff8vtAKUqMhFfsaGNO1T16LQ81FenPztJ8c9M3GRjFxfWhDKub3IyF9jZafPiLbGw"}, "206": {"selection_timestamp": "7/31/2022 14:27:33", "study_title": "Software Architecture Social Debt: Managing the Incommunicability Factor", "study_authors": "Damian A. Tamburri", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS", "study_venue_type": "Journal", "study_link": "http://doi.org/10.1109/TCSS.2018.2886433", "study_bibtex": "@article{Tamburri_2019,\r\n\tdoi = {10.1109/tcss.2018.2886433},\r\n\turl = {https://doi.org/10.1109%2Ftcss.2018.2886433},\r\n\tyear = 2019,\r\n\tmonth = {feb},\r\n\tpublisher = {Institute of Electrical and Electronics Engineers ({IEEE})},\r\n\tvolume = {6},\r\n\tnumber = {1},\r\n\tpages = {20--37},\r\n\tauthor = {Damian A. Tamburri},\r\n\ttitle = {Software Architecture Social Debt: Managing the Incommunicability Factor},\r\n\tjournal = {{IEEE} Transactions on Computational Social Systems}\r\n}", "study_summary": null, "study_problem": "Similarly, many practitioners have already experienced that there exists within software architectures a form of social debt, that is, the additional project cost connected to sociotechnical and organizational issues evident in or related to software architectures.", "study_objective": "This paper illustrates four recurrent antipatterns or community smells connected to such architectural social debt and outlines a means to measure the additional project cost connected to their underlying cause: decision incommunicability.", "study_results": null, "artifact_name": ["Understand"], "artifact_description": null, "artifact_link": ["https://scitools.com/feature/metrics/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "This paper contributions and discussions lead to the con-\r\nclusion that social debt and software architectures are tightly\r\nknit together and with technical debt as well and deserve\r\nfurther attention in the future.", "artifact_limitations": null, "artifact_gaps": "In addition, several points highlighted in this paper\r\nremain open, for example: 1) what is the full mapping between\r\nsoftware engineering economics concepts and the notion of\r\nsocial debt? 2) what is the role of interest repayment strategies\r\nas well as economic formulations around debt contraction\r\nand repayment as mapped to social debt? 3) what is the\r\nrelation between effort-estimation techniques, the consequent\r\norganizational structure decisions, and the emergence of social\r\ndebt?", "artifact_other_comments": null, "study_code": "206", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of structural dependencies"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuePcpaCQ7BtkK2nNGMflk1-7ojfcf8RUf78HfEnGriDwjsnYz_L-01bFhP1fwkSzw8"}, "253": {"selection_timestamp": "7/31/2022 14:47:33", "study_title": "Longitudinal Evaluation of Open-source Software Maintainability", "study_authors": "Arthur-Jozsef Molnar \r\nSimona Motogna", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Conference on Evaluation of Novel Approaches to Software Engineering", "study_venue_type": "Conference", "study_link": "http://doi.org/10.5220/0009393501200131", "study_bibtex": "@inproceedings{Molnar_2020,\r\n\tdoi = {10.5220/0009393501200131},\r\n\turl = {https://doi.org/10.5220%2F0009393501200131},\r\n\tyear = 2020,\r\n\tpublisher = {{SCITEPRESS} - Science and Technology Publications},\r\n\tauthor = {Arthur-Jozsef Molnar and Simona Motogna},\r\n\ttitle = {Longitudinal Evaluation of Open-source Software Maintainability},\r\n\tbooktitle = {Proceedings of the 15th International Conference on Evaluation of Novel Approaches to Software Engineering}\r\n}\r\n", "study_summary": null, "study_problem": null, "study_objective": "An important body of research exists linking these characteristics with software metrics, and proposing ways to automate quality assessment by aggregating software metric values into higher-level quality models. We employ the Maintainability Index, technical debt ratio and a maintainability model based on the ARiSA Compendium.", "study_results": null, "artifact_name": ["MetricsReloaded IntelliJ plugin ", "VizzMaintainance Eclipse plugin."], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Plugin", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "We aim to further study system size and complexity beyond line of code and class counts\r\nin order to improve our understanding of its relation with maintainability. In addition, we believe a crosssectional approach is also valuable, as it can improve our baseline by facilitating the study of a larger number of target applications.", "artifact_other_comments": "Check Arisa Compendium\r\nhttp://www.arisa.se/tools.php", "study_code": "253", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate code metrics"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudB7Ky3jdK9ktn26eF7o2ctdGrXNCEPIWTHfDbpYSxK0Ih6yQRKKlyhGiyfEB_PXqE"}, "272": {"selection_timestamp": "7/31/2022 14:55:19", "study_title": "Towards a Model-based Fuzzy Software Quality Metrics", "study_authors": "Omar Masmali\r\nOmar Badreddin", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Conference on Model-Driven Engineering and Software Development", "study_venue_type": "Conference", "study_link": "http://doi.org/10.5220/0008913701390148", "study_bibtex": "@inproceedings{Masmali_2020,\r\n\tdoi = {10.5220/0008913701390148},\r\n\turl = {https://doi.org/10.5220%2F0008913701390148},\r\n\tyear = 2020,\r\n\tpublisher = {{SCITEPRESS} - Science and Technology Publications},\r\n\tauthor = {Omar Masmali and Omar Badreddin},\r\n\ttitle = {Towards a Model-based Fuzzy Software Quality Metrics},\r\n\tbooktitle = {Proceedings of the 8th International Conference on Model-Driven Engineering and Software Development}\r\n}", "study_summary": null, "study_problem": "Quality metrics based on such notions often reply on rigid thresholds and are insensitive to the project\r\nunique context, such as development technologies, team size, and the desired code qualities. This challenge\r\noften manifest itself in inadequate quantification of code qualities and potentially numerous false positives\r\ncases.", "study_objective": "This paper presents a novel approach that formulates code quality metrics with thresholds that are\r\nderived from software design models.", "study_results": null, "artifact_name": ["Understand"], "artifact_description": null, "artifact_link": ["https://scitools.com/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "In\r\nfuture work, we are going to apply our metrics to a\r\nlarge number of projects implemented with different\r\nprogramming languages.", "artifact_other_comments": null, "study_code": "272", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate code metrics", "Generate UML diagrams"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuc3kDvlnO2wN-yeITmt_YhW2KPjoWebo7rlQ982fWACot5-oriZ0Dg5DTQAZsUyXDA"}, "351": {"selection_timestamp": "8/3/2022 15:51:06", "study_title": "Metrics to Measure Code Complexity Based on Software Design: Practical Evaluation", "study_authors": "Omar Masmali\r\nOmar Badreddin\r\nRahad khandoker", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "Future of Information and Communication Conference", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1007/978-3-030-73103-8_9", "study_bibtex": "@INCOLLECTION{Masmali2021-ps,\r\n  title     = \"Metrics to measure code complexity based on software design:\r\n               Practical evaluation\",\r\n  booktitle = \"Advances in Intelligent Systems and Computing\",\r\n  author    = \"Masmali, Omar and Badreddin, Omar and Khandoker, Rahad\",\r\n  publisher = \"Springer International Publishing\",\r\n  pages     = \"142--157\",\r\n  series    = \"Advances in intelligent systems and computing\",\r\n  year      =  2021,\r\n  address   = \"Cham\"\r\n}", "study_summary": null, "study_problem": "Unfortunately, Current complexity metrics are based on the number of model elements only, regardless of the complexity of those elements themselves.", "study_objective": "In this paper, we propose new code complexity metrics that are derived from its design. This\r\napproach ensures that the derived metrics are uniquely tailored for the software\r\nunder development, and the derived metrics are unique for each software module.", "study_results": null, "artifact_name": ["PMD", "inFusion", "JDeodorant", "JSpIRIT", "SonarQube", "Understand", "Visual Paradigm"], "artifact_description": "Calculate code metrics\r\nCalculate TD\r\nReverse Engineering", "artifact_link": ["nan"], "artifact_sdlc": ["Implementation"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Further, we found that the  time needed to fix the complex classes is much more than the time needed to fix classes with lower complexity value. The correlation between class complexity and technical debt is 0.61, which mean that higher complexity will decrease software maintainability.\r\n\r\nIn future work, we would like to expand our analysis to include more real-life software\r\nsystems from different domains. Moreover, we intend to further investigate the evolution\r\nof other code smells in codebases and the impact on system maintenance by using\r\nprecision, recall and f-measure [23].", "artifact_other_comments": "IMPORTANT\r\nIt seems that UML Models is a good direction to address TD in early stages", "study_code": "351", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Generate class from source code", "Calculate code metrics", "Calculate TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucl9iTJTpic4XvndxllbaVmUkpau-R42jykF1gO0XNxkTdZJzpciYvBqtx5jQMpC58"}, "426": {"selection_timestamp": "8/3/2022 21:42:20", "study_title": "The Known Unknowns: Discovering Trade-Offs Between Heterogeneous Code Changes", "study_authors": "Christos P. Lamprakos\r\nCharalampos Marantos\r\nLazaros Papadopoulos\r\nDimitrios Soudris", "study_author_type": "Academia", "study_year": 2022.0, "study_venue": " International Conference on Embedded Computer Systems", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1007/978-3-031-04580-6_23", "study_bibtex": "@incollection{Lamprakos_2022,\r\n\tdoi = {10.1007/978-3-031-04580-6_23},\r\n\turl = {https://doi.org/10.1007%2F978-3-031-04580-6_23},\r\n\tyear = 2022,\r\n\tpublisher = {Springer International Publishing},\r\n\tpages = {342--353},\r\n\tauthor = {Christos P. Lamprakos and Charalampos Marantos and Lazaros Papadopoulos and Dimitrios Soudris},\r\n\ttitle = {The Known Unknowns: Discovering Trade-Offs Between Heterogeneous Code Changes},\r\n\tbooktitle = {Lecture Notes in Computer Science}\r\n}", "study_summary": null, "study_problem": "Thus, a development team that cares for more than one non-functional requirement is facing the problem of unknown trade-offs; besides improving the quality on which the tool that generated each suggestion focuses, how would this code change, if implemented, affect the rest of the non-functional requirements?", "study_objective": "We develop an extensible empirical model, based on fuzzy sets, for the characterization of each suggestion\u2019s trade-offs. Finally, we present an intuitive visualization of said trade-offs, and suggest a method of utilizing them towards reliable decision-making.", "study_results": null, "artifact_name": ["SDK4ED"], "artifact_description": "Technical Debt Toolbox is responsible for monitoring and improving the appli-\r\ncation Maintainability. Its three main components include: Technical Debt Anal-\r\nysis, that analyses the entire projects\u2019s evolution, New Code, that analyzes the  commit history and proposes quality gates and Refactorings Suggestion.", "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Repayment", "Monitoring", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "426", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Code Analysis", "Refactoring Suggestions", "Commit Analysis"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudsclvPKSiv-tP3E7DMciLtphEQpWHaBKyPS6IwGg_pxmfKqhqHPhWP3q-kIkZCA9Q"}, "146": {"selection_timestamp": "8/3/2022 22:39:48", "study_title": "Challenges in Assessing Technical Debt based on Dynamic Runtime Data", "study_authors": "Marcus Ciolkowski\r\nLiliana Guzman\r\nAdam Trendowicz\r\nAnna Maria Vollmer", "study_author_type": "Industry", "study_year": 2018.0, "study_venue": "Euromicro Conference on Software Engineering and Advanced Applications", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SEAA.2018.00078", "study_bibtex": "@inproceedings{Ciolkowski2018,\r\n  doi = {10.1109/seaa.2018.00078},\r\n  url = {https://doi.org/10.1109/seaa.2018.00078},\r\n  year = {2018},\r\n  month = aug,\r\n  publisher = {{IEEE}},\r\n  author = {Marcus Ciolkowski and Liliana Guzman and Adam Trendowicz and Anna Maria Vollmer},\r\n  title = {Challenges in Assessing Technical Debt Based on Dynamic Runtime Data},\r\n  booktitle = {2018 44th Euromicro Conference on Software Engineering and Advanced Applications ({SEAA})}\r\n}", "study_summary": null, "study_problem": "Existing definitions and metrics of technical debt\r\n(TD) tend to focus on static properties of software artifacts, in\r\nparticular on code measurement. Our experience from software\r\nrenovation projects is that dynamic aspects \u2014 runtime indicators\r\nof TD \u2014 often play a major role.", "study_objective": "In this position paper, we present insights and solution ideas gained from numerous\r\nsoftware renovation projects at QAware and from a series of interviews held as part of the ProDebt research project.", "study_results": null, "artifact_name": ["ProDebt"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["nan"], "artifact_sdlc_evidence": null, "artifact_type": null, "artifact_type_evidence": null, "artifact_td_activities": ["nan"], "artifact_td_activities_evidence": null, "artifact_td_type": ["nan"], "artifact_td_type_evidence": null, "artificat_evidence_level": null, "artifact_evidence_level_evidence": null, "artifact_maturity": null, "artifact_maturity_level_evidence": null, "artifact_advantages": "Continuous monitoring of dynamic aspects of TD can supplement static measurement. This is becomming increasingly important in the context of DevOps and CloudNative approaches.There", "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": "IMPORTANT", "study_code": "146", "artifact_vendor": null, "artifact_level_automation": null, "artifact_level_automation_evidence": null, "artifact_license": null, "artifact_license_evidence": null, "artifact_automation_provided": ["nan"], "artifact_input": null, "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuf75LzxeeinGIXOFV1zp1zMK8N5XDfzDgak8H34JGNZ4vYmVCdQmXidLmZnsBGABeE"}, "190": {"selection_timestamp": "8/4/2022 16:59:01", "study_title": "Technical Debt in Model Transformation Specifications", "study_authors": "Kevin Lano\r\nShekoufeh Kolahdouz-Rahimi\r\nMohammadreza Sharbaf\r\nHessa Alfraihi", "study_author_type": "Academia", "study_year": 2018.0, "study_venue": "International Conference on Theory and Practice of Model Transformations", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1007/978-3-319-93317-7_6", "study_bibtex": "@incollection{Lano2018,\r\n  doi = {10.1007/978-3-319-93317-7_6},\r\n  url = {https://doi.org/10.1007/978-3-319-93317-7_6},\r\n  year = {2018},\r\n  publisher = {Springer International Publishing},\r\n  pages = {127--141},\r\n  author = {Kevin Lano and Shekoufeh Kolahdouz-Rahimi and Mohammadreza Sharbaf and Hessa Alfraihi},\r\n  title = {Technical Debt in Model Transformation Specifications},\r\n  booktitle = {Theory and Practice of Model Transformation}\r\n}", "study_summary": null, "study_problem": null, "study_objective": "Based on these measures we identify significant differences in the level\r\nand kinds of technical debt in different MT languages, and we propose\r\nways in which TD can be reduced.", "study_results": null, "artifact_name": ["PMD"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "The identification of design flaws can help MT specifiers to improve their transformations and to prioritise refactoring or other quality improvement work on their transformations.", "artifact_other_comments": "IMPORTANT\r\n\r\nUses UML", "study_code": "190", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate Code metrics"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudhkuC9LNb2Qai9ebbCQHOK3-MbbOe4WhoqyCR2ZS8_hMLxCf42DTSpG18hZU0oqMc"}, "235": {"selection_timestamp": "8/4/2022 17:13:04", "study_title": "Towards Surgically-Precise Technical Debt Estimation: Early Results and Research Roadmap", "study_authors": "Valentina Lenarduzzi\r\nAntonio Martini\r\nDavide Taibi\r\nDamian Andrew Tamburri", "study_author_type": null, "study_year": 2019.0, "study_venue": "International Workshop on Machine Learning Techniques for Software Quality Evaluation", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3340482.3342747", "study_bibtex": "@INPROCEEDINGS{Lenarduzzi2019-hx,\r\n  title           = \"Towards surgically-precise technical debt estimation:\r\n                     early results and research roadmap\",\r\n  booktitle       = \"Proceedings of the 3rd {ACM} {SIGSOFT} International\r\n                     Workshop on Machine Learning Techniques for Software\r\n                     Quality Evaluation - {MaLTeSQuE} 2019\",\r\n  author          = \"Lenarduzzi, Valentina and Martini, Antonio and Taibi,\r\n                     Davide and Tamburri, Damian Andrew\",\r\n  publisher       = \"ACM Press\",\r\n  year            =  2019,\r\n  address         = \"New York, New York, USA\",\r\n  copyright       = \"http://www.acm.org/publications/policies/copyright\\_policy\\#Background\",\r\n  conference      = \"the 3rd ACM SIGSOFT International Workshop\",\r\n  location        = \"Tallinn, Estonia\"\r\n}\r\n", "study_summary": null, "study_problem": "We aim to understand whether, by harnessing approximate, data-driven, machine-learning approaches it is possible to improve the current techniques for technical debt estimation, as represented by a top industry quality analysis tool such as SonarQube.", "study_objective": "For the sake of simplicity, we focus on relatively simple regression modelling techniques and apply them to modelling the additional project cost connected to the sub-optimal\r\nconditions existing in the projects under study.", "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Prevention", "Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Future works include the application of this approach to a larger data-set and the implementation of the approach on different type of issues, including code smells, rules detected by SonarQube, but also rules detected by other tools such as BetterCodeHub, Coverity Scan and others.", "artifact_other_comments": "IMPORTANT", "study_code": "235", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Estimate technical debt"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueoW_QPRgaVG25DW3q4s0i2Z2KtyF6t4D2bqXleyODDms5KbM0757-FOxTLDn--wzQ"}, "266": {"selection_timestamp": "8/4/2022 17:27:28", "study_title": "A comparison of quality flaws and technical debt in model transformation specifications", "study_authors": "Shekoufeh Kolahdouz-Rahimi\r\nKevin Lano\r\nMohammadreza Sharbaf\r\nMeysam Karimi\r\nHessa Alfraihi", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "The Journal of Systems and Software", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1016/j.jss.2020.110684", "study_bibtex": "@ARTICLE{Kolahdouz-Rahimi2020-bq,\r\n  title     = \"A comparison of quality flaws and technical debt in model\r\n               transformation specifications\",\r\n  author    = \"Kolahdouz-Rahimi, Shekoufeh and Lano, Kevin and Sharbaf,\r\n               Mohammadreza and Karimi, Meysam and Alfraihi, Hessa\",\r\n  journal   = \"J. Syst. Softw.\",\r\n  publisher = \"Elsevier BV\",\r\n  volume    =  169,\r\n  number    =  110684,\r\n  pages     = \"110684\",\r\n  month     =  nov,\r\n  year      =  2020,\r\n  language  = \"en\"\r\n}", "study_summary": null, "study_problem": null, "study_objective": null, "study_results": null, "artifact_name": ["PMD"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "The identification of quality flaws can help MT specifiers to improve their transformations and to prioritise refactoring or other quality improvement work on their transformations. More generally, by identifying the characteristics of quality flaws in transformations, we can enable developers to improve the quality of MT specifications.", "artifact_other_comments": "IMPORTANT\r\nModel transformation", "study_code": "266", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate code metrics"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueNPV3mZVXCC919E52jwbOwJ0CGFj7ILlDVArwLRaXfevNGMa7x-lbEwWr9sYQ2A04"}, "299": {"selection_timestamp": "8/5/2022 13:51:26", "study_title": "ATDx: Building an Architectural Technical Debt Index", "study_authors": "Roberto Verdecchia\r\nPatricia Lago\r\nIvano Malavolta\r\nIpek Ozkaya", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Conference on Evaluation of Novel Approaches to Software Engineering", "study_venue_type": "Conference", "study_link": "http://doi.org/10.5220/0009577805310539", "study_bibtex": "@INPROCEEDINGS{Verdecchia2020-xh,\r\n  title           = \"{ATDx}: Building an Architectural Technical Debt Index\",\r\n  booktitle       = \"Proceedings of the 15th International Conference on\r\n                     Evaluation of Novel Approaches to Software Engineering\",\r\n  author          = \"Verdecchia, Roberto and Lago, Patricia and Malavolta,\r\n                     Ivano and Ozkaya, Ipek\",\r\n  publisher       = \"SCITEPRESS - Science and Technology Publications\",\r\n  year            =  2020,\r\n  conference      = \"15th International Conference on Evaluation of Novel\r\n                     Approaches to Software Engineering\",\r\n  location        = \"Prague, Czech Republic\"\r\n}", "study_summary": null, "study_problem": "Over the years numerous approaches have been proposed to detect particular types of ATD at a refined level of granularity via source code analysis. Nevertheless, how to gain an encompassing overview of the ATD present in a software-intensive system is still an open question.", "study_objective": "In this study, we present a multi-step approach designed to build an ATD index (ATDx), which provides insights into a set of ATD dimensions building upon existing architectural rules by leveraging statistical analysis.", "study_results": null, "artifact_name": ["ATDx", "SonarQube"], "artifact_description": "ATDx aims to provide a birds-eye view of the ATD present in a software-intensive system by analyzing the set of architectural rules ART supported by an analysis tool T, and subsequently aggregating the analysis results into different ATD dimensions ATDDT . Intuitively, starting from an already available large-scale dataset of ART executions NORMT and a System Under Analysis SUA, ATDx performs a statistical analysis of all elements in NORM for detecting anomalous occurrences of architectural rule violations in SUA.", "artifact_link": ["https://github.com/ATDindeX/ATDx"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "Specifically, the adoption of ATDx, rather than imposing a technological constraint its own tools and practices, is intended to leverage already deployed analysis tools, hence lowering the effort required for its adoption.", "artifact_limitations": "Dependence of a dataset", "artifact_gaps": null, "artifact_other_comments": "IMPORTANT", "study_code": "299", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate ATD index", "Identify ATD"], "artifact_input": "Data generated by other tools (e.g., Sonarqub)", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucXdgQlA-rLaCPo4jNtW_adjccEolEokUXMffc9WP7zcSp_d-gAT43-QP44dRtlHVU"}, "303": {"selection_timestamp": "8/5/2022 14:35:47", "study_title": "The Quest for Introducing Technical Debt Management in a Large-Scale Industrial Company", "study_authors": "Somayeh Malakuti\r\nSergey Ostroumov", "study_author_type": "Industry", "study_year": 2020.0, "study_venue": " European Conference on Software Architecture", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1007/978-3-030-58923-3_20", "study_bibtex": "@INCOLLECTION{Malakuti2020-cr,\r\n  title     = \"The quest for introducing technical debt management in a\r\n               large-scale industrial company\",\r\n  booktitle = \"Software Architecture\",\r\n  author    = \"Malakuti, Somayeh and Ostroumov, Sergey\",\r\n  publisher = \"Springer International Publishing\",\r\n  pages     = \"296--311\",\r\n  series    = \"Lecture notes in computer science\",\r\n  year      =  2020,\r\n  address   = \"Cham\"\r\n}", "study_summary": null, "study_problem": "Although the classical steps to perform technical debt management are known, in a study that we have been performing in a large-scale industrial company as our client, we real-\r\nized that finding a starting point, which leads to the desired outcome, is in fact a major challenge.", "study_objective": "This paper elaborates on various causes that we have identified for this challenge, and discusses our stepwise approach to address them so that the software quality can be improved.", "study_results": null, "artifact_name": ["Lattix", "Understand", "TeamScale", "CppDepend"], "artifact_description": null, "artifact_link": ["https://www.lattix.com/", "https://www.cqse.eu/en/products/teamscale/landing/", "https://www.cppdepend.com/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Repayment", "Priorization", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Applications", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "we will continue assessing and adjusting our current methodology based on the lessons that we learnt along the way. In addition, we would like to adopt existing metrics and invest on various company-specific metrics to monitor quality improvement trends at various levels such as planning, architecture, code, and testing.", "artifact_other_comments": "IMPORTANT\r\nLarge-Scale Industrial System", "study_code": "303", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Commercial with free trial", "artifact_license_evidence": null, "artifact_automation_provided": ["Static Code Analysis", "Architecture Reengineering"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuctDD_ckWwmGNCOKeAM8OjfFoV7Yo9Moy37A7WSEbiyHC1G95a6rXGrOYIXtFD-HZ0"}, "339": {"selection_timestamp": "8/5/2022 15:04:34", "study_title": "Metamodel deprecation to manage technical debt in model co-evolution", "study_authors": "Ludovico Iovino\r\nAmleto Di Salle\r\nDavide Di Ruscio\r\nAlfonso Pierantonio", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3417990.3419625", "study_bibtex": "@INPROCEEDINGS{Iovino2020-qv,\r\n  title      = \"Metamodel deprecation to manage technical debt in model\r\n                co-evolution\",\r\n  booktitle  = \"Proceedings of the 23rd {ACM/IEEE} International Conference on\r\n                Model Driven Engineering Languages and Systems: Companion\r\n                Proceedings\",\r\n  author     = \"Iovino, Ludovico and Di Salle, Amleto and Di Ruscio, Davide and\r\n                Pierantonio, Alfonso\",\r\n  publisher  = \"ACM\",\r\n  month      =  oct,\r\n  year       =  2020,\r\n  address    = \"New York, NY, USA\",\r\n  conference = \"MODELS '20: ACM/IEEE 23rd International Conference on Model\r\n                Driven Engineering Languages and Systems\",\r\n  location   = \"Virtual Event Canada\"\r\n}", "study_summary": null, "study_problem": "Analogously to other software forms, metamodels can evolve\u2014consequently, the validity of existing artifacts might be compromised. Coupled evolution provides techniques for restoring artifacts\u2019 validity in response to metamodel evolution.", "study_objective": "In this paper, we propose using deprecation in metamodeling to mitigate the difficulties in performing a class of adaptations that must be operated manually.", "study_results": null, "artifact_name": ["Repository Evaluation ToolChain"], "artifact_description": null, "artifact_link": ["Given a set of metamodels in input, the toolchain can generate a CSV file reporting several characteristics of the analyzed metamodels i.e. possible well-formedness violations (and related severity) and the values of quality metrics automatically measured on the input metamodels."], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Monitoring", "Measurement", "Identification", "Analysis"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "It means that we plan to support visualization and deprecation checker also for existing transformations.", "artifact_other_comments": "Model Driven could be a possibility to address automation in early stages", "study_code": "339", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate metrics and violations on metamodels"], "artifact_input": "Metamodels", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueBBlMc4jlV5Oug04At4JSL-rd75Khb4Q0ZX7YlB5zqpdmU3bg6xXSTMDTDCJglbF0"}, "369": {"selection_timestamp": "8/5/2022 15:22:41", "study_title": "The Need for Holistic Technical Debt Management across the Value Stream: Lessons Learnt and Open Challenges", "study_authors": "Somayeh Malakuti\r\nJens Heuschkel", "study_author_type": "Industry", "study_year": 2021.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/1122445.1122456", "study_bibtex": "@INPROCEEDINGS{Malakuti2021-jd,\r\n  title           = \"The need for holistic technical debt management across the\r\n                     value stream: Lessons learnt and open challenges\",\r\n  booktitle       = \"2021 {IEEE/ACM} International Conference on Technical Debt\r\n                     ({TechDebt})\",\r\n  author          = \"Malakuti, Somayeh and Heuschkel, Jens\",\r\n  publisher       = \"IEEE\",\r\n  month           =  may,\r\n  year            =  2021,\r\n  copyright       = \"https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html\",\r\n  conference      = \"2021 IEEE/ACM International Conference on Technical Debt\r\n                     (TechDebt)\",\r\n  location        = \"Madrid, Spain\"\r\n}", "study_summary": null, "study_problem": "Despite multiple years of research on technical debt management, our in-\r\ndustrial experience shows that introducing systematic technical debt management in a large-scale company is very challenging.", "study_objective": "To identify the challenges, we provide a conceptual framework for holistic debt management across the product development value stream, which takes multiple categories of debt and their interplays into account. We use this framework to identify multiple challenges that are still open to be explored by the research community.", "study_results": null, "artifact_name": ["Lattix", "SonarQube"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Monitoring", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "A taxonomy of debt categories and their relations\r\nSystematic management of each debt category\r\nSystematic management of debt relations (IMPORTANT)\r\nIntegrated debt management processes\r\nInsufficient objective measures to fill the communication gap", "artifact_other_comments": "IMPORTANT TO ANSWER ABOUT SDLC", "study_code": "369", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification and Monitoring of ATD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueFjqQ7kaZHmuF6TpWKbLOXDzpAalD2BceJJ2WGjzMs1w26UO0Zn0QI0hVcvnw1McY"}, "402": {"selection_timestamp": "8/5/2022 16:00:06", "study_title": "Building and evaluating a theory of architectural technical debt in software-intensive systems", "study_authors": "Roberto Verdecchia\r\nPhilippe Kruchten\r\nPatricia Lago\r\nIvano Malavolta", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "The Journal of Systems and Software", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1016/j.jss.2021.110925", "study_bibtex": "@ARTICLE{Verdecchia2021-as,\r\n  title     = \"Building and evaluating a theory of architectural technical debt\r\n               in software-intensive systems\",\r\n  author    = \"Verdecchia, Roberto and Kruchten, Philippe and Lago, Patricia\r\n               and Malavolta, Ivano\",\r\n  journal   = \"J. Syst. Softw.\",\r\n  publisher = \"Elsevier BV\",\r\n  volume    =  176,\r\n  number    =  110925,\r\n  pages     = \"110925\",\r\n  month     =  jun,\r\n  year      =  2021,\r\n  copyright = \"http://creativecommons.org/licenses/by/4.0/\",\r\n  language  = \"en\"\r\n}", "study_summary": null, "study_problem": "While other types of debt, such as code-level technical debt, can be readily detected by static analyzers, and often be refactored with minimal or only incremental efforts, architectural debt is hard to be identified, of wide-ranging remediation cost, daunting, and often avoided.", "study_objective": "In this study, we aim at developing a better understanding of how software development organizations conceptualize architectural debt, and how they deal with it.", "study_results": null, "artifact_name": ["Clang Tidy", "SonarQube", "Ndepend"], "artifact_description": null, "artifact_link": ["https://clang.llvm.org/extra/clang-tidy.", "https://www.sonarqube.org.", "https://www.ndepend.com/."], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": "ATD management strategies can also be supported by tools,\r\ne.g., static analyzers and linters, such as Clang Tidy2\r\n\r\nand Sonar-\r\nQube.3 Nevertheless, only in unique instances practitioners used\r\n\r\ntools to detect architectural debt issues, such as component de-\r\npendency anti-patterns via NDepend.4\r\n\r\nIn most of the cases, ATD\r\nmanagement strategies are not supported by any tools, possibly\r\ndue to their perceived immaturity or usefulness:", "artifact_gaps": "Another interesting research di-\r\nrection is about the definition of methods and techniques to\r\n\r\n(i) automatically identify the components of the system which\r\nrequire immediate attention from the ATD perspective (we call\r\nthem ATD hotspots) and (ii) recommend developers which actions\r\n\r\nshould be taken for paying off the ATD accumulated in those com-\r\nponents.", "artifact_other_comments": null, "study_code": "402", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Static Analysis", "Calculte metrics"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucr6zWA9owkrZoD9k2lJbxqZY_nVLEqN32xtcplfdsgOqFyrKv6p-IjZ-KgvooTLww"}, "67": {"selection_timestamp": "8/5/2022 19:53:08", "study_title": "Pragmatic Approach for Managing Technical Debt in Legacy Software Project", "study_authors": "Rajeev Kumar Gupta\r\nPrabhulinga Manikreddy\r\nSandesh Naik\r\nArya K", "study_author_type": "Academia", "study_year": 2016.0, "study_venue": "India Software Engineering Conference", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/2856636.2856655", "study_bibtex": "@INPROCEEDINGS{Gupta2016-kv,\r\n  title           = \"Pragmatic approach for managing technical debt in legacy\r\n                     software project\",\r\n  booktitle       = \"Proceedings of the 9th India Software Engineering\r\n                     Conference\",\r\n  author          = \"Gupta, Rajeev Kumar and Manikreddy, Prabhulinga and Naik,\r\n                     Sandesh and Arya, K\",\r\n  publisher       = \"ACM\",\r\n  month           =  feb,\r\n  year            =  2016,\r\n  address         = \"New York, NY, USA\",\r\n  copyright       = \"http://www.acm.org/publications/policies/copyright\\_policy\\#Background\",\r\n  conference      = \"ISEC '16: 9th India Software Engineering Conference\",\r\n  location        = \"Goa India\"\r\n}\r\n", "study_summary": null, "study_problem": null, "study_objective": "In this paper, we are describing a case study of managing\r\ntechnical debt on a legacy project referred here as Global\r\nConfigurator Project (GCP) using pragmatic approach. The paper\r\npresents holistic lifecycle approach with four stages and various\r\npractices in each stage for managing technical debt.", "study_results": null, "artifact_name": ["GDI handle", "IBM Rational Purify", "Coverity", "Findbugs", "Simian", "source monitor", "Perfmon", "Apache JMeter", "PCLint", "FxCop", "Intel thread checker", "Cppcheck"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "67", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Static Analysis", "Dynamic Analysis"], "artifact_input": "Source Code\r\nExecutition Data (E.g., memory usage)", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudPtQOPlQMKp2_pZMUam2NTmEuAu9CjabWa2iRpGNRwTEvUzAW3rTiEZV-huL2waQk"}, "124": {"selection_timestamp": "8/5/2022 20:00:32", "study_title": "Who is Producing More Technical Debt? A Personalized Assessment of TD Principal", "study_authors": "Theodoros Amanatidis\r\nAlexander Chatzigeorgiou\r\nApostolos Ampatzoglou\r\nIoannis Stamelos", "study_author_type": "Academia", "study_year": 2017.0, "study_venue": "International Conference on Agile Software Development", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3120459.3120464", "study_bibtex": "@INPROCEEDINGS{Amanatidis2017-yd,\r\n  title           = \"Who is producing more technical debt?\",\r\n  booktitle       = \"Proceedings of the {XP2017} Scientific Workshops\",\r\n  author          = \"Amanatidis, Theodoros and Chatzigeorgiou, Alexander and\r\n                     Ampatzoglou, Apostolos and Stamelos, Ioannis\",\r\n  publisher       = \"ACM\",\r\n  month           =  may,\r\n  year            =  2017,\r\n  address         = \"New York, NY, USA\",\r\n  copyright       = \"http://www.acm.org/publications/policies/copyright\\_policy\\#Background\",\r\n  conference      = \"XP '17 Workshops: Proceedings of the Scientific Workshops\r\n                     of XP2017\",\r\n  location        = \"Cologne Germany\"\r\n}", "study_summary": null, "study_problem": "In the light of\r\nextremely high maintenance costs, efficient software project\r\nmanagement cannot occur without recognizing the relation\r\nbetween developer characteristics and the tendency to evoke\r\nviolations that lead to TD.", "study_objective": "In this paper, we investigate three\r\nresearch questions related to the distribution of TD among the\r\ndevelopers of a software project, the types of violations caused by\r\neach developer and the relation between developers\u2019 maturity and\r\nthe tendency to accumulate TD.", "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "124", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate code metrics", "Calculate TD"], "artifact_input": "Source Code", "selection_response_link": null}, "311": {"selection_timestamp": "8/8/2022 14:17:54", "study_title": "Technical debt in procedural model transformation languages", "study_authors": "Shekoufeh Kolahdouz-Rahimi\r\nKevin Lano\r\nMeysam Karimi", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Journal of Computer Languages", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1016/j.cola.2020.100971", "study_bibtex": "@article{Kolahdouz_Rahimi_2020,\r\n\tdoi = {10.1016/j.cola.2020.100971},\r\n\turl = {https://doi.org/10.1016%2Fj.cola.2020.100971},\r\n\tyear = 2020,\r\n\tmonth = {aug},\r\n\tpublisher = {Elsevier {BV}},\r\n\tvolume = {59},\r\n\tpages = {100971},\r\n\tauthor = {Shekoufeh Kolahdouz-Rahimi and Kevin Lano and Meysam Karimi},\r\n\ttitle = {Technical debt in procedural model transformation languages},\r\n\tjournal = {Journal of Computer Languages}\r\n}\r\n", "study_summary": null, "study_problem": "Model transformations (MT) are a significant element of model-based and model-driven engineering approaches. Hence their quality is important for their effectiveness for use in such developments. The concept of technical debt (TD) estimates the impact of quality flaws on the maintenance costs of software artefacts.", "study_objective": "In this paper we define a quality model for model transformation languages, and define TD indicators for MT based on this model.", "study_results": null, "artifact_name": ["PMD", "SonarQube"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "An interesting area for future work is quality analysis and technical debt estimation for domain-specific languages. An approach using automated synthesis of SonarQube extensions to evaluate metrics for DSLs coded in Xtext is given by [29]. Another work on quality analysis of DSLs is [30], this also uses size and complexity criteria of DSL models\r\nand transformation in its evaluation framework. In addition, we intend to expand our study with more cases, and to implement analysis tools for QVT-O.", "artifact_other_comments": "IMPORTANT\r\nModel transformation", "study_code": "311", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate code metrics"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufmn1FKomUu9z1CAWT9asQVj0whfrH8nS2dt3JS7pohmiR8VbC_2VlKgcKK9glmesk"}, "368": {"selection_timestamp": "8/8/2022 14:38:25", "study_title": "Assessing Smart Contracts Security Technical Debts", "study_authors": "Sabreen Ahmadjee\r\nCarlos Mera-G\u00f3mez\r\nRami Bahsoon", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/TechDebt52882.2021.00010", "study_bibtex": "@inproceedings{Ahmadjee_2021,\r\n\tdoi = {10.1109/techdebt52882.2021.00010},\r\n\turl = {https://doi.org/10.1109%2Ftechdebt52882.2021.00010},\r\n\tyear = 2021,\r\n\tmonth = {may},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Sabreen Ahmadjee and Carlos Mera-Gomez and Rami Bahsoon},\r\n\ttitle = {Assessing Smart Contracts Security Technical Debts},\r\n\tbooktitle = {2021 {IEEE}/{ACM} International Conference on Technical Debt ({TechDebt})}\r\n}", "study_summary": null, "study_problem": "Experience shows that many deployed contracts are vulnerable to exploitation due to their poor design, which allows attackers to steal valuable assets from the involved parties. Therefore, an assessment approach that allows developers to recognise the consequences of deploying vulnerable contracts is needed.", "study_objective": "In this paper, we propose a debt-aware approach for assessing security design vulnerabilities in smart contracts.", "study_results": null, "artifact_name": ["Slither", "SmartCheck", "Securify", "Mythril", "Manticore", "sFuzz", "Solhint", "Ethlint", "Mythos"], "artifact_description": null, "artifact_link": ["https://github.com/crytic/slither", "https://github.com/eth-sri/securify2", "https://github.com/smartdec/smartcheck", "https://github.com/duaraghav8/Ethlint", "https://github.com/trailofbits/manticore", "https://github.com/protofire/solhint", "https://contract.guardstrike.com/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Security TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "368", "artifact_vendor": null, "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify security debt"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueMr6YL9vgRNzma289DpW1O41tFckUV8LYv5XQoeUTTrkZ2V2v9uDIb7hv0IV1kSxc"}, "59": {"selection_timestamp": "8/8/2022 14:43:04", "study_title": "Technical Debt Prioritization using Predictive Analytics", "study_authors": "Zadia Codabux\r\nByron J. Williams", "study_author_type": "Academia", "study_year": 2016.0, "study_venue": "International Conference on Software Engineering Companion", "study_venue_type": "Conference", "study_link": "http://dx.doi.org/10.1145/2889160.2892643", "study_bibtex": "@inproceedings{Codabux_2016,\r\n\tdoi = {10.1145/2889160.2892643},\r\n\turl = {https://doi.org/10.1145%2F2889160.2892643},\r\n\tyear = 2016,\r\n\tmonth = {may},\r\n\tpublisher = {{ACM}},\r\n\tauthor = {Zadia Codabux and Byron J. Williams},\r\n\ttitle = {Technical debt prioritization using predictive analytics},\r\n\tbooktitle = {Proceedings of the 38th International Conference on Software Engineering Companion}\r\n}", "study_summary": null, "study_problem": "Developers or project managers face problems to decide which debt\r\nis higher priority or more \u201cproblematic\u201d and which one needs to be\r\naddressed first. This decision-making process is not standardized\r\nand is currently context dependent in most organizations.", "study_objective": "This paper bridge this gap by proposing a framework which makes use of a plethora of techniques ranging from data mining to prediction and decision models that project managers can use in their decision-making process to determine which technical debt is more critical and should be addressed first.", "study_results": null, "artifact_name": ["Understand"], "artifact_description": null, "artifact_link": ["https://scitools.com/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Priorization", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "59", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculation of metrics"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufcpwgjmAM3UFfEF-rrSq4cnxBTlK0wHrzOc0GGyIp8V0ioYO2o8Y2zLmVxHad1nWw"}, "281": {"selection_timestamp": "8/8/2022 15:02:54", "study_title": "How Junior Developers Deal with Their Technical Debt?", "study_authors": "Fabian Gilson\r\nMiguel Morales-Trujillo\r\nMoffat Mathews", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3387906.3388624", "study_bibtex": "@inproceedings{Gilson_2020,\r\n\tdoi = {10.1145/3387906.3388624},\r\n\turl = {https://doi.org/10.1145%2F3387906.3388624},\r\n\tyear = 2020,\r\n\tmonth = {jun},\r\n\tpublisher = {{ACM}},\r\n\tauthor = {Fabian Gilson and Miguel Morales-Trujillo and Moffat Mathews},\r\n\ttitle = {How junior developers deal with their technical debt?},\r\n\tbooktitle = {Proceedings of the 3rd International Conference on Technical Debt}\r\n}", "study_summary": null, "study_problem": "Most software systems suffer from technical debt at some point so that dedicated tools and metrics have been developed to monitor such debt.", "study_objective": "In this empirical study, we observed and surveyed Scrum development\r\nteams composed of experienced students in order to understand\r\ntheir quality-related processes on a year-long academic project.", "study_results": null, "artifact_name": ["SonarQube", "Sonarlint", "ESLint", "Findbugs", "Checkstyle"], "artifact_description": null, "artifact_link": ["https://eslint.org"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Plugin", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": "IMPORTANT", "study_code": "281", "artifact_vendor": null, "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Static code analysis"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufaLDi0SlkD-682nj5PowuppiOXQcVVcAXqFjOL03uj7Pox3JPYxY7q0zuL3HSZXoc"}, "286": {"selection_timestamp": "8/8/2022 15:11:46", "study_title": "How long do Junior Developers take to Remove Technical Debt Items?", "study_authors": "Valentina Lenarduzzi\r\nVladimir Mandi\u0107\r\nAndrej Katin\r\nDavide Taibi", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Symposium on Empirical Software Engineering and Measurement", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3382494.3422169", "study_bibtex": "@inproceedings{Lenarduzzi_2020,\r\n\tdoi = {10.1145/3382494.3422169},\r\n\turl = {https://doi.org/10.1145%2F3382494.3422169},\r\n\tyear = 2020,\r\n\tmonth = {oct},\r\n\tpublisher = {{ACM}},\r\n\tauthor = {Valentina Lenarduzzi and Vladimir Mandi{\\'{c}} and Andrej Katin and Davide Taibi},\r\n\ttitle = {How long do Junior Developers take to Remove Technical Debt Items?},\r\n\tbooktitle = {Proceedings of the 14th {ACM} / {IEEE} International Symposium on Empirical Software Engineering and Measurement ({ESEM})}\r\n}", "study_summary": null, "study_problem": null, "study_objective": "We aim at understating which SonarQube TD items junior developers prioritize during the refactoring and how long they take to refactor them.", "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Second, we will better investigate the perceived severity of each rule, so as to understand if there is common agreement on the classification, or if it is completely context-dependent.", "artifact_other_comments": null, "study_code": "286", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Static Code Analysis"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueo8dhRMsn63xvGMYVlsA7ikfPbHCW11KulImJnWtVNPk9gZ4ZEFVIvvuIcNyNOsBM"}, "413": {"selection_timestamp": "8/8/2022 15:26:51", "study_title": "Self-admitted technical debt practices: a comparison between industry and open-source", "study_authors": "Fiorella Zampetti\r\nGianmarco Fucci\r\nAlexander Serebrenik\r\nMassimiliano Di Penta", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "Empirical Software Engineering", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1007/s10664-021-10031-3", "study_bibtex": "@article{Zampetti_2021,\r\n\tdoi = {10.1007/s10664-021-10031-3},\r\n\turl = {https://doi.org/10.1007%2Fs10664-021-10031-3},\r\n\tyear = 2021,\r\n\tmonth = {sep},\r\n\tpublisher = {Springer Science and Business Media {LLC}},\r\n\tvolume = {26},\r\n\tnumber = {6},\r\n\tauthor = {Fiorella Zampetti and Gianmarco Fucci and Alexander Serebrenik and Massimiliano Di Penta},\r\n\ttitle = {Self-admitted technical debt practices: a comparison between industry and open-source},\r\n\tjournal = {Empirical Software Engineering}\r\n}", "study_summary": null, "study_problem": "While previous studies have investigated SATD management and its relationship with software quality, there is little understanding of the extent and circumstances to which developers admit TD.", "study_objective": "This paper reports the results of a study in which we asked developers from industry and open-source about their practices in annotating source code and other artifacts for self-admitting TD.", "study_results": null, "artifact_name": ["todo", "Probot (framework to develop apps for automate github workflow)"], "artifact_description": "todo is a GitHub App that automagically creates new issues based on comments and keywords in your code when you push it to GitHub. Check out the demo below.", "artifact_link": ["https://todo.jasonet.co/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Bot", "artifact_type_evidence": null, "artifact_td_activities": ["Representation/Documentation", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Researchers should provide mechanisms to help developers write\r\nstandardized, easy to understand SATD comments, as well as enacting a notification\r\nmechanism similar to code review tools or issue trackers.\r\n\r\nResearchers should expand studies of SATD beyond the source code.\r\n\r\nImplication 1a: To reduce the barriers to manual annotation of TD, tools should be able\r\nto recognize situations where TD should be admitted.\r\n\r\nTools should support co-evolution of annotations with the source\r\ncode as well as automatic documentation generation and possibly automatic machine\r\ntranslation from source code to comments.\r\n\r\nSATD may be related to functional behavior, and not only to maintain-\r\nability problems.", "artifact_other_comments": "IMPORTANT", "study_code": "413", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Generate Git Issues based on SATD"], "artifact_input": "Source Code\r\nCode Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueDeNhfixWCM35gsAXJmdJVelTsj2RxYPDmcr3KeBJQZ8m-TeueZobfwqMdtM3qnz0"}, "102": {"selection_timestamp": "8/8/2022 15:44:01", "study_title": "Does Your Configuration Code Smell?", "study_authors": "Tushar Sharma\r\nMarios Fragkoulis\r\nDiomidis Spinellis", "study_author_type": "Academia", "study_year": 2016.0, "study_venue": "Working Conference on Mining Software Repositories", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/2901739.2901761", "study_bibtex": "@inproceedings{Sharma_2016,\r\n\tdoi = {10.1145/2901739.2901761},\r\n\turl = {https://doi.org/10.1145%2F2901739.2901761},\r\n\tyear = 2016,\r\n\tmonth = {may},\r\n\tpublisher = {{ACM}},\r\n\tauthor = {Tushar Sharma and Marios Fragkoulis and Diomidis Spinellis},\r\n\ttitle = {Does your configuration code smell?},\r\n\tbooktitle = {Proceedings of the 13th International Conference on Mining Software Repositories}\r\n}", "study_summary": null, "study_problem": "The wide adoption of configuration management and increasing size and complexity of the associated code, prompt for assessing, maintaining, and improving the configuration code\u2019s quality.", "study_objective": "We propose a catalog of 13 implementation and 11 design configuration smells, where each\r\nsmell violates recommended best practices for configuration code.", "study_results": null, "artifact_name": ["Puppeteer", "Puppet-Lint"], "artifact_description": null, "artifact_link": ["https://github.com/tushartushar/Puppeteer"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Infrastructure TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Our future research may take many possible directions\r\nincluding investigating various aspects relevant to quality\r\nwhen configuration repositories evolve, applying automated\r\nrefactoring to configuration code, and measuring the impact\r\nof smells on various system parameters.", "artifact_other_comments": null, "study_code": "102", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of Configuration Smells"], "artifact_input": "Configuration Files", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuefHlKv1p4y9BCCI90CeC8HfE3-ibHEgXg6-diJbogqD_Rcs45qZuzB4gADPJLclXU"}, "162": {"selection_timestamp": "8/8/2022 16:04:52", "study_title": "Smelly Relations: Measuring and Understanding Database Schema Quality", "study_authors": "Tushar Sharma\r\nMarios Fragkoulis\r\nStamatia Rizou\r\nMagiel Bruntink\r\nDiomidis Spinellis", "study_author_type": "Academia", "study_year": 2018.0, "study_venue": "International Conference on Software Engineering: Software Engineering in Practice", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3183519.3183529", "study_bibtex": "@inproceedings{Sharma_2018,\r\n\tdoi = {10.1145/3183519.3183529},\r\n\turl = {https://doi.org/10.1145%2F3183519.3183529},\r\n\tyear = 2018,\r\n\tmonth = {may},\r\n\tpublisher = {{ACM}},\r\n\tauthor = {Tushar Sharma and Marios Fragkoulis and Stamatia Rizou and Magiel Bruntink and Diomidis Spinellis},\r\n\ttitle = {Smelly relations},\r\n\tbooktitle = {Proceedings of the 40th International Conference on Software Engineering: Software Engineering in Practice}\r\n}\r\n", "study_summary": null, "study_problem": "Databases are an integral element of enterprise applications. Similarly to code, database schemas are also prone to smells best practice violations.", "study_objective": "We aim to explore database schema quality, associated characteristics and their relationships with other software artifacts.", "study_results": null, "artifact_name": ["DbDeo"], "artifact_description": null, "artifact_link": ["https://github.com/tushartushar/DbDeo"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Focused on database"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "1) In this paper, we restricted the scope of the study to database\r\nschema smells. In the future, we would like to perform a study with\r\n\r\nexpanded scope including query and data smells as well. Addition-\r\nally, it will be interesting to observe inter-category relationships\r\n\r\namong database smells. 2) We would like to quantify the impact\r\nof the smells on key quality attributes such as performance and\r\nmaintainability. 3) Finally, we would like to catalog and identify\r\ndatabase smells that impair portability.", "artifact_other_comments": null, "study_code": "162", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Detect of Database Smells"], "artifact_input": "SQL statements", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucDM7vGilJyB9FO1bdlls1VmAGpcsjzbo_whXM_W58-stwLTvHrM3kZp7U1Oe8zfn4"}, "200": {"selection_timestamp": "8/8/2022 16:21:47", "study_title": "Investigating instability architectural smells evolution: an exploratory case study", "study_authors": "Darius Sas\r\nParis Avgeriou\r\nFrancesca Arcelli Fontana", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "International Conference on Software Maintenance and Evolution", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/ICSME.2019.00090", "study_bibtex": "@inproceedings{Sas_2019,\r\n\tdoi = {10.1109/icsme.2019.00090},\r\n\turl = {https://doi.org/10.1109%2Ficsme.2019.00090},\r\n\tyear = 2019,\r\n\tmonth = {sep},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Darius Sas and Paris Avgeriou and Francesca Arcelli Fontana},\r\n\ttitle = {Investigating Instability Architectural Smells Evolution: An Exploratory Case Study},\r\n\tbooktitle = {2019 {IEEE} International Conference on Software Maintenance and Evolution ({ICSME})}\r\n}", "study_summary": null, "study_problem": "Abstract\u2014Architectural smells may substantially increase\r\nmaintenance effort and thus require extra attention for potential\r\nrefactoring. While we currently understand this concept and\r\nhave identified different types of such smells, we have not yet\r\nstudied their evolution in depth.", "study_objective": "This study analyses the evolution of individual architectural smell instances over time, and the characteristics that define these instances.", "study_results": null, "artifact_name": ["Arcan", "ASTracker"], "artifact_description": "ASTracker is a Java tool that parses Arcan's output and tracks the architectural smells detected in each versionString analysed by Arcan.", "artifact_link": ["https://gitlab.com/essere.lab.public/arcan", "https://github.com/darius-sas/astracker"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Monitoring", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "As future work, we plan to extend our tooling to mine archi-\r\ntectural smells directly from Git repositories, thus allowing us\r\n\r\nto link the current information to code churn and investigate\r\nthe effects of smells on change rates.", "artifact_other_comments": null, "study_code": "200", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": "Source Code", "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify architecture smells", "Track the architecture smells"], "artifact_input": null, "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudSAtYmOxpySs_7YUtJR6qI3lofTEmmtKizKaMPv6XPzk2uVZMm0ezAIXqtxPhwZus"}, "229": {"selection_timestamp": "8/8/2022 16:37:42", "study_title": "Are architectural smells independent from code smells? An empirical study", "study_authors": "Francesca Arcelli Fontana\r\nValentina Lenarduzzi\r\nRiccardo Roveda\r\nDavide Taibi", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "The Journal of Systems and Software", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1016/j.jss.2019.04.066", "study_bibtex": "@article{Arcelli_Fontana_2019,\r\n\tdoi = {10.1016/j.jss.2019.04.066},\r\n\turl = {https://doi.org/10.1016%2Fj.jss.2019.04.066},\r\n\tyear = 2019,\r\n\tmonth = {aug},\r\n\tpublisher = {Elsevier {BV}},\r\n\tvolume = {154},\r\n\tpages = {139--156},\r\n\tauthor = {Francesca Arcelli Fontana and Valentina Lenarduzzi and Riccardo Roveda and Davide Taibi},\r\n\ttitle = {Are architectural smells independent from code smells? An empirical study},\r\n\tjournal = {Journal of Systems and Software}\r\n}", "study_summary": null, "study_problem": "Some studies show that code smells and architectural smells often appear together in the same file. The correlation between code smells and architectural smells, however, is not clear yet;", "study_objective": "The goal of this work is to understand whether architectural smells are independent from code smells or can be derived from a code smell or from one category of them.", "study_results": null, "artifact_name": ["SonarQube", "Plugin for SonarQube", "Arcan"], "artifact_description": null, "artifact_link": ["https://github.com/davidetaibi/sonarqube-anti-patterns-code-smells", "https://essere.disco.unimib.it/wiki/arcan/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Plugin", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Moreover, as outlined by Kouroshfar et al. (2015), to improve the accuracy of bug prediction one should also take the software architecture of the project into consideration. Hence, in the near future we would like to study potential correlations between architectural smells and bugs as well as potential correlations with other issues detected through SonarQube (Saarim\u00e4ki et al., 2019).", "artifact_other_comments": null, "study_code": "229", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of Code Smells", "Identification of Architectural Smells"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufQnKJvXLiQSKNflzlogZNSk8jf5YV_P8mZ2r-gJndYdqAxnIOifnuTBHo5pzG-lzc"}, "269": {"selection_timestamp": "8/8/2022 17:04:57", "study_title": "An Empirical Study on the Evolution of Design Smells", "study_authors": "Lerina Aversano\r\nUmberto Carpenito\r\nMartina Iammarino", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Information", "study_venue_type": "Journal", "study_link": "http://doi.org/10.3390/info11070348", "study_bibtex": "@article{Aversano_2020,\r\n\tdoi = {10.3390/info11070348},\r\n\turl = {https://doi.org/10.3390%2Finfo11070348},\r\n\tyear = 2020,\r\n\tmonth = {jul},\r\n\tpublisher = {{MDPI} {AG}},\r\n\tvolume = {11},\r\n\tnumber = {7},\r\n\tpages = {348},\r\n\tauthor = {Lerina Aversano and Umberto Carpenito and Martina Iammarino},\r\n\ttitle = {An Empirical Study on the Evolution of Design Smells},\r\n\tjournal = {Information}\r\n}", "study_summary": null, "study_problem": "In particular, the presence of design smells could indicate the use of constructs that are\r\nharmful to system maintenance activities. In this work, an investigation on the nature and presence of\r\ndesign smells has been performed.", "study_objective": "An empirical study has been conducted considering the complete\r\nhistory of eight software systems, commit by commit.", "study_results": null, "artifact_name": ["RMiner", "Designite"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Our long-term goal is to predict architecture decay and potential future problems based on\r\ninformation available at the implementation level.", "artifact_other_comments": null, "study_code": "269", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of design smells", "Calculation of code metrics"], "artifact_input": "Source code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufWhun_RQmynMh28-rE2Zzqp4w4Nia6qbhZ8SfwhfJMR9Wj2DphL25v7dIIEx48UqI"}, "274": {"selection_timestamp": "8/8/2022 17:15:39", "study_title": "On the Diffusion and Impact of Code  Smells in Web Applications", "study_authors": "Narjes Bessghaier\r\nAli Ouni\r\nMohamed Wiem Mkaouer", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Conference on Services Computing", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1007/978-3-030-59592-0_5", "study_bibtex": "@incollection{Bessghaier_2020,\r\n\tdoi = {10.1007/978-3-030-59592-0_5},\r\n\turl = {https://doi.org/10.1007%2F978-3-030-59592-0_5},\r\n\tyear = 2020,\r\n\tpublisher = {Springer International Publishing},\r\n\tpages = {67--84},\r\n\tauthor = {Narjes Bessghaier and Ali Ouni and Mohamed Wiem Mkaouer},\r\n\ttitle = {On the Diffusion and Impact of Code Smells in Web Applications},\r\n\tbooktitle = {Services Computing {\\textendash} {SCC} 2020}\r\n}", "study_summary": null, "study_problem": "The presence of code smells in a\r\nsoftware project is widely considered as form of technical debt and makes\r\nthe software harder to understand, maintain and evolve, besides leading\r\nto failures and unforeseen costs. Therefore, it is critical for web apps to\r\nmonitor the existence and spread of such anti-patterns.", "study_objective": "In this paper,\r\nwe specifically target web apps built with PHP being the most used\r\nserver-side programming language.", "study_results": null, "artifact_name": ["PHPMD"], "artifact_description": "This is the project site of PHPMD. It is a spin-off project of PHP Depend and aims to be a PHP equivalent of the well known Java tool PMD. PHPMD can be seen as an user friendly and easy to configure frontend for the raw metrics measured by PHP Depend.", "artifact_link": ["https://phpmd.org/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "We plan also to analyze the impact of the co-occurences of code smells  on the change-proneness. Moreover, we plan to investigate the impact of smelly-files on the fault-proneness. More interestingly, we will develop automated code smells refactoring recommendation and prioritization techniques in the context of web apps to better monitor code smells.", "artifact_other_comments": "Important\r\nPHP", "study_code": "274", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify code smells"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueOzX71_QSIluohvYkmoNTwzzW-OMR9Q-HzCgPcSWmxbCOe_QrMBtI3taWQYqTK5Bo"}, "354": {"selection_timestamp": "8/9/2022 14:50:57", "study_title": "QScored: A Large Dataset of Code Smells and Quality Metrics", "study_authors": "Tushar Sharma\r\nMarouane Kessentini", "study_author_type": "Both", "study_year": 2021.0, "study_venue": "International Conference on Mining Software Repositories", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/MSR52588.2021.00080", "study_bibtex": "@inproceedings{Sharma_2021,\r\n\tdoi = {10.1109/msr52588.2021.00080},\r\n\turl = {https://doi.org/10.1109%2Fmsr52588.2021.00080},\r\n\tyear = 2021,\r\n\tmonth = {may},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Tushar Sharma and Marouane Kessentini},\r\n\ttitle = {{QScored}: A Large Dataset of Code Smells and Quality Metrics},\r\n\tbooktitle = {2021 {IEEE}/{ACM} 18th International Conference on Mining Software Repositories ({MSR})}\r\n}", "study_summary": null, "study_problem": "Code quality aspects such as code smells and code\r\nquality metrics are widely used in exploratory and empirical\r\nsoftware engineering research. In such studies, researchers spend\r\na substantial amount of time and effort to not only select the\r\nappropriate subject systems but also to analyze them to collect\r\nthe required code quality information.", "study_objective": "In this paper, we present\r\nQScored dataset; the dataset contains code quality information\r\nof more than 86 thousand C# and Java GitHub repositories\r\ncontaining more than 1.1 billion lines of code.", "study_results": null, "artifact_name": ["Designite", "DesigniteJava", "QScored"], "artifact_description": "QScored is an open platform for code quality ranking and visualization. QScored computes code quality scores for all projects in its corpus and provides a quality ranking to individual projects. The assigned code quality ranking is based on the detected smells at architecture, design, and implementation granularities. It facilitates visualization of analyzed results and interactively shows various code quality aspects for each analyzed project.", "artifact_link": ["https://www.designite-tools.com/", "https://www.designite-tools.com/designitejava/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Approach (e.g., integration of different tools)", "artifact_type_evidence": null, "artifact_td_activities": ["Representation/Documentation", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Towards this, we have plan to create an automated pipeline subscribed to GitHub\r\nto fetch a project, analyze it, and upload it automatically. We\r\nalso plan to extend the quality analysis to other aspects of\r\ncode quality such as test quality by analyzing test smells and\r\nmaking it a part of the dataset.", "artifact_other_comments": null, "study_code": "354", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of smells", "Calculation of code metrics", "Visualization of metrics"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucFTXdTlkRDVQrCg1jTVG0AmfUcsJVaFOcsV0c34tk-pZVox_-10eCuRRKup7idxAE"}, "355": {"selection_timestamp": "8/9/2022 15:26:48", "study_title": "Worst Smells and Their Worst Reasons", "study_authors": "Davide Falessi\r\nRick Kazman", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/TechDebt52882.2021.00014", "study_bibtex": "@inproceedings{Falessi_2021,\r\n\tdoi = {10.1109/techdebt52882.2021.00014},\r\n\turl = {https://doi.org/10.1109%2Ftechdebt52882.2021.00014},\r\n\tyear = 2021,\r\n\tmonth = {may},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Davide Falessi and Rick Kazman},\r\n\ttitle = {Worst Smells and Their Worst Reasons},\r\n\tbooktitle = {2021 {IEEE}/{ACM} International Conference on Technical Debt ({TechDebt})}\r\n}", "study_summary": null, "study_problem": "However, it is a challenging activity to decide which smells should\r\nbe included in the quality gate, as developers may choose to\r\noptimize short term benefits like time to market over long term\r\nbenefits like maintainability. But some smells appear to provide\r\nno benefit to developers whatsoever and hence such smells should\r\nalways be avoided.", "study_objective": "The aims of this paper are: 1) to identify\r\n\u201cworst smells\u201d, i.e., bad smells that never have a good reason\r\nto exist, 2) to determine the frequency, change-proneness, and\r\nseverity associated with worst smells, and 3) to identify the \u201cworst\r\nreasons\u201d, i.e., the reasons for introducing these worst smells in\r\nthe first place.", "study_results": null, "artifact_name": ["Sonarcloud"], "artifact_description": null, "artifact_link": ["https://sonarcloud.io/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "355", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Commercial/Private", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of code smells"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudPoUu7ZdDyTe8Zv7WGorFJOpSPc_KuNTC1Q9inX-9OBz4Fa4p52yiBUyIp5A5DNEY"}, "131": {"selection_timestamp": "8/9/2022 16:06:42", "study_title": "Correlations of Software Code Metrics: An Empirical Study", "study_authors": "Md Abdullah Al Mamun\r\nChristian Berger\r\nJ\u00f6rgen Hansson", "study_author_type": "Academia", "study_year": 2017.0, "study_venue": "International Workshop on Software Measurement", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3143434.3143445", "study_bibtex": "@inproceedings{10.1145/3143434.3143445,\r\nauthor = {Mamun, Md Abdullah Al and Berger, Christian and Hansson, J\\\"{o}rgen},\r\ntitle = {Correlations of Software Code Metrics: An Empirical Study},\r\nyear = {2017},\r\nisbn = {9781450348539},\r\npublisher = {Association for Computing Machinery},\r\naddress = {New York, NY, USA},\r\nurl = {https://doi.org/10.1145/3143434.3143445},\r\ndoi = {10.1145/3143434.3143445},\r\nbooktitle = {Proceedings of the 27th International Workshop on Software Measurement and 12th International Conference on Software Process and Product Measurement},\r\npages = {255\u2013266},\r\nnumpages = {12},\r\nkeywords = {software engineering, spearman's rank correlation, correlation of metrics, software code metrics},\r\nlocation = {Gothenburg, Sweden},\r\nseries = {IWSM Mensura '17}\r\n}", "study_summary": null, "study_problem": "For example, source code metrics are used to automatically\r\n\r\ncalculate technical debt related to code quality which may indicate\r\nhow maintainable a software is. Thus, predicting such metrics can\r\ngive us an indication of technical debt in the future releases of\r\nsoftware.", "study_objective": "To understand such relationships, this empirical study has collected 25 metrics classi-\r\nfied into four domains from 9572 software revisions of 20 open source projects from 8 well-known companies.", "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "So, our obvious next step is to explore the correlation between\r\nindividual metrics that will give us valuable information to select\r\nmost important factors for our predictors.", "artifact_other_comments": "IMPORTANT", "study_code": "131", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculation of code metrics"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnud53PhbGmgev7Pj5qLbkCt0jvOboYXBQwss9ujUgcimbZLBU3Kip57wJM-p9uLRvE4"}, "166": {"selection_timestamp": "8/9/2022 16:24:49", "study_title": "Evaluating Domain-Specific Metric Thresholds: An Empirical Study", "study_authors": "Allan Mori\r\nGustavo Vale\r\nMarkos Viggiato\r\nJohnatan Oliveira\r\nEduardo Figueiredo\r\nElder Cirilo\r\nPooyan Jamshidi\r\nChristian Kastner", "study_author_type": "Academia", "study_year": 2018.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3194164.3194173", "study_bibtex": "@inproceedings{Mori_2018,\r\n\tdoi = {10.1145/3194164.3194173},\r\n\turl = {https://doi.org/10.1145%2F3194164.3194173},\r\n\tyear = 2018,\r\n\tmonth = {may},\r\n\tpublisher = {{ACM}},\r\n\tauthor = {Allan Mori and Gustavo Vale and Markos Viggiato and Johnatan Oliveira and Eduardo Figueiredo and Elder Cirilo and Pooyan Jamshidi and Christian Kastner},\r\n\ttitle = {Evaluating domain-specific metric thresholds},\r\n\tbooktitle = {Proceedings of the 2018 International Conference on Technical Debt}\r\n}", "study_summary": null, "study_problem": "Although derivation of\r\nreliable thresholds has long been a concern, we still lack empirical\r\nevidence about threshold variation across distinct software domains.", "study_objective": "To tackle this limitation, this paper investigates whether and how\r\nthresholds vary across domains by presenting a large-scale study on\r\n3,107 software systems from 15 domains.", "study_results": null, "artifact_name": ["CK"], "artifact_description": null, "artifact_link": ["https://github.com/mauricioaniche/ck"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "For future work, we plan further investigation with additional\r\ntechnical debts and additional replications of this study to determine\r\nwhether our findings can be generalized to other domains and\r\nsystems. In addition, we are also considering commercial software\r\nsystems to confirm whether and how thresholds vary across domains\r\nand their impact on technical debts.", "artifact_other_comments": null, "study_code": "166", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate code metrics"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufMz6uWaLhqR_DSqU2CScxDW91gRss_kFE9Amn3TYY6yjjH2VHxD5jYRy-cMghGYd0"}, "290": {"selection_timestamp": "8/10/2022 14:18:39", "study_title": "Does code review really remove coding convention violations?", "study_authors": "DongGyun Han\r\nChaiyong Ragkhitwetsagul\r\nJens Krinke\r\nMatheus Paixao\r\nGiovanni Rosa", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Working Conference on Source Code Analysis and Manipulation", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SCAM51674.2020.00010", "study_bibtex": "@inproceedings{Han_2020,\r\n\tdoi = {10.1109/scam51674.2020.00010},\r\n\turl = {https://doi.org/10.1109%2Fscam51674.2020.00010},\r\n\tyear = 2020,\r\n\tmonth = {sep},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {DongGyun Han and Chaiyong Ragkhitwetsagul and Jens Krinke and Matheus Paixao and Giovanni Rosa},\r\n\ttitle = {Does code review really remove coding convention violations?},\r\n\tbooktitle = {2020 {IEEE} 20th International Working Conference on Source Code Analysis and Manipulation ({SCAM})}\r\n}", "study_summary": null, "study_problem": "However, as most research\r\nhas focused on developer\u2019s perception, it is not clear whether code\r\nreviews actually prevent the introduction of coding convention\r\nviolations and the corresponding technical debt.", "study_objective": "Therefore, we investigated how coding convention violations\r\nare introduced, addressed, and removed during code review\r\nby developers. To do this, we analysed 16,442 code review\r\nrequests from four projects of the Eclipse community for the\r\nintroduction of convention violations.", "study_results": null, "artifact_name": ["Checkstyle", "PMD", "Gerrit", "CodeFlow", "Fabricator"], "artifact_description": "Gerrit, CodeFlow, and Fabricator are code review platforms (maybe documentation)", "artifact_link": ["https://www.gerritcodereview.com/", "https://www.getcodeflow.com/", "https://secure.phabricator.com/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Representation/Documentation", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "For example, the majority of coding convention violations\r\ncan easily be detected by automated tools, rather than by a\r\nreviewer\u2019s manual inspection. It is also important to improve\r\ntools to provide fewer false-positives (i.e., violation warnings\r\nthat are unimportant or unnecessary) to developers. It is also\r\nnecessary for the tools to analyse changed code only. Based\r\non the results presented in this paper, automated tool support\r\ncan save developers\u2019 time and boost development speed.", "artifact_other_comments": "For JAVA", "study_code": "290", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Code Review"], "artifact_input": "Source Code\r\nCode Reviews", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucXqCyTxifLXumE6W35mDmPqTqDZXuJxp3bBXkMq9_gqYvWN5WjNEJTxR1L62ZcDt0"}, "349": {"selection_timestamp": "8/10/2022 14:39:22", "study_title": "One Step Further: Investigating Problematic Files of Architecture Anti-patterns", "study_authors": "Jingwen Liu\r\nWuxia Jin\r\nQiong Feng\r\nXinyu Zhang\r\nYitong Dai", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "International Symposium on Software Reliability Engineering", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/ISSRE52982.2021.00060", "study_bibtex": "@inproceedings{Liu_2021,\r\n\tdoi = {10.1109/issre52982.2021.00060},\r\n\turl = {https://doi.org/10.1109%2Fissre52982.2021.00060},\r\n\tyear = 2021,\r\n\tmonth = {oct},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Jingwen Liu and Wuxia Jin and Qiong Feng and Xinyu Zhang and Yitong Dai},\r\n\ttitle = {One Step Further: Investigating Problematic Files of Architecture Anti-patterns},\r\n\tbooktitle = {2021 {IEEE} 32nd International Symposium on Software Reliability Engineering ({ISSRE})}\r\n}", "study_summary": null, "study_problem": "However, these tools tend to report a large number of\r\ndefects, hindering developers from prioritizing true debts. In this\r\nwork, we take one step further to explore the most problematic\r\nfiles (we define them as root files) in the architecture anti-patterns,\r\nwhich are potential causes leading to the difficulty of software\r\nmaintenance.", "study_objective": "Using 45 Python projects as subjects, we investigate\r\nroot files\u2019 maintainability, evolution (i.e., birth, living, and death),\r\nand their interactions in different architecture anti-patterns.", "study_results": null, "artifact_name": ["DV8", "AI Reviewer", "ARCADE", "Arcan", "Designite", "Sonargraph", "Structure 101"], "artifact_description": null, "artifact_link": ["http://www.hello2morrow.com", "http://structure101.com", "http://www.designite-tools.com", "http://www.aireviewer.com"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "Our study indicated that pinpointing root files of anti-\r\npatterns would significantly narrow down the \u201cmassive\u201d prob-\r\nlem scope, and thus have the potential to promote an effective\r\n\r\nand efficient anti-pattern refactoring practice.\r\n\r\nIn addition, our study strongly indicated\r\n\r\nthat active and overlapping root files among multiple anti-\r\npatterns should be prioritized during design problem res-\r\nolution.", "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": "Python", "study_code": "349", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Various", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of architecture anti-patterns"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudiYJRmpI6dY2dyJITWHMW2Ocl_FZsrcdk8Ub5ehvO0mbC7TtMACW93OZr1f52KZyU"}, "350": {"selection_timestamp": "8/10/2022 14:52:53", "study_title": null, "study_authors": null, "study_author_type": null, "study_year": null, "study_venue": null, "study_venue_type": null, "study_link": null, "study_bibtex": "@inproceedings{DBLP:conf/ecsa/PigazziniFF21,\r\n  author    = {Ilaria Pigazzini and\r\n               Davide Foppiani and\r\n               Francesca Arcelli Fontana},\r\n  editor    = {Robert Heinrich and\r\n               Raffaela Mirandola and\r\n               Danny Weyns},\r\n  title     = {Two Different Facets of Architectural Smells Criticality: An Empirical\r\n               Study},\r\n  booktitle = {{ECSA} 2021 Companion Volume, Virtual (originally: V{\\\"{a}}xj{\\\"{o}},\r\n               Sweden), 13-17 September, 2021},\r\n  series    = {{CEUR} Workshop Proceedings},\r\n  volume    = {2978},\r\n  publisher = {CEUR-WS.org},\r\n  year      = {2021},\r\n  url       = {http://ceur-ws.org/Vol-2978/msr4sa-paper2.pdf},\r\n  timestamp = {Mon, 25 Oct 2021 15:03:56 +0200},\r\n  biburl    = {https://dblp.org/rec/conf/ecsa/PigazziniFF21.bib},\r\n  bibsource = {dblp computer science bibliography, https://dblp.org}\r\n}", "study_summary": null, "study_problem": "Architectural smells (AS) represent symptoms of problems at architectural level that have an impact on architectural debt. It is important to identify among them the most critical ones, so that developers can prioritize them for their removal.", "study_objective": "In order to evaluate the criticality of AS, in this paper we consider two facets: the PageRank metric, to assess the centrality of a smell in a project, and Severity, a metric to estimate the cost-solving of smells.", "study_results": null, "artifact_name": ["Arcan"], "artifact_description": null, "artifact_link": ["https://drive.google.com/file/d/1WNx7FHRykbyOIxz92cDQpSL2rl_gEJ4P/view?usp=sharinghttps://mvnrepository.com/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "We can assert that such smells are a signal that both PageRank and Severity\r\ncould be useful to define different refactoring priorities,\r\nfrom different points of view. In particular, PageRank can\r\nbe used to identify parts of code which need a continuous\r\ninspection, while Severity can be used to evaluate the\r\ncost-solving for the AS removal.", "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "350", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of Architecture Smells"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucKsCiTjrYmfSeKUFUSx0D2_mdN-pSscKlQ3NxVC3S5ycC1opJ5WkBeT-IYM-7tOgg"}, "427": {"selection_timestamp": "8/10/2022 15:35:53", "study_title": "Exploring the relationship between refactoring and code debt indicators", "study_authors": "Rusen Halepmollasi\r\nAyse Tosun", "study_author_type": "Academia", "study_year": 2022.0, "study_venue": "Journal Of Software: Process and Evolution", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1002/smr.2447", "study_bibtex": "@article{Halepmollasi_2022,\r\n\tdoi = {10.1002/smr.2447},\r\n\turl = {https://doi.org/10.1002%2Fsmr.2447},\r\n\tyear = 2022,\r\n\tmonth = {mar},\r\n\tpublisher = {Wiley},\r\n\tauthor = {Rusen Halepmollasi and Ayse Tosun},\r\n\ttitle = {Exploring the relationship between refactoring and code debt indicators},\r\n\tjournal = {Journal of Software: Evolution and Process}\r\n}", "study_summary": null, "study_problem": "Although there are several studies addressing the gap between refactoring and TD indicators, the empirical evidence provided is still limited.", "study_objective": "In this study, we examine the distribution of 29 refactoring types among the different projects and their relation with code smells or faults. We explore the refactoring types that are most commonly performed together and other activities performed with refactorings.", "study_results": null, "artifact_name": ["Ptidej", "Open SZZ", "Rminer", "SonarQube"], "artifact_description": "Ptidej: Code Smells\r\nOpen SZZ: Falts\r\nRminer: Refactoring identification\r\nSonarQube: code metrics", "artifact_link": ["https://github.com/clowee/OpenSZZ", "https://www.ptidej.net/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "As future work, we can examine the relationship between refactoring and faults at file level considering the evolution of files over change history, and support our results with statistical tests. Furthermore, we plan to analyze the components on which refactoring actions are performed over time. This way we may observe whether code smells in files where refactorings are classified as neutral or introducing later turn into faults or vice versa, that is, whether the elimination of code smells in files where refactorings are classified as removing prevents the occurrence of faults in future. This kind of analysis requires observation of file changes individually over change history and would give better insights on the relationship between TD management strategies and debt indicators.", "artifact_other_comments": "IMPORTANT FOR REFACTORING", "study_code": "427", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of Code Smells", "Identification of Refactoring Activities", "Identification of Faults", "Identification of Code Violations"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudzwh3dpkSNAjkeah10CYANdFE1Tkvm7d3wTgX5MfKIXYEjwMlQJDql9eoPJ6x0tTw"}, "160": {"selection_timestamp": "8/10/2022 15:48:51", "study_title": "Identifying self-admitted technical debt in open source projects using text mining", "study_authors": "Qiao Huang\r\nEmad Shihab\r\nXin Xia\r\nDavid Lo\r\nShanping Li", "study_author_type": "Academia", "study_year": 2017.0, "study_venue": "Empirical Software Engineering", "study_venue_type": "Journal", "study_link": "http://doi.org/10.1007/s10664-017-9522-4", "study_bibtex": "@article{Huang_2017,\r\n\tdoi = {10.1007/s10664-017-9522-4},\r\n\turl = {https://doi.org/10.1007%2Fs10664-017-9522-4},\r\n\tyear = 2017,\r\n\tmonth = {may},\r\n\tpublisher = {Springer Science and Business Media {LLC}},\r\n\tvolume = {23},\r\n\tnumber = {1},\r\n\tpages = {418--451},\r\n\tauthor = {Qiao Huang and Emad Shihab and Xin Xia and David Lo and Shanping Li},\r\n\ttitle = {Identifying self-admitted technical debt in open source projects using text mining},\r\n\tjournal = {Empirical Software Engineering}\r\n}", "study_summary": null, "study_problem": "Prior work on SATD has shown that source code comments can be used to successfully detect SATD, however, most current state-of-the-art classification approaches of SATD rely on manual inspection of the source code comments.", "study_objective": "In this paper, we proposed an automated approach to detect SATD in source code comments", "study_results": null, "artifact_name": ["Proposed by the author"], "artifact_description": null, "artifact_link": ["https://github.com/tkdsheep/TechnicalDebt"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Script", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["SATD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "In the future, we plan to evaluate our approach on datasets from more software projects.\r\nTo further improve the performance our approach, we plan to apply deep learning techniques such as word embedding (Mikolov et al. 2013). We also plan to develop an automated tool to make the development team being aware of the SATD when it is introduced. Finally, We plan to contact some contributors in open source projects to ask them about their views on SATD comments.", "artifact_other_comments": "Important", "study_code": "160", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of SATD"], "artifact_input": "Code Comments", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueVXISjS3EYy0mGYmxsEIj7DWLIjy3Z-doeuV8iPNHeDfGX1rbfV1nUlADPKE3L4Dk&fbzx=-7973893151080083120"}, "214": {"selection_timestamp": "8/10/2022 21:18:05", "study_title": "Evolution of Technical Debt: An Exploratory Study", "study_authors": "Md Abdullah Al Mamun\r\nAntonio Martini\r\nMiroslaw Staron\r\nChristian Berger\r\nJ \u0308orgen Hansson", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "International Workshop on Software Measurement", "study_venue_type": "Workshop", "study_link": "https://research.chalmers.se/publication/524998/file/524998_Fulltext.pdf", "study_bibtex": "@inproceedings{inproceedings,\r\nauthor = {Mamun, Md Abdullah and Martini, Antonio and Staron, Miroslaw and Berger, Christian and Hansson, J\u00f6rgen},\r\nyear = {2019},\r\nmonth = {10},\r\npages = {},\r\ntitle = {Evolution of Technical Debt: An Exploratory Study}\r\n}", "study_summary": null, "study_problem": "As source code files grow in size, maintainability becomes more challenging. Therefore, it is expected that the density of technical debt in larger files would be reduced for the sake of maintainability.", "study_objective": "This exploratory study investigates whether a newly introduced metric \u2018technical debt density trend\u2019 helps to better understand and explain the evolution of technical debt.", "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Since both of these two metrics are integral part of \u2018technical debt\u2019 evolution, non-cumulative equivalents of these metrics should be used to investigate the evolution of \u2018technical debt\u2019 in scenarios where cumulative metrics are problematic. We consider this as an essential future direction for a better understanding of \u2018technical debt\u2019.", "artifact_other_comments": null, "study_code": "214", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuesmx0Gq7m8dxSlHpUeQvsfURqZKq96jeUmnPvVwCVgJZREKEzWTigIp8GIA4pZeGY"}, "218": {"selection_timestamp": "8/10/2022 21:40:03", "study_title": "On the Diffuseness of Code Technical Debt in Java Projects of the Apache Ecosystem", "study_authors": "Nyyti Saarimaki\r\nValentina Lenarduzzi\r\nDavide Taibi", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/TechDebt.2019.00028", "study_bibtex": "@inproceedings{Lenarduzzi_2019,\r\n\tdoi = {10.1109/techdebt.2019.00028},\r\n\turl = {https://doi.org/10.1109%2Ftechdebt.2019.00028},\r\n\tyear = 2019,\r\n\tmonth = {may},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Valentina Lenarduzzi and Nyyti Saarimaki and Davide Taibi},\r\n\ttitle = {On the Diffuseness of Code Technical Debt in Java Projects of the Apache Ecosystem},\r\n\tbooktitle = {2019 {IEEE}/{ACM} International Conference on Technical Debt ({TechDebt})}\r\n}", "study_summary": null, "study_problem": "These tools classify technical debt issues into\r\ncategories according to severity, and developers commonly pay\r\nattention to not introducing issues with a high level of severity\r\nthat could generate bugs or make software maintenance more\r\ndifficult.", "study_objective": "In this work, we aim to understand the diffuseness of\r\nTechnical Debt (TD) issues and the speed with which developers\r\nremove them from the code if they introduced such an issue.", "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": "SonarQube also classifies the rules into five severity levels 4:\r\n\u2022 BLOCKER: \u201dBug with a high probability to impact the\r\nbehavior of the application in production: memory leak,\r\n\r\nunclosed JDBC connection.\u201d SonarQube recommends im-\r\nmediately reviewing such an issue\r\n\r\n\u2022 CRITICAL: \u201dEither a bug with a low probability to impact\r\nthe behavior of the application in production or an issue\r\nwhich represents a security flaw: empty catch block, SQL\r\n\r\ninjection\u201d SonarQube recommends immediately review-\r\ning such an issue\r\n\r\n\u2022 MAJOR: \u201dQuality flaw which can highly impact the de-\r\nveloper productivity: uncovered piece of code, duplicated\r\n\r\nblocks, unused parameters\u201d\r\n\u2022 MINOR: \u201dQuality flaw which can slightly impact the\r\ndeveloper productivity: lines should not be too long,\r\nswitch  \u0308 statements should have at least 3 cases, ...\u201d  \u0308\r\n\u2022 INFO: \u201dNeither a bug nor a quality flaw, just a finding.\u201d\r\nThe complete list of violations can be found in the online raw\r\ndata (Section IV-E).", "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "As also highlighted by [16], some of the most frequently\r\nintroduced TD issues are related to low-level coding issues,\r\nwhich could be decreased in several cases with good IDE sup-\r\nport (e.g., duplicated strings) or with good IDE customization\r\n(e.g., two variables declared on the same line).", "artifact_limitations": null, "artifact_gaps": "We are currently investigating the diffuseness and the impact\r\nof TD Issues in cloud-native applications [22], including\r\nSonarQube issues [23], patterns [24] and anti-patterns [25]\r\n[26] [24]. Future works include user studies on the investi-\r\ngation of the perceived harmfulness of TD Issues, with an\r\napproach similar to [6], understanding if the SonarQube TD\r\nissues can be used to predict external qualities such as the\r\nperceived reliability with approaches similar to these applied\r\nin [27] and [28].", "artifact_other_comments": null, "study_code": "218", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of TD", "Measurement of TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufFkBa3VgzNwjzMW74N29dTk-_nLp1bmEVtzkTrVNsUv7REXxP2V0CT9Vl96klJpmg"}, "244": {"selection_timestamp": "8/10/2022 21:52:33", "study_title": "Influence of Developer Factors on Code Quality: A Data Study", "study_authors": "Maria Jose Salamea\r\nCarles Farre", "study_author_type": "Academia", "study_year": 2019.0, "study_venue": "International Conference on Software Quality, Reliability and Security Companion", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/QRS-C.2019.00035", "study_bibtex": "@inproceedings{Salamea_2019,\r\n\tdoi = {10.1109/qrs-c.2019.00035},\r\n\turl = {https://doi.org/10.1109%2Fqrs-c.2019.00035},\r\n\tyear = 2019,\r\n\tmonth = {jul},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Maria Jose Salamea and Carles Farre},\r\n\ttitle = {Influence of Developer Factors on Code Quality: A Data Study},\r\n\tbooktitle = {2019 {IEEE} 19th International Conference on Software Quality, Reliability and Security Companion ({QRS}-C)}\r\n}", "study_summary": null, "study_problem": "Abstract\u2014Automatic source-code inspection tools help to as-\r\nsess, monitor and improve code quality. Since these tools only\r\nexamine the software project\u2019s codebase, they overlook other\r\npossible factors that may impact code quality and the assessment\r\nof the technical debt (TD).", "study_objective": "Our initial hypothesis is that human\r\nfactors associated with the software developers, like coding\r\nexpertise, communication skills, and experience in the project\r\nhave some measurable impact on the code quality. In this\r\nexploratory study, we test this hypothesis on two large open\r\nsource repositories, using TD as a code quality metric and the\r\ndata that may be inferred from the version control systems.", "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": "First, the SonarQube-Scanner component enables to launch the analysis of the\r\nproject code. Second, the SonarQube-Server has a Compute\r\nEngine server which performs analysis and reports the status\r\nof the project code. It implements the SQALE method to\r\nanalyse the source code against a set of code rules bounded\r\nto specific programming languages called the Quality Profile,\r\nto detect code issues and return a software quality diagnostic.\r\nThis diagnostic reports TD measurements that estimate the\r\neffort required to fix the detected maintenance issues. In\r\nour study, we use these issues, called TD items, to perform\r\nour analysis. The SonarQube-Server uses a Web application\r\nto visualise analysis reports and an Elasticsearch server to\r\nexecute UI requests. Third, the SonarQube-Plugin component\r\nallows installing plugins to link SonarQube to another support development tools. Finally, to SonarQube-Database compo-\r\nnent allows storing the analysis results and configurations.", "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Finally, we also envision the possibility of integrating the\r\nanalytical methods that we have introduced in this paper into\r\nthe framework and tools developed in the Q-Rapids\u2019 project\r\n[23] [24]. Here, the ultimate aim would be to help to provide\r\naccurate estimates on the effort required to remediate code\r\ndefects induced by developers.", "artifact_other_comments": null, "study_code": "244", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucPLsCU8xZ0y5MVpgHvUS8A8Zcm4vIbeQR-E4PfyWc45Ik7V-ONAypSEPHecBaLqEg"}, "293": {"selection_timestamp": "8/10/2022 22:10:11", "study_title": "An Empirical Study on Self-Fixed Technical Debt", "study_authors": "Jie Tan\r\nDaniel Feitosa\r\nParis Avgeriou", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Conference on Technical Debt", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3387906.3388621", "study_bibtex": "@inproceedings{Tan_2020,\r\n\tdoi = {10.1145/3387906.3388621},\r\n\turl = {https://doi.org/10.1145%2F3387906.3388621},\r\n\tyear = 2020,\r\n\tmonth = {jun},\r\n\tpublisher = {{ACM}},\r\n\tauthor = {Jie Tan and Daniel Feitosa and Paris Avgeriou},\r\n\ttitle = {An empirical study on self-fixed technical debt},\r\n\tbooktitle = {Proceedings of the 3rd International Conference on Technical Debt}\r\n}", "study_summary": null, "study_problem": "To what extent is TD self-fixed, which types of TD are more likely to be self-fixed and is\r\nthe remediation time of self-fixed TD shorter than non-self-fixed TD?", "study_objective": "This paper attempts to answer these questions. It reports on an\r\nempirical study that analyzes the self-fixed issues of five types of\r\nTD (i.e., Code, Defect, Design, Documentation and Test), captured\r\nvia static analysis, in more than 17,000 commits from 20 Python\r\nprojects of the Apache Software Foundation.", "study_results": null, "artifact_name": ["SonarQube", "<Code from authors>"], "artifact_description": "To perform our study, we use the tool SonarQube [6] to detect\r\ntechnical debt. There are two main reasons for choosing SonarQube:\r\n(1) it can track the evolution of technical debt by analyzing multiple\r\nversions of projects; (2) it is being widely used in both industry 5\r\nand for research purposes [12, 13, 15, 16, 19]. SonarQube defines a\r\nset of rules to detect various types of technical debt and classifies\r\nthem into four severity levels: blocker, critical, major and minor.\r\nWe do not consider minor issues, since many of them, e.g., Lines\r\nshould not end with trailing whitespaces, are trivial and have low\r\nimpact and likelihood6.", "artifact_link": ["https://github.com/jieshanshan/TechDebt2020"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Script", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD", "Test TD", "Documentation TD", "Defect TD", "Self-Fixed TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "In the future, we plan to extend this study by investigating self-\r\nfixed technical debt in other programming languages. We also plan\r\nto investigate the relationship between self-fixed rates and the\r\ncharacteristics of developers, e.g., experience. In addition, we plan to\r\ndevelop a tool based on the self-fixed rate and survival time to help\r\ndevelopers to prioritize TD remediation, and provide insights to\r\nsoftware development teams to better assign software maintenance\r\ntasks among different developers.", "artifact_other_comments": "Python", "study_code": "293", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of TD", "Identification of Self-Fixed TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuf6PXLFng3UmQjde4Ud1seyOCBuvhZ9EBqu-bAfGyODUcXQrOhiNcmhShFdEPTXM_Y"}, "302": {"selection_timestamp": "8/10/2022 23:05:01", "study_title": "On the Temporality of Introducing Code Technical Debt", "study_authors": "Georgios Digkas\r\nApostolos Ampatzoglou\r\nAlexander Chatzigeorgiou\r\nParis Avgeriou", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Conference on the Quality of Information and Communications Technology", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1007/978-3-030-58793-2_6", "study_bibtex": "@incollection{Digkas_2020,\r\n\tdoi = {10.1007/978-3-030-58793-2_6},\r\n\turl = {https://doi.org/10.1007%2F978-3-030-58793-2_6},\r\n\tyear = 2020,\r\n\tpublisher = {Springer International Publishing},\r\n\tpages = {68--82},\r\n\tauthor = {Georgios Digkas and Apostolos Ampatzoglou and Alexander Chatzigeorgiou and Paris Avgeriou},\r\n\ttitle = {On the Temporality of Introducing Code Technical Debt},\r\n\tbooktitle = {Communications in Computer and Information Science}\r\n}\r\n", "study_summary": null, "study_problem": "Code Technical Debt (TD) is intentionally or unintentionally\r\ncreated when developers introduce inefficiencies in the codebase. This can\r\nbe attributed to various reasons such as heavy work-load, tight delivery\r\nschedule, unawareness of good practices, etc.", "study_objective": "To shed light into the context that leads to technical debt accumulation, in this paper we investigate: (a) the temporality of code technical debt introduction in new methods, i.e., whether the introduction of technical debt is stable across the lifespan of the project, or if its evolution presents spikes; and (b) the relation of technical debt introduction and the development team\u2019s workload in a given period. To answer these questions, we perform a case study on twenty-seven Apache projects, and inspect the number of Technical Debt Items introduced in 6-month sliding temporal windows.", "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": "SQ relies on a set of rules which are checked\r\nby static source code analysis; every time a piece of code breaks one of those\r\ncoding or design rules, a Technical Debt Issue is raised. SQ estimates the effort\r\n(in minutes) required to eliminate the identified TDIs. This effort is obtained by\r\nassigning a time estimate for fixing each type of problem and by multiplying the\r\nnumber of all TDIs of that type with that estimate.", "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "We advise them to classify their project in the categories mentioned in\r\nSect. 6.1. If their project is sensitive or if the observed trend is a steadily\r\nincreasing one, then they need to perform a root cause analysis regarding the\r\nparameters that affect the accumulation of new code TD. Some of them may\r\nbe mitigated, for example moving certain developers to different teams, or\r\nreprioritizing the backlog to include more refactoring.", "artifact_other_comments": null, "study_code": "302", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of TD", "Measurement of TF"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucXKA449U1LLbWUMB_Op_ElFuNId3stPnZgHeCZlpgHoQzZvCNGjd-PywFBo_hygUY"}, "314": {"selection_timestamp": "8/11/2022 14:45:14", "study_title": "Refactoring, Bug Fixing, and New Development Effect on Technical Debt: An Industrial Case Study", "study_authors": "Ehsan Zabardast\r\nJavier Gonzalez-Huerta\r\nDarja Smite", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Euromicro Conference on Software Engineering and Advanced Applications", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SEAA51224.2020.00068", "study_bibtex": "@inproceedings{Zabardast_2020,\r\n\tdoi = {10.1109/seaa51224.2020.00068},\r\n\turl = {https://doi.org/10.1109%2Fseaa51224.2020.00068},\r\n\tyear = 2020,\r\n\tmonth = {aug},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Ehsan Zabardast and Javier Gonzalez-Huerta and Darja Smite},\r\n\ttitle = {Refactoring, Bug Fixing, and New Development Effect on Technical Debt: An Industrial Case Study},\r\n\tbooktitle = {2020 46th Euromicro Conference on Software Engineering and Advanced Applications ({SEAA})}\r\n}", "study_summary": null, "study_problem": "While the accumulation of the TD and the effect of\r\nrefactoring on TD have been studied before, there is a lack of\r\nempirical evidence from industrial projects on how the different\r\ntypes of code changes affect the TD and whether specific\r\nrefactoring operations are more effective for repaying TD.", "study_objective": "To fill this gap, we conducted an empirical study on an industrial\r\nproject and investigated how Refactoring, Bug Fixing, and New\r\nDevelopment affect the TD.", "study_results": null, "artifact_name": ["SonarQube", "RefactoringMiner"], "artifact_description": "SonarQube is an open source tool used for code quality inspection for a software project, which analyzes the source code in order to detect bugs, code smells, and security vulnerabilities (what in SonarQube terminology is referred to as issues). Addition-\r\nally, SonarQube provides the effort in time, which is calculated based on the remediation effort function. Therefore, the technical debt of a project is the summation of the estimated\r\ntime needed to solve all the issues. We used the default profile in SonarQube for calculating the remediation time.\r\n\r\nRefactoringMiner is a library developed by Tsantalis et al. [26] that detects various types of refactoring operations in the history of a JAVA project. The latest version of RefactoringMiner can detect 40 different types of ROs with the precision of 98% and recall of 87% [26]. We use RefactoringMiner to first detect the ROs in the history of the project in all the investigated commits. Later, we filtered and investigated only the ROs that are tagged as a \u201crefactoring\u201d commit by the developers.", "artifact_link": ["https://github.com/tsantalis/RefactoringMiner"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "Further, from a managerial point of view, our findings about\r\nthe impact of refactoring operations on TD can, at the same\r\ntime, help reduce the waste of effort by developers.", "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": "Java", "study_code": "314", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify TD", "Calculate TD", "Identify Refactoring Operations"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucAoaAHaOSyD0KQbOFoWdks-X6JDq4CIohYoOFqbjJjglr3w9-oA-u1E2ZAF3I_tsc"}, "316": {"selection_timestamp": "8/11/2022 15:25:53", "study_title": "Investigating the Relationship between Co-occurring Technical Debt in Python", "study_authors": "Jie Tan\r\nDaniel Feitosa\r\nParis Avgeriou", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Euromicro Conference on Software Engineering and Advanced Applications", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SEAA51224.2020.00082", "study_bibtex": "@inproceedings{Tan_2020,\r\n\tdoi = {10.1109/seaa51224.2020.00082},\r\n\turl = {https://doi.org/10.1109%2Fseaa51224.2020.00082},\r\n\tyear = 2020,\r\n\tmonth = {aug},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Jie Tan and Daniel Feitosa and Paris Avgeriou},\r\n\ttitle = {Investigating the Relationship between Co-occurring Technical Debt in Python},\r\n\tbooktitle = {2020 46th Euromicro Conference on Software Engineering and Advanced Applications ({SEAA})}\r\n}", "study_summary": null, "study_problem": "Technical debt (TD) reflects issues that may negatively affect software maintenance and evolution. There is currently little evidence on how the different types of TD co-occur; for example, how code smells and design smells affect the same part of the system.", "study_objective": "This paper investigates how different types of TD co-occur, as well as the time period of the co-occurrence. To that end, we analyzed the co-occurring associations between five types of TD, captured in 42 SonarQube rules, in 3862 files of 20 Python projects from the Apache Software Foundation.", "study_results": null, "artifact_name": ["SonarQube", "<Code from authors>"], "artifact_description": "SonarQube defines a set of rules to detect various types of technical debt and classifies them into four severity levels based on impact and likelihood: blocker, crit-\r\nical, major and minor. The minor issues are trivial and commonly perceived as having little to no relevance (e.g.,Lines should not end with trailing whitespaces) and could, therefore, bias the results6. Thus, we limited the severity level to blocker, critical and major. During analysis, SonarQube creates a new issue when a piece of code breaks one of the\r\npredefined rules.", "artifact_link": ["https://github.com/jieshanshan/SEAA2020"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Script", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD", "Test TD", "Documentation TD", "Defect TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "To detect TD, we use SonarQube, an open-source tool that measures quality and technical debt. We selected this tool for two main reasons: (1) it is being widely used in industry1 as\r\nwell as in the literature of TD [8]; (2) it can track the evolution of technical debt by analyzing multiple versions of projects. SonarQube detects TD by identifying violations of a number\r\nof rules; different rules correspond to different types of TD.", "artifact_limitations": null, "artifact_gaps": "In future work, we plan to investigate the relationship between the habits of developers and co-occurring TD. We also plan to develop a tool that can use our results to warn developers about potential issues and help them to make more informed decisions prior to refactoring activities.", "artifact_other_comments": null, "study_code": "316", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuecdZI80Yqa5zQAgPzdBoiYxK_M878_KNUttsMB7hypmHHoXZXL6unj54NpV4nOtsA"}, "318": {"selection_timestamp": "8/11/2022 15:44:55", "study_title": "CODE reuse in practice: Benefiting or harming technical debt", "study_authors": "Daniel Feitosa\r\nApostolos Ampatzoglou\r\nAntonios Gkortzis\r\nStamatia Bibi\r\nAlexander Chatzigeorgiou", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "The Journal of Systems and Software", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1016/j.jss.2020.110618", "study_bibtex": "@article{Feitosa_2020,\r\n\tdoi = {10.1016/j.jss.2020.110618},\r\n\turl = {https://doi.org/10.1016%2Fj.jss.2020.110618},\r\n\tyear = 2020,\r\n\tmonth = {sep},\r\n\tpublisher = {Elsevier {BV}},\r\n\tvolume = {167},\r\n\tpages = {110618},\r\n\tauthor = {Daniel Feitosa and Apostolos Ampatzoglou and Antonios Gkortzis and Stamatia Bibi and Alexander Chatzigeorgiou},\r\n\ttitle = {{CODE} reuse in practice: Benefiting or harming technical debt},\r\n\tjournal = {Journal of Systems and Software}\r\n}", "study_summary": null, "study_problem": "During the last years the TD community is striving to offer methods and tools for reducing the amount of TD, but also understand the underlying concepts. One popular practice that still has not been investigated in the context of TD, is software reuse.", "study_objective": "The aim of this paper is to investigate the relation between white-box code reuse and TD principal and interest.", "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": "SonarQube is the most frequently used tool for estimating TD principal. SonarQube\r\nis representing TD principal through two different views: (a) the number of inefficiencies in the source code, and (b) the amount of time required to fix such inefficiencies.\r\n\r\nSince in this study we are adopting the Dagstuhl 16,162 definition of TD, we are not using the calculations of SonarQube, \u201cas-is\u201d, but we consider only the effort to resolve maintainability issues (code smells, duplicated lines density, and coverage), since it is the only property discriminable at design-time.", "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": "Finally, SonarQube itself cannot assess which tests are actually executed and the code coverage; thus, it relies on third-party test coverage tools\u2014e.g., JaCoCo for Java.", "artifact_gaps": null, "artifact_other_comments": null, "study_code": "318", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of TD", "Calculation of TD Principal"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueCgFBAWvHObLMJzV89OEEJojhqjyTE_jcl4iOJE89K0MTwpaP8li0chsZ2H659R-Y"}, "327": {"selection_timestamp": "8/11/2022 16:16:22", "study_title": "Long-Term Evaluation of Technical Debt in Open-Source Software", "study_authors": "Arthur-Jozsef Molnar\r\nSimona Motogna", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "International Symposium on Empirical Software Engineering and Measurement", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3382494.3410673", "study_bibtex": "@inproceedings{Molnar_2020,\r\n\tdoi = {10.1145/3382494.3410673},\r\n\turl = {https://doi.org/10.1145%2F3382494.3410673},\r\n\tyear = 2020,\r\n\tmonth = {oct},\r\n\tpublisher = {{ACM}},\r\n\tauthor = {Arthur-Jozsef Molnar and Simona Motogna},\r\n\ttitle = {Long-Term Evaluation of Technical Debt in Open-Source Software},\r\n\tbooktitle = {Proceedings of the 14th {ACM} / {IEEE} International Symposium on Empirical Software Engineering and Measurement ({ESEM})}\r\n}", "study_summary": null, "study_problem": null, "study_objective": "In this paper we aim to study the evolution and characteristics of technical debt in open-source software. For this, we carry out a longitudinal study that covers the entire development history of several complex applications.", "study_results": null, "artifact_name": ["SonarQube", "Squore", "Kiuwan", "Ndepend"], "artifact_description": "SonarQube, Squore and NDepend use the SQALE [15] model, while Kiuwan uses the Checking Quality Model, which takes into consideration an evaluation of maintainability, reliability, portability, efficiency, and security. Other well-known models include QMOOD, Quamoco and Columbus, which were examined in existing literature [9, 11]. Usually, software tools employ static code analysis in order to collect data about several metrics and code coverage that are verified against a set of rules.", "artifact_link": ["https://www.vector.com/int/en/products/products-a-z/software/squore/", "https://www.kiuwan.com/", "www.ndepend.com"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "These server-side changes allowed SonarQube to track the history of each created\r\nissue and to automatically close issues no longer detected in later versions.\r\n\r\nData analysis was carried out using purpose-written Python scripts that use the SonarQube API to extract, aggregate and process project data.", "artifact_limitations": null, "artifact_gaps": "Our current goal is to extend the analysis to applications from other software domains, as well as to include commercial applications with a traceable development history.", "artifact_other_comments": "Java", "study_code": "327", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of TD", "Calculate TD Principal"], "artifact_input": "Source Code", "selection_response_link": null}, "329": {"selection_timestamp": "8/11/2022 16:37:18", "study_title": "Anticipating Identification of Technical Debt Items in Model-Driven Software Projects", "study_authors": "Ramon Ara\u00fajo Gomes\r\nLarissa Barbosa L. Pinheiro\r\nRita Suzana Pitangueira Maciel", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Brazilian Symposium on Software Engineering", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/3422392.3422434", "study_bibtex": "@inproceedings{Gomes_2020,\r\n\tdoi = {10.1145/3422392.3422434},\r\n\turl = {https://doi.org/10.1145%2F3422392.3422434},\r\n\tyear = 2020,\r\n\tmonth = {oct},\r\n\tpublisher = {{ACM}},\r\n\tauthor = {Ramon Ara{\\'{u}}jo Gomes and Larissa Barbosa L. Pinheiro and Rita Suzana Pitangueira Maciel},\r\n\ttitle = {Anticipating Identification of Technical Debt Items in Model-Driven Software Projects},\r\n\tbooktitle = {Proceedings of the 34th Brazilian Symposium on Software Engineering}\r\n}", "study_summary": null, "study_problem": "Recent works concluded that MDD project codes are not technical debt free, making it necessary to investigate the possibility and benefits of applying TD identification techniques in earlier stages of the development process, such as in modeling phases.", "study_objective": "This paper intends to analyze whether it is possible to use source code technical debt detection strategies to identify TD on code-generating models in the context of model-driven development projects. A catalog of nine different model technical debt items for platform-\r\nindependent code-generating models was specified.", "study_results": null, "artifact_name": ["EMF Refactor", "PMD", "Checkstyle", "Jspirit", "SonarQube"], "artifact_description": "EMF Refactor is a tool that provides a mechanism to specify both metrics and detection strategies to find model elements that attend specific criteria. The tool provides means to navigate through model elements and calculate the specified metrics for each of\r\nthem. It is also possible to define detection strategies based on the specified metrics so that when some specific patterns are identified in the model they can be reported. Therefore, the proposed model detection strategies were implemented in this tool, and then the code-generating models could be automatically analyzed to identify the TD-incurring suspects elements.", "artifact_link": ["Identify TD", "Calculate code metrics"], "artifact_sdlc": ["(Architectural) Design"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "PMD8 is a source code analyzer to find common programming flaws.\r\nSonar is an automatic code review tool to detect bugs, vulnerabilities\r\nand code smell. Checkstyle9 is a tool to help programmers write\r\nJava code that adheres to a coding standard. JSpirit10 is a tool to\r\nassist developers in identifying and prioritizing code smells.", "artifact_limitations": null, "artifact_gaps": "Finally, we intend to extend the catalog items to other types of technical debt rather than code smell, for instance, Modularity Violations and Design Patterns Grime [16].", "artifact_other_comments": "IMPORTANT\r\nMDD as alternative for early stages of SDLC\r\nCatalog relating code smells and model smells\r\nAlso describes how tools identify each smell", "study_code": "329", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate code metrics"], "artifact_input": "Souce Code\r\nMDD Models", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuftB5vERhDh8EeAwWZefFd2OiRmyq_9pLotctv9WBIjdrrKxeIbIcoN5xsIsntEjJI"}, "330": {"selection_timestamp": "8/11/2022 16:53:21", "study_title": "On the diffuseness of technical debt items and accuracy of remediation time when using SonarQube", "study_authors": "Maria Teresa Baldassarre\r\nValentina Lenarduzzi\r\nSimone Romanoa\r\nNyyti Saarim\u00e4ki", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Information and Software Technology", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1016/j.infsof.2020.106377", "study_bibtex": "@article{Baldassarre_2020,\r\n\tdoi = {10.1016/j.infsof.2020.106377},\r\n\turl = {https://doi.org/10.1016%2Fj.infsof.2020.106377},\r\n\tyear = 2020,\r\n\tmonth = {dec},\r\n\tpublisher = {Elsevier {BV}},\r\n\tvolume = {128},\r\n\tpages = {106377},\r\n\tauthor = {Maria Teresa Baldassarre and Valentina Lenarduzzi and Simone Romano and Nyyti Saarim\u00e4ki},\r\n\ttitle = {On the diffuseness of technical debt items and accuracy of remediation time when using {SonarQube}},\r\n\tjournal = {Information and Software Technology}\r\n}", "study_summary": null, "study_problem": "Among the static analysis tools available, SonarQube is one of the most used. SonarQube detects Technical Debt (TD) items\u2014i.e., violations of coding rules\u2014and then estimates TD as the time needed to remedy TD items. However, practitioners are still skeptical about the accuracy of remediation time estimated by the tool.", "study_objective": "In this paper, we analyze both diffuseness of TD items and accuracy of remediation time, estimated by SonarQube, to fix TD items on a set of 21 open-source Java projects.", "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": "TD items are classified according to three quality characteristics, namely: reliability, security, and maintainability. TD items used to measure the reliability quality characteristic are called\r\nbugs. Those used to measure security and maintainability, are called vulnerabilities and code smells, respectively. In other words, there are three types of TD items (or coding rule), namely: bug, vulnerability, and code smell. SonarQube also assigns a severity level to each TD item (or coding rule), namely: info, minor, major, critical, and blocker.", "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": "They also show that SonarQubes remediation time estimates are inaccurate and overestimated in comparison to the actual remediation time needed to fix the TD items.", "artifact_gaps": "We are confident that the results obtained from this study will motivate researchers to devise and assess remediation estimation models currently used to estimate the time needed to solve TD items, especially in the case where TD items are diffused in open-source\r\nsoftware projects. Furthermore, our results may allow practitioners who use SonarQube to make more informed decisions regarding project execution and management with respect to remediation time estimations.", "artifact_other_comments": null, "study_code": "330", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify TD", "Calculate TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucpHX9LvkPVZ_kefcpL9TEv8h_C4wQmfkjl5xJAp_gjltkpGgm--3tuZx1MQ-2Er50"}, "375": {"selection_timestamp": "8/11/2022 17:12:42", "study_title": "Refactorings and Technical Debt in Docker Projects: An Empirical Study", "study_authors": "Emna Ksontini\r\nMarouane Kessentini\r\nThiago do N. Ferreira\r\nFoyzul Hassan", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "International Conference on Automated Software Engineering", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1109/ASE51524.2021.9678585", "study_bibtex": "@inproceedings{Ksontini_2021,\r\n\tdoi = {10.1109/ase51524.2021.9678585},\r\n\turl = {https://doi.org/10.1109%2Fase51524.2021.9678585},\r\n\tyear = 2021,\r\n\tmonth = {nov},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Emna Ksontini and Marouane Kessentini and Thiago do N. Ferreira and Foyzul Hassan},\r\n\ttitle = {Refactorings and Technical Debt in Docker Projects: An Empirical Study},\r\n\tbooktitle = {2021 36th {IEEE}/{ACM} International Conference on Automated Software Engineering ({ASE})}\r\n}", "study_summary": null, "study_problem": "Similar to any other complex systems, container-based projects are prone to various quality and technical debt issues related to different artifacts: Docker and Docker-compose files, and regular source code ones. Unfortunately, there is a gap of knowledge in how container-based projects actually evolve and are maintained.", "study_objective": "In this paper, we address the above gap by studying refactorings, i.e., structural changes while preserving the behavior, applied in open-source Docker projects, and the technical debt\r\nissues they alleviate.", "study_results": null, "artifact_name": ["RMiner", ""], "artifact_description": "Hadolint (Haskell Dockerfile Linter)2, is a smart Dockerfile linter that can be used to help developers to build the best practice into the Docker images. The linter parses\r\nthe Dockerfile into an AST and performs rules on top of the AST in order to detect DL-smells based on ShellCheck3 to lint the Bash code inside RUN instructions for the SC-\r\nsmells detection.", "artifact_link": ["https://github.com/hadolint/hadolint", "https://github.com/koalaman/shellcheck"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Infrastructure TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "We have also studied the co-evolution be-\r\ntween applying those Docker-specific refactorings and regular\r\n\r\nrefactorings on the code of the app hosting the containers.\r\nA taxonomy of refactorings in Docker projects was proposed\r\n\r\nincluding 14 new Dockerfile-related refactorings, 12 Docker-\r\ncompose related refactorings and 7 technical debt categories.", "artifact_limitations": null, "artifact_gaps": "In the future, we will use the scientific foundations of\r\nthis study to build new tools for refactorings detection and\r\nrecommendation for Docker projects.", "artifact_other_comments": "Docker\r\nImportant", "study_code": "375", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify TD"], "artifact_input": "Docker-Files", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufzi7t6syqzkMrBeKYuwSg3plflQqcXqsYWhfS_mYsCIMprth_aZTftzPz2el4qA2A"}, "332": {"selection_timestamp": "8/11/2022 21:18:25", "study_title": "Technical debt forecasting: An empirical study on open-source repositories", "study_authors": "Dimitrios Tsoukalas\r\nDionysios Kehagias\r\nMiltiadis Siavvas\r\nAlexander Chatzigeorgiou", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "The Journal of Systems and Software", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1016/j.jss.2020.110777", "study_bibtex": "@article{Tsoukalas_2020,\r\n\tdoi = {10.1016/j.jss.2020.110777},\r\n\turl = {https://doi.org/10.1016%2Fj.jss.2020.110777},\r\n\tyear = 2020,\r\n\tmonth = {dec},\r\n\tpublisher = {Elsevier {BV}},\r\n\tvolume = {170},\r\n\tpages = {110777},\r\n\tauthor = {Dimitrios Tsoukalas and Dionysios Kehagias and Miltiadis Siavvas and Alexander Chatzigeorgiou},\r\n\ttitle = {Technical debt forecasting: An empirical study on open-source repositories},\r\n\tjournal = {Journal of Systems and Software}\r\n}", "study_summary": null, "study_problem": "Predicting the future value of TD could facilitate decision-making tasks regarding software maintenance and assist developers and project managers in taking proactive actions regarding TD repayment. However, no notable contributions exist in the field of TD forecasting, indicating that it is a scarcely investigated field.", "study_objective": "To this end, in the present paper, we empirically evaluate the ability of machine learning (ML) methods to model and predict TD evolution. More specifically, an extensive study is conducted, based on a dataset that we constructed by obtaining weekly snapshots of fifteen open source software projects over three years and using two popular static analysis tools to extract software-related metrics that can act as TD predictors.", "study_results": null, "artifact_name": ["SonarQube", "CKJM", "Sigrid", "Structure101", "NDepend", "Teamscale", "FindBugs", "CheckStyle", "<Code from authors>"], "artifact_description": "In order to extract the identified TD-related\r\nfeatures and various Object Oriented (OO) metrics that could act\r\nas predictors, we used two popular tools, namely SonarQube2\r\nand CKJM Extended3 respectively. This process led to 15 inde-\r\npendent application-specific datasets containing TD indicators and TD values for each snapshot.\r\n\r\nIn the case of this survey, although partici-\r\npants might not be extremely familiar with the TD concepts and\r\n\r\nterminology, they are all experienced in issues related to quality\r\nassessment, since the Company uses SonarQube for continuous\r\n\r\ninspection of code quality during its software development pro-\r\ncess.", "artifact_link": ["https://www.sonarqube.org/", "http://gromit.iiar.pwr.wroc.pl/p_inf/ckjm/", "https://www.softwareimprovementgroup.com/solutions/sigrid-software-", "assurance-platform/", "https://www.cqse.eu/en/products/teamscale/landing/", "https://sites.google.com/view/technical-debt-forecasting/main?authuser=0"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Last but not\r\nleast, we plan to investigate other types of software repositories\r\nthat could be a potential source of TD related data, such as project\r\nmanagement and issue-tracking systems, as well as archived\r\ncommunication between project personnel. More specifically, the\r\nanalysis of the communication between project personnel could\r\nreveal indications of high-TD artifacts that concentrate a large\r\npart of maintenance effort. These indications could then be fac-\r\ntored in TD forecasting techniques to target these critical \u2013 from\r\na maintenance point of view \u2013 artifacts. In fact, we believe that\r\nthere is great potential in mining this information to achieve\r\nsource triangulation and thus, yield more accurate TD forecasting\r\nestimates.", "artifact_other_comments": "IMPORTANT", "study_code": "332", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify TD", "Calculate code metrics"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucL2xog2Vzzyqj6NDqKOHEn5MKSQqciMhNlysl1Lyu8eXGzaHtjx7bO9QGSvy-NGJs"}, "395": {"selection_timestamp": "8/11/2022 21:27:32", "study_title": "Evolution of technical debt remediation in Python: A case study on the Apache Software Ecosystem", "study_authors": "Jie Tan\r\nDaniel Feitosa\r\nParis Avgeriou\r\nMircea Lungu", "study_author_type": "Academia", "study_year": 2020.0, "study_venue": "Journal of Software: Evolution and Process", "study_venue_type": "Journal", "study_link": "http://doi.org/10.1002/smr.2319", "study_bibtex": "@article{Tan_2020,\r\n\tdoi = {10.1002/smr.2319},\r\n\turl = {https://doi.org/10.1002%2Fsmr.2319},\r\n\tyear = 2020,\r\n\tmonth = {nov},\r\n\tpublisher = {Wiley},\r\n\tvolume = {33},\r\n\tnumber = {4},\r\n\tauthor = {Jie Tan and Daniel Feitosa and Paris Avgeriou and Mircea Lungu},\r\n\ttitle = {Evolution of technical debt remediation in Python: A case study on the Apache Software Ecosystem},\r\n\tjournal = {Journal of Software: Evolution and Process}\r\n}", "study_summary": null, "study_problem": "While a few studies that analyze various aspects of technical debt evolution already\r\nexist, to the best of our knowledge, there is no large-scale study that focuses on the\r\nremediation of technical debt over time in Python projects\u2014that is, one of the most\r\npopular programming languages at the moment.", "study_objective": "In this paper, we analyze the evolution of technical debt in 44 Python open-source software projects belonging to the Apache Software Foundation.", "study_results": null, "artifact_name": ["<Code from the aurhos>", "SonarQube"], "artifact_description": null, "artifact_link": ["https://github.com/jieshanshan/TD-Apache-Python"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Script", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD", "Test TD", "Documentation TD", "Defect TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "For example, it would be useful to survey developers to see whether they recognize\r\nthe fast repayment of test and documentation debt that we observed as intentional strategies. Moreover, it would be enlightening to find out\r\nwhether the rationale for prioritization is related to the programming language.\r\n\r\nWe would like to investigate whether a web application\r\nthat would allow developers to compare their debt remediation statistics with the Apache systems would be a good starting point for discussions\r\nand actionable insight.", "artifact_other_comments": null, "study_code": "395", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculation of TD"], "artifact_input": "Source Code\r\nIssues\r\nCommits", "selection_response_link": null}, "410": {"selection_timestamp": "8/12/2022 13:57:44", "study_title": "Technical Debt Impacting Lead-Times: An Exploratory Study", "study_authors": "Valentina Lenarduzzi\r\nAntonio Martini\r\nNyyti Saarimaki\r\nDamian Andrew Tamburri", "study_author_type": "Academia", "study_year": 2021.0, "study_venue": "Euromicro Conference on Software Engineering and Advanced Applications", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1109/seaa53835.2021.00032", "study_bibtex": "@inproceedings{Lenarduzzi_2021,\r\n\tdoi = {10.1109/seaa53835.2021.00032},\r\n\turl = {https://doi.org/10.1109/seaa53835.2021.00032},\r\n\tyear = 2021,\r\n\tmonth = {sep},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Valentina Lenarduzzi and Antonio Martini and Nyyti Saarimaki and Damian Andrew Tamburri},\r\n\ttitle = {Technical Debt Impacting Lead-Times: An Exploratory Study},\r\n\tbooktitle = {2021 47th Euromicro Conference on Software Engineering and Advanced Applications ({SEAA})}\r\n}\r\n", "study_summary": null, "study_problem": "Technical Debt is a consolidated notion in software engineering research and practice. However, the estimation of its impact (interest of the debt) is still imprecise and requires heavy empirical and experimental inquiry.", "study_objective": "We aim at developing a data-driven approach to calculate the interest of Technical Debt in terms of delays in resolving affected tasks.", "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": "If the source code violates a coding rule, SonarQube creates\r\n\u201cissues\u201d. The time (in minutes) needed to fix these issues\r\nis used to calculate the remediation effort and the technical\r\ndebt 8:\r\n\u2022 Technical debt.\u201cEffort to fix all Code Smells issues\u201d.\r\n\u2022 Reliability remediation effort.\u201cEffort to fix all bug\r\nissues\u201d.\r\n\u2022 Security remediation effort.\u201cEffort to fix all vulnerabil-\r\nity issues\u201d.", "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": "However, customers are reluctant to adopt this tool due to its complex usage [18]. Moreover, previous study underlines the lack of trust on the rules usefulness expressed by several interviewed developers [18], [19].", "artifact_gaps": "Future works include the application of this approach to a larger data-set and the implementation of the approach on different type of issues, including code smells, rules detected by SonarQube, but also rules detected by other tools such as BetterCodeHub, Coverity Scan, and others. Finally, reflecting on the aforementioned conclusion, one major followup would reflect the runtime technical debt estimation and corrective actions\u2019 recommendations. Such an exploration may pave the way for technical debt management of the future.", "artifact_other_comments": null, "study_code": "410", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculates TD Principal", "Calculates TD Interest"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufifqA2L9f2w_LrXftBzjG81by0uKZfnF9coIgMyVNslRHeaMS3Dy4cIpRX5_p7eKY"}, "424": {"selection_timestamp": "8/12/2022 14:39:21", "study_title": "Can Clean New Code Reduce Technical Debt Density?", "study_authors": "George Digkas\r\nAlexander Chatzigeorgiou\r\nApostolos Ampatzoglou\r\nParis Avgeriou", "study_author_type": "Academia", "study_year": 2022.0, "study_venue": "IEEE TRANSACTIONS ON SOFTWARE ENGINEERING", "study_venue_type": "Journal", "study_link": "http://doi.org/10.1109/TSE.2020.3032557", "study_bibtex": "@article{Digkas_2022,\r\n\tdoi = {10.1109/tse.2020.3032557},\r\n\turl = {https://doi.org/10.1109%2Ftse.2020.3032557},\r\n\tyear = 2022,\r\n\tmonth = {may},\r\n\tpublisher = {Institute of Electrical and Electronics Engineers ({IEEE})},\r\n\tvolume = {48},\r\n\tnumber = {5},\r\n\tpages = {1705--1721},\r\n\tauthor = {George Digkas and Alexander Chatzigeorgiou and Apostolos Ampatzoglou and Paris Avgeriou},\r\n\ttitle = {Can Clean New Code Reduce Technical Debt Density?},\r\n\tjournal = {{IEEE} Transactions on Software Engineering}\r\n}", "study_summary": null, "study_problem": "While technical debt grows in absolute numbers as software systems evolve over time, the density of technical debt (technical debt divided by lines of code) is reduced in some cases. This can be explained by either the application of refactorings or the development of new artifacts with limited Technical Debt.", "study_objective": "In this paper we explore the second explanation, by investigating the relation between the amount of Technical Debt in new code and the evolution of Technical Debt in the system. To this end, we compare the Technical Debt Density of new code with existing code, and we investigate which of the three major types of code changes (additions, deletions and modifications) is primarily responsible for changes in the evolution of Technical Debt density.", "study_results": "The findings of this study suggest that writing code that\r\nhas fewer Technical Debt Issues than the host code, can\r\nprove a very efficient and low-cost approach for managing\r\nTD.", "artifact_name": ["SonarQube "], "artifact_description": "Thus, SonarQube estimates the effort (in minutes) required to eliminate the identified Technical Debt issues.1 This effort is obtained by assigning a time estimate for fixing\r\neach type of problem and by multiplying all issues of the same type with that estimate. It should be noted that the Apache Foundation ecosystem, has a dedicated SonarQube\r\ninstance for quality control in its projects.\r\n\r\nSonarQube reports various types of problems, namely code smells, bugs (issues representing something wrong in the code), vulnerabilities, code duplications and lack of test coverage.", "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": "Currently, 336 Apache projects are continuously monitored through Sonar-\r\nCloud, and 90.1 percent pass the quality criteria set by the development teams.2", "study_code": "424", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuceaY8aHMK_8v9kNjFmNPkcjF0FaDQszZXUusTDPD9313gQ_aKWz-LbVuFDxTDh1VU"}, "436": {"selection_timestamp": "8/12/2022 14:51:49", "study_title": "Further investigation of the survivability of code technical debt items", "study_authors": "Ehsan Zabardast\r\nKwabena Ebo Bennin\r\nJavier Gonzalez-Huerta", "study_author_type": "Academia", "study_year": 2022.0, "study_venue": "Journal of Software: Evolution and Process", "study_venue_type": "Journal", "study_link": "http://doi.org/10.1002/smr.2425", "study_bibtex": "@article{Zabardast_2022,\r\n\tdoi = {10.1002/smr.2425},\r\n\turl = {https://doi.org/10.1002%2Fsmr.2425},\r\n\tyear = 2022,\r\n\tmonth = {jan},\r\n\tpublisher = {Wiley},\r\n\tvolume = {34},\r\n\tnumber = {2},\r\n\tauthor = {Ehsan Zabardast and Kwabena Ebo Bennin and Javier Gonzalez-Huerta},\r\n\ttitle = {Further investigation of the survivability of code technical debt items},\r\n\tjournal = {Journal of Software: Evolution and Process}\r\n}", "study_summary": null, "study_problem": "However, little is known about whether the results on the survivability of code-smells hold for other types of code TDIs (i.e., bugs and vulnerabilities) and in industrial settings.", "study_objective": "Understanding the survivability of code TDIs by conducting an empirical study analyzing two industrial cases and 31 open-source systems from Apache Foundation. Method: We analyzed 133,670 code TDIs (35,703 from the industrial systems) detected by SonarQube (in 193,196 commits) to assess their survivability using survivability models.", "study_results": null, "artifact_name": ["SonarQube", "Codacy", "PMD", "<Code from authors>"], "artifact_description": "SonarQube** because it is widely used in both industrial and open-source systems29 and has been used in other research studies, for example, Zabardast et al.,27 Digkas et al.\u201c  16 and Guaman et al.30 SonarQube, similar to other static analysis tools, parses the code base, and builds a model  for each commit being analyzed. SonarQube classifies code TDIs into three types of Bugs, Code Smells, and Vulnerabilities. SonarQube's definitions\u2020\u2020 for these types are presented below with one example for each type\u2021\u2021.\r\n\r\nAlthough bugs, vulnerabilities, and code smells in SonarQube are defined on static properties of the code, their detection rely on the existence of detection rules. It is possible to add new rules, and new rules are also included when the tool is upgraded.", "artifact_link": ["https://www.codacy.com/", "https://pmd.github.io/pmd-6.17.0/index.html", "https://github.com/ehsanzabardast/code_tdi_survivability"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Script", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "When the system type and commit activities are taken into account, the code TDIs in the systems which have a bigger size tend to have a longer survival duration. On the other hand, the code TDIs that survive past the median threshold tend to stay in the system for a long time. Our findings open the door for further studies. Our results can be strengthened by digging into the other factors that affect the systems. Additionally, we believe replications are needed to strengthen the results and study whether the results might be generalizable to similar systems.", "artifact_other_comments": "IMPORTANT (present examples of each TDI identified by Sonar)", "study_code": "436", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuc5qnUQ6BjwqaoOjNojjaYn1ywWcnH3xtjbilOwGxG-UKSzL4rp8eICDXwzxhnole4"}, "437": {"selection_timestamp": "8/12/2022 15:06:49", "study_title": "Does it matter who pays back Technical Debt? An empirical study of self-fixed TD", "study_authors": "Jie Tan\r\nDaniel Feitosa\r\nParis Avgeriou", "study_author_type": "Academia", "study_year": 2022.0, "study_venue": "Information and Software Technology", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1016/j.infsof.2021.106738", "study_bibtex": "@article{Tan_2022,\r\n\tdoi = {10.1016/j.infsof.2021.106738},\r\n\turl = {https://doi.org/10.1016%2Fj.infsof.2021.106738},\r\n\tyear = 2022,\r\n\tmonth = {mar},\r\n\tpublisher = {Elsevier {BV}},\r\n\tvolume = {143},\r\n\tpages = {106738},\r\n\tauthor = {Jie Tan and Daniel Feitosa and Paris Avgeriou},\r\n\ttitle = {Does it matter who pays back Technical Debt? An empirical study of self-fixed {TD}},\r\n\tjournal = {Information and Software Technology}\r\n}", "study_summary": null, "study_problem": "Technical Debt (TD) can be paid back either by those that incurred it or by others. We call the former self-fixed TD, and it can be particularly effective, as developers are experts in their own code and are well-suited to fix the corresponding TD issues.", "study_objective": "The goal of our study is to investigate self-fixed technical debt, especially the extent in which TD is self-fixed, which types of TD are more likely to be self-fixed, whether the remediation time of self-fixed TD is shorter than non-self-fixed TD and how development behaviors are related to self-fixed TD.", "study_results": null, "artifact_name": ["SonarQube", "<Code from authors>"], "artifact_description": null, "artifact_link": ["https://github.com/jieshanshan/ist-si-sftd"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Script", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD", "Test TD", "Documentation TD", "Defect TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "The study provides insight into the circumstances (e.g., project\r\nsize and the number of developers) that would improve the\r\nlikelihood of developers self-fixing technical debt, which can help\r\npredict project quality.", "artifact_limitations": null, "artifact_gaps": "In the future, we plan to extend this study by investigating more factors related to the survival time and the likelihood of TD issues being self-fixed, such as commit frequency at project and developer levels, and the commit content. We also plan to develop a tool based on the self-fixed rate and survival time to help developers to prioritize TD remediation, and provide insights to software development teams to better assign software maintenance tasks among different developers.", "artifact_other_comments": "Python", "study_code": "437", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudbqDh1QHXQmxbdX3iNGwEFDLeemUh_mV8NZcXjm7JbRng7Hc6iGjaw9A2Oeac0ZtE"}, "56": {"selection_timestamp": "8/12/2022 15:27:34", "study_title": "Technical Debt in MDE: A Case Study on GMF/EMF-Based Projects", "study_authors": "Xiao He\r\nParis Avgeriou\r\nPeng Liang\r\nZengyang Li", "study_author_type": "Academia", "study_year": 2016.0, "study_venue": "International Conference on Model Driven Engineering Languages and Systems", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1145/2976767.2976806", "study_bibtex": "@inproceedings{He_2016,\r\n\tdoi = {10.1145/2976767.2976806},\r\n\turl = {https://doi.org/10.1145%2F2976767.2976806},\r\n\tyear = 2016,\r\n\tmonth = {oct},\r\n\tpublisher = {{ACM}},\r\n\tauthor = {Xiao He and Paris Avgeriou and Peng Liang and Zengyang Li},\r\n\ttitle = {Technical debt in {MDE}},\r\n\tbooktitle = {Proceedings of the {ACM}/{IEEE} 19th International Conference on Model Driven Engineering Languages and Systems}\r\n}", "study_summary": null, "study_problem": "However, there is a lack of empirical evidence on the existence and influence of TD in the context of MDE.", "study_objective": "This paper investigates the code-level TD in MDE projects, which is incurred during code generation. We evaluated 16 open-source and non-trivial GMF/EMF-based MDE projects using bad smells, which are widely-accepted TD indicators.", "study_results": null, "artifact_name": ["PMD"], "artifact_description": "We select 10 types of bad smells as listed in Table 2, including God Class, Excessive Class Length (A.K.A long class), Excessive Method Length (A.K.A long method), Excessive Parameter List, Duplicate Code5 (A.K.A code clone), Cyclomatic Complexity, Coupling Between Objects, Excessive Imports, Too Many Methods, and Too Many Fields.", "artifact_link": ["https://pmd.github.io"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Based on the results of this exploratory study, we plan to investigate the nature of MDE-TD. Specifically we intend to study the subtypes of MDE-TD, what artifacts (e.g., meta-\r\nmodels, models, model transformers, and code generators) may result in and/or are affected by MDE-TD, and how to manage (e.g., identify and repay) and prevent MDE-TD.", "artifact_other_comments": null, "study_code": "56", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Find bad smells"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucqO6tqkbUU517LrH7_C6l8J6EqAHueLV5D2DnQCdzY7yIVIv67dcTku6EcptfzaFU"}, "57": {"selection_timestamp": "8/12/2022 16:16:48", "study_title": "How do software development teams manage technical debt? \u2013 An empirical study", "study_authors": "Jesse Yli-Huumo\r\nAndrey Maglyas\r\nKari Smolander", "study_author_type": "Academia", "study_year": 2016.0, "study_venue": "The Journal of Systems and Software", "study_venue_type": "Journal", "study_link": "http://dx.doi.org/10.1016/j.jss.2016.05.018", "study_bibtex": "@article{Yli_Huumo_2016,\r\n\tdoi = {10.1016/j.jss.2016.05.018},\r\n\turl = {https://doi.org/10.1016%2Fj.jss.2016.05.018},\r\n\tyear = 2016,\r\n\tmonth = {oct},\r\n\tpublisher = {Elsevier {BV}},\r\n\tvolume = {120},\r\n\tpages = {195--218},\r\n\tauthor = {Jesse Yli-Huumo and Andrey Maglyas and Kari Smolander},\r\n\ttitle = {How do software development teams manage technical debt? {\\textendash} An empirical study},\r\n\tjournal = {Journal of Systems and Software}\r\n}", "study_summary": null, "study_problem": "In this study, one large software development organization is investigated to gather empirical evidence related to the concept of technical debt management (TDM).", "study_objective": "We used the exploratory case study method to collect and analyze empirical\r\ndata in the case organization by interviewing a total of 25 persons in eight software development teams.", "study_results": null, "artifact_name": ["SonarQube", "DebtFlag", "JIRA", "CheckStyle", "FindBugs"], "artifact_description": "Different tools have been developed for TDM. The SQALE method (Letouzey, 2012; Letouzey and Ilkiewicz, 2012) has been developed for the purposes of identifying, estimating, analyz-\r\ning, measuring, and monitoring TD in a software. DebtFlag (Holvitie and Lepp\u00e4nen, 2013) has been developed to capture, track and resolve TD in software projects. The SonarQube tool and its plugins have been applied in several studies to identify and measure TD from software (Al Mamun et al., 2014; Griffith et al., 2014). A set of other tools to support TD management were identified in the mapping study by Li et al. (2015a).\r\n\r\nThe SonarQube tool gave values of TD as automated test coverage and violations in the code. The software architect used these two measurements to estimate the current TD monthly.", "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Prevention", "Monitoring", "Priorization", "Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Not cited"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration and test in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": "Part of the identification was conducted with the SonarQube tool, but the architects mentioned that it was not necessarily the best way to identify all TD, because it does not take deep and complex architectural issues into consideration. For example, with\r\nSonarQube the software architects were able to find issues related to single line problems or code violations, but it could not detect some complicated business logic issues,", "artifact_gaps": null, "artifact_other_comments": "IMPORTANT\r\nHOW EACH ACTIVITY IS PERFORMED", "study_code": "57", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify TD", "Measure TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufKGa5aN1qwfr7TUe7Ijqp3pRgk-SYC-dH99TMiZKWbc_gZMKqPqlol3CtD3gvDQfU"}, "38": {"selection_timestamp": "8/12/2022 16:27:49", "study_title": "Assessing the Effectiveness of Static Analysis through Defect Correlation Analysis", "study_authors": "Radhika D Venkatasubramanyam\r\nShrinath Gupta\r\nUmesh Uppili", "study_author_type": "Industry", "study_year": 2015.0, "study_venue": "International Conference on Global Software Engineering", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/ICGSE.2015.18", "study_bibtex": "@inproceedings{Venkatasubramanyam_2015,\r\n\tdoi = {10.1109/icgse.2015.18},\r\n\turl = {https://doi.org/10.1109%2Ficgse.2015.18},\r\n\tyear = 2015,\r\n\tmonth = {jul},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Radhika D. Venkatasubramanyam and Shrinath Gupta and Umesh Uppili},\r\n\ttitle = {Assessing the Effectiveness of Static Analysis through Defect Correlation Analysis},\r\n\tbooktitle = {2015 {IEEE} 10th International Conference on Global Software Engineering}\r\n}", "study_summary": null, "study_problem": "Static Analysis is believed to help identify issues at an\r\nearly stage in the software development life cycle (SDLC);\r\nhowever it is still under utilized in the industry.", "study_objective": "In this paper, we\r\ndiscuss our experiences in determining the importance of Static\r\nAnalysis and the extent to which the defects (that could otherwise\r\nbe slipped to later stages of SDLC) could have been reduced with\r\nthe continuous use of Static Analysis.", "study_results": null, "artifact_name": ["FxCop", "PCLint", "FindBugs"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "The approach also helps in determining the new category\r\nof rules that need to be introduced so that issues can be\r\ndetected early. In order to mitigate the challenges in software\r\nquality for projects involving globally distributed\r\ndevelopment, trainings and clear guidelines can be rolled out\r\nacross all the distributed locations and uniformity in software\r\nchecks can be brought in, ensuring uniform software quality.", "artifact_other_comments": null, "study_code": "38", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Static Code Analysis"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudQNxpPvJ6kfImMOIy0s8xj7scbErktD-zxa5IrodJxjpOjkHYnolhy-lMlccsJ18A"}, "4": {"selection_timestamp": "8/12/2022 19:19:49", "study_title": "Visualizing and Managing Technical Debt in Agile Development: an Experience Report", "study_authors": "Paulo S\u00e9rgio Medeiros dos Santos\r\nAmanda Varella\r\nCristine Ribeiro Dantas\r\nDaniel Beltr\u00e3o Borges", "study_author_type": "Both", "study_year": 2013.0, "study_venue": "International Conference on Agile Software Development", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1007/978-3-642-38314-4_9", "study_bibtex": "@incollection{dos_Santos_2013,\r\n\tdoi = {10.1007/978-3-642-38314-4_9},\r\n\turl = {https://doi.org/10.1007%2F978-3-642-38314-4_9},\r\n\tyear = 2013,\r\n\tpublisher = {Springer Berlin Heidelberg},\r\n\tpages = {121--134},\r\n\tauthor = {Paulo S{\\'{e}}rgio Medeiros dos Santos and Amanda Varella and Cristine Ribeiro Dantas and Daniel Beltr{\\~{a}}o Borges},\r\n\ttitle = {Visualizing and Managing Technical Debt in Agile Development: An Experience Report},\r\n\tbooktitle = {Lecture Notes in Business Information Processing}\r\n}", "study_summary": null, "study_problem": "The main motivation to use technical\r\ndebt metaphor was its acknowledged potential in driving software development\r\nand maintenance decisions, especially those long term maintenance tradeoffs\r\nwhich are usually less visible to developers and decision makers in general.", "study_objective": "We propose the use of a \"technical debt board\" with main technical debt categories\r\nto manage and visualize the high-level debt, combined with tools to measure it\r\nat low-level (software metrics and other kind of static analysis).", "study_results": null, "artifact_name": ["SonarQube", "PMD", "Findbugs", "Cobertura", "Checkstyle"], "artifact_description": "To measure the technical debt at source code level, the architecture team has made\r\nuse of the tool Sonar (http://www.sonarsource.org/) [20]. Sonar has a plugin that\r\nallows estimating how much effort would be required to fix each debt of the project.\r\nSonar considers as debts: cohesion and complexity metrics, duplications, lack of\r\ncomments, coding rules violation, potential bugs and no unit tests or useless ones. The\r\ndetails of its formula can be found in [20]. The important aspect is that an estimative\r\nis calculated, and Sonar shows the results financially and the effort in man days\r\nnecessary to take the debt to zero (the daily rate of the developer in the context of the\r\nproject must be informed).\r\n\r\nIt is important to mention that Sonar, in fact, use many other tools internally to an-\r\nalyze the source code \u2013 each one for different aspects of the analysis. It works as an\r\n\r\naggregator to display results of other tools such as PMD, Findbugs, Cobertura and\r\nCheckstyle among others.", "artifact_link": ["nan"], "artifact_sdlc": ["(Architectural) Design", "Implementation", "Evolution/Maintenance"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Applications", "artifact_evidence_level_evidence": null, "artifact_maturity": "Successfully proof in a real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": "Working the change\r\nmanagement iteratively, getting feedback for new actions, the intense use of\r\nvisualization, the application of concrete measurements, and working together with\r\nthe teams in a collaborative, not imposing manner, all that in context had proved to be\r\npowerful tools to obtain the desired results.", "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": "IMPORTANT\r\nPETROBR\u00c1S", "study_code": "4", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuemyKlB8YwLssl4kXP_uPDX9pQLSu9BU_FoBOFn5J9PtjL-Eh4UVYaMMiFD30-2ctw"}, "27": {"selection_timestamp": "8/12/2022 21:06:54", "study_title": "Conciliating Model-Driven Engineering with Technical Debt Using a Quality Framework", "study_authors": "Faber D. Giraldo\r\nSergio Espana\r\nManuel A. Pineda,\r\nWilliam J. Giraldo\r\nOscar Pastor", "study_author_type": "Academia", "study_year": 2015.0, "study_venue": "International Conference on Advanced Information Systems Engineering", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1007/978-3-319-19270-3_13", "study_bibtex": "@incollection{Giraldo_2015,\r\n\tdoi = {10.1007/978-3-319-19270-3_13},\r\n\turl = {https://doi.org/10.1007%2F978-3-319-19270-3_13},\r\n\tyear = 2015,\r\n\tpublisher = {Springer International Publishing},\r\n\tpages = {199--214},\r\n\tauthor = {F{\\'{a}}ber D. Giraldo and Sergio Espa{\\~{n}}a and Manuel A. Pineda and William J. Giraldo and Oscar Pastor},\r\n\ttitle = {Conciliating Model-Driven Engineering with Technical Debt Using a Quality Framework},\r\n\tbooktitle = {Lecture Notes in Business Information Processing}\r\n}", "study_summary": null, "study_problem": "The main goal of this work is to evaluate the feasibility to\r\ncalculate the technical debt (a traditional software quality approach) in\r\na model-driven context through the same tools used by software devel-\r\nopers at work.", "study_objective": null, "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": "The SonarQube tool was used, so that the quality check was performed directly on projects created with Eclipse Modeling Frame- work (EMF) instead of traditionals source code projects.", "artifact_link": ["nan"], "artifact_sdlc": ["(Architectural) Design"], "artifact_sdlc_evidence": null, "artifact_type": "Plugin", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "From a technical perspective, as another further work, we propose to use\r\nSonarQube plugins that offer technical debt evaluation through specific\r\napproaches like the SQALE Methodology (software quality assessment based\r\non lifecycle expectations)4 [14].\r\n\r\nAlso, the implementation of\r\nautomatic checks over the OCL code could be an important strategy to verify\r\nquality issues over models.", "artifact_other_comments": "IMPORTANT MODEL DRIVEN\r\nAuthors have proposed a plugin to integrate SonarQube in Enclipe EMF, however, the plugin was not made available.\r\n\r\nLanguage: XML", "study_code": "27", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate TD"], "artifact_input": "XML Models ", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudpzNOhDpfaY7xQbf_L7U83QNCTDYnunL-jU5vPypSKnZCWx_WSQYgVEr4QakToHO4"}, "9": {"selection_timestamp": "8/12/2022 21:34:18", "study_title": "Comparing four approaches for technical debt identification", "study_authors": "Nico Zazworka\r\nAntonio Vetro\r\nClemente Izurieta\r\nSunny Wong\r\nYuanfang Cai\r\nCarolyn Seaman\r\nForrest Shull", "study_author_type": "Academia", "study_year": 2013.0, "study_venue": "Software Quality Journal", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1007/s11219-013-9200-8", "study_bibtex": "@article{Zazworka_2013,\r\n\tdoi = {10.1007/s11219-013-9200-8},\r\n\turl = {https://doi.org/10.1007%2Fs11219-013-9200-8},\r\n\tyear = 2013,\r\n\tmonth = {apr},\r\n\tpublisher = {Springer Science and Business Media {LLC}},\r\n\tvolume = {22},\r\n\tnumber = {3},\r\n\tpages = {403--426},\r\n\tauthor = {Nico Zazworka and Antonio Vetro' and Clemente Izurieta and Sunny Wong and Yuanfang Cai and Carolyn Seaman and Forrest Shull},\r\n\ttitle = {Comparing four approaches for technical debt identification},\r\n\tjournal = {Software Quality Journal}\r\n}", "study_summary": null, "study_problem": "What has not yet been studied is if using multiple tools to detect TD can lead to benefits, that is, if different tools will flag the same or different source code components. Further, these techniques also lack investigation into the symptoms of TD \u2018\u2018interest\u2019\u2019 that they lead to.", "study_objective": "To address this latter question, we also investigated whether TD, as identified by the source code analysis techniques, correlates with interest payments in the form of increased defect- and change-proneness. Comparing the results of different TD identification approaches to understand their commonalities and differences and to evaluate their relationship to indicators of future TD \u2018\u2018interest.\u2019\u2019", "study_results": null, "artifact_name": ["CLIO", "FindBugs", "Codevizard"], "artifact_description": null, "artifact_link": ["http://www.cs.umd.edu/~basili/hpcs/index.php_id=21", ""], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": "IMPORTANT", "study_code": "9", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of modularity violations (Clio)", "Code Smells (Code Vizard)", "Static Analysis (Findbugs)"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufdkuh51AJybHiZpz8giiawBAm-hOGresQCU9qhKPgFbvvDzXXCdSJtfZ_a6GU72M8"}, "183": {"selection_timestamp": "8/12/2022 21:40:20", "study_title": "Integrating Traceability within the IDE to Prevent Requirements Documentation Debt", "study_authors": "Sofia Charalampidou\r\nApostolos Ampatzoglou\r\nAlexander Chatzigeorgiou\r\nNikolaos Tsiridis", "study_author_type": "Academia", "study_year": 2018.0, "study_venue": "Euromicro Conference on Software Engineering and Advanced Applications", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/SEAA.2018.00075", "study_bibtex": "@inproceedings{Charalampidou_2018,\r\n\tdoi = {10.1109/seaa.2018.00075},\r\n\turl = {https://doi.org/10.1109%2Fseaa.2018.00075},\r\n\tyear = 2018,\r\n\tmonth = {aug},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Sofia Charalampidou and Apostolos Ampatzoglou and Alexander Chatzigeorgiou and Nikolaos Tsiridis},\r\n\ttitle = {Integrating Traceability Within the {IDE} to Prevent Requirements Documentation Debt},\r\n\tbooktitle = {2018 44th Euromicro Conference on Software Engineering and Advanced Applications ({SEAA})}\r\n}", "study_summary": null, "study_problem": "The specific type of TD is termed documentation debt, and is among the most preva-\r\nlent ones in practice and research.", "study_objective": "In this study we propose a tool-based approach for preventing documentation TD during requirements engineering, by: (a) integrating requirements specifications into the IDE, and (b) enabling the real-time creation of traces between requirements and code.", "study_results": null, "artifact_name": ["Not Specifeid"], "artifact_description": "To alleviate this, we developed a plugin that integrates requirements specification in the Eclipse IDE enabling their tracing to source code. The main benefit of using the developed plugin is the motivation of developers to create, maintain and utilize requirements specifications and traces as part of their daily routine.", "artifact_link": ["http://www.cs.rug.nl/search/Resources/Resources"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Plugin", "artifact_type_evidence": null, "artifact_td_activities": ["Prevention", "Monitoring"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Documentation TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": "IMPORTANT", "study_code": "183", "artifact_vendor": "Yes", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Trace Documentation Debt"], "artifact_input": "Source Code\r\nRequirement Specification", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucbh6ECNWdlqmr2NbV5x9mloZBHg1Z7yZ6MaSRX_9_IeAZsldGC1goFWb0HvO6NnUY"}, "Zengyang-S14": {"selection_timestamp": "8/16/2022 11:04:34", "study_title": "The SQALE Quality and Analysis Models for Assessing the Quality of Ada Source Code", "study_authors": "Thierry Coq\r\nJean-Pierre Rosen", "study_author_type": "Industry", "study_year": 2011.0, "study_venue": " International Conference on Reliable Software Technologies", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1007/978-3-642-21338-0_5", "study_bibtex": "@incollection{Coq_2011,\r\n\tdoi = {10.1007/978-3-642-21338-0_5},\r\n\turl = {https://doi.org/10.1007%2F978-3-642-21338-0_5},\r\n\tyear = 2011,\r\n\tpublisher = {Springer Berlin Heidelberg},\r\n\tpages = {61--74},\r\n\tauthor = {Thierry Coq and Jean-Pierre Rosen},\r\n\ttitle = {The {SQALE} Quality and Analysis Models for Assessing the Quality of Ada Source Code},\r\n\tbooktitle = {Reliable Software Technologies - Ada-Europe 2011}\r\n}", "study_summary": null, "study_problem": null, "study_objective": "This article presents the quality and analysis model of the SQALE assessment method of software source code. It explains how an Ada quality model compliant to SQALE is implemented and the results of its application to selected software, and how the use of Ada reduces the quality debt unlike many other technologies.", "study_results": null, "artifact_name": ["AdaControl"], "artifact_description": "AdaControl is a free (GMGPL) tool that detects the use of various kinds of constructs in Ada programs. Its first goal is to control proper usage of style or programming rules, but it can also be used as a powerful tool to search for use (or non-use) of various forms of programming styles or design patterns. Searched elements range from very simple, like the occurrence of certaine entities, declarations, or statements, to very sophisticated, like verifying that certain programming patterns are being obeyed.", "artifact_link": ["https://www.adalog.fr/en/adacontrol.html"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Validation in relevant environment", "artifact_maturity_level_evidence": null, "artifact_advantages": "\u2013 Since it is an ASIS [21] tool, its analysis on the language is based on the\r\nsame technology as the compiler, thus increasing the confidence that the\r\ntool processes the language correctly.\r\n\u2013 It has a rich set of rules. Out of the remaining 49 requirements, 22 had\r\ncheckpoints that were provided right out of the box.\r\n\u2013 It can output its results in CSV format, making them directly loadable in a\r\nspreadsheet program for further analysis.\r\n\u2013 Moreover, since AdaControl is free software and easily extendable [15\u201317],\r\nmore checkpoints can be added at will.", "artifact_limitations": null, "artifact_gaps": "Finally, since the indices of the SQALE method are independent of the tar-\r\nget language, once computed, the results provided demonstrate the low quality\r\ndebt remaining in an Ada application, quality debt which can be comparably\r\nestimated in other applications in other languages. SQALE for Ada can be one\r\nof the benchmark tools to help promote the use of Ada.", "artifact_other_comments": "ADA programming language", "study_code": "Zengyang-S14", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify problems in source code"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnueWFn-jrV9oP29t8vPzfvr2jKDpe5rG-nRSItVV3WFfeyT7ZG4sXnrelgsstDxAokw"}, "Zengyang-S22": {"selection_timestamp": "8/16/2022 11:13:50", "study_title": "A Threshold Based Approach to Technical Debt", "study_authors": "Robert J. Eisenberg", "study_author_type": "Industry", "study_year": 2012.0, "study_venue": "ACM Software Engineering Notes", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1145/2108144.2108151", "study_bibtex": "@article{Eisenberg_2012,\r\n\tdoi = {10.1145/2108144.2108151},\r\n\turl = {https://doi.org/10.1145/2108144.2108151},\r\n\tyear = 2012,\r\n\tmonth = {apr},\r\n\tpublisher = {Association for Computing Machinery ({ACM})},\r\n\tvolume = {37},\r\n\tnumber = {2},\r\n\tpages = {1--6},\r\n\tauthor = {Robert J. Eisenberg},\r\n\ttitle = {A threshold based approach to technical debt},\r\n\tjournal = {{ACM} {SIGSOFT} Software Engineering Notes}\r\n}\r\n", "study_summary": null, "study_problem": "It is important to recall that a primary reason for managing and eliminating\r\ndebt is to drive down maintenance costs and to reduce defects. A\r\nsufficiently low, manageable level of debt can minimize the long-term\r\nimpact, i.e., \u201clow debt interest payments\u201d.", "study_objective": "In this article, we define an approach for establishing program specific thresholds to define\r\nmanageable levels of technical debt.", "study_results": null, "artifact_name": ["SonarQube"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD", "Test TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": "Though useful, it was difficult to apply the tool provided technical debt measures in meaningful and practical ways. For example, the computed total debt hours (or dollars) on a large (200+ KSLOC) legacy baseline was huge. We did not believe that these numbers represented the true cost of controlling the debt.\r\n\r\nDespite its robust dashboard and many other highly desirable features, we ultimately dropped the usage of the debt calculator within the Sonar plug-in, but continued to use many of the core metrics provided by the tool.", "artifact_gaps": "Lastly, a correlation of other programs\r\nmetrics (e.g., productivity and defect rates) against the thresholds would\r\nhelp validate that staying within the green truly keeps us in the low\r\ninterest range.", "artifact_other_comments": "Static and Dynamic Metrics", "study_code": "Zengyang-S22", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate Code metrics", "Calculate TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuffXxQsEPNczzX3fSXplVMNAs8kb30F_3U3o3LI5iegy5fdeR6x5YOuD_2RDeXwhdI"}, "Zengyang-S25": {"selection_timestamp": "8/16/2022 11:29:03", "study_title": "Investigating the Impact of Code Smells Debt on Quality Code Evaluation", "study_authors": "Francesca Arcelli Fontana\r\nVincenzo Ferme\r\nStefano Spinelli", "study_author_type": "Academia", "study_year": 2012.0, "study_venue": "International Workshop on Managing Technical Debt", "study_venue_type": "Workshop", "study_link": "https://doi.org/10.1109/MTD.2012.6225993", "study_bibtex": "@inproceedings{Fontana_2012,\r\n\tdoi = {10.1109/mtd.2012.6225993},\r\n\turl = {https://doi.org/10.1109%2Fmtd.2012.6225993},\r\n\tyear = 2012,\r\n\tmonth = {jun},\r\n\tpublisher = {{IEEE}},\r\n\tauthor = {Francesca Arcelli Fontana and Vincenzo Ferme and Stefano Spinelli},\r\n\ttitle = {Investigating the impact of code smells debt on quality code evaluation},\r\n\tbooktitle = {2012 Third International Workshop on Managing Technical Debt ({MTD})}\r\n}", "study_summary": null, "study_problem": "Different forms of technical debt exist that have to\r\nbe carefully managed.", "study_objective": "In this paper we focus our attention on design debt, represented by code smells. We consider three smells that we detect in open source systems of different domains. Our principal aim is to give advice on which design debt has to be paid first, according to the three smells we have analyzed.", "study_results": null, "artifact_name": ["inFusion"], "artifact_description": null, "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": "The choice of these tools is due to the fact that it is\r\npossible to discover and clearly understand how each metric\r\nhas been computed and how each metric has been defined.", "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": "Java", "study_code": "Zengyang-S25", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate code metrics"], "artifact_input": "Source Code", "selection_response_link": null}, "Zengyang-S31": {"selection_timestamp": "8/16/2022 11:51:47", "study_title": "An Extraction Method to Collect Data on Defects and Effort Evolution in a Constantly Modified System", "study_authors": "Rebeka Gomes\r\nClauirton Siebra\r\nGraziela Tonin\r\nAntonio Cavalcanti\r\nFabio Q. B. da Silva\r\nAndre L. M. Santos\r\nRafael Marques", "study_author_type": "Academia", "study_year": 2011.0, "study_venue": "International Workshop on Managing Technical Debt", "study_venue_type": "Workshop", "study_link": "https://doi.org/10.1145/1985362.1985369", "study_bibtex": "@inproceedings{Gomes_2011,\r\n\tdoi = {10.1145/1985362.1985369},\r\n\turl = {https://doi.org/10.1145%2F1985362.1985369},\r\n\tyear = 2011,\r\n\tpublisher = {{ACM} Press},\r\n\tauthor = {Rebeka Gomes and Clauirton Siebra and Graziela Tonin and Antonio Cavalcanti and Fabio Q.B. da Silva and Andre L.M. Santos and Rafael Marques},\r\n\ttitle = {An extraction method to collect data on defects and effort evolution in a constantly modified system},\r\n\tbooktitle = {Proceeding of the 2nd working on Managing technical debt - {MTD} {\\textquotesingle}11}\r\n}", "study_summary": null, "study_problem": null, "study_objective": "This paper describes a data extraction method that was carried\r\nout on a set of historical development documentation, related to a\r\ncommercial software system for mobile platform.", "study_results": null, "artifact_name": ["Mantis"], "artifact_description": "The amount of defects is\r\nmeasured via queries to the Mantis Tool [9], considering specific\r\nreleases.\r\n\r\nFor example, to extract data about defects, we\r\nhave exported reports from the Mantis tool about open defects\r\nbetween the start date and end date of releases.", "artifact_link": ["http://www.mantisbt.org."], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Defect TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Examples", "artifact_evidence_level_evidence": null, "artifact_maturity": "Runnig Examples", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "Zengyang-S31", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Open Source", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of defects in the code"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuchJ9CPFdTgCnZUEsijcBtXQnO8Lzv5Mw3jhrt1xcua0uIQjdIConE7tl4LHfSybLQ"}, "Zengyang-S50": {"selection_timestamp": "8/16/2022 15:42:15", "study_title": "The SQALE Method for Evaluating Technical Debt", "study_authors": "Jean-Louis Letouzey", "study_author_type": "Industry", "study_year": 2012.0, "study_venue": "International Workshop on Managing Technical Debt", "study_venue_type": "Workshop", "study_link": "https://dl.acm.org/doi/10.5555/2666036.2666042", "study_bibtex": "@inproceedings{,\r\nauthor = {Letouzey, Jean-Louis},\r\ntitle = {The SQALE Method for Evaluating Technical Debt},\r\nyear = {2012},\r\nisbn = {9781467317498},\r\npublisher = {IEEE Press},\r\nabstract = {This paper presents the SQALE (Software Quality Assessment Based on Lifecycle Expectations) method. We describe its Quality Model and Analysis Model which is used to estimate the Quality and the Technical Debt of an application source code. We provide recommendations and guidelines for using the SQALE indicators in order to analyse the structure and the impact of the Technical Debt.},\r\nbooktitle = {Proceedings of the Third International Workshop on Managing Technical Debt},\r\npages = {31\u201336},\r\nnumpages = {6},\r\nkeywords = {technical debt, source code, quality model, quality, analysis model, SQALE},\r\nlocation = {Zurich, Switzerland},\r\nseries = {MTD '12}\r\n}", "study_summary": null, "study_problem": null, "study_objective": "This paper presents the SQALE (Software\r\nQuality Assessment Based on Lifecycle Expectations) method.\r\nWe describe its Quality Model and Analysis Model which is\r\nused to estimate the Quality and the Technical Debt of an\r\napplication source code.", "study_results": null, "artifact_name": ["SQALE plugin of the Sonar"], "artifact_description": "The debt evaluated with SQALE is the internal debt\r\nassociated to the source code of an application. This\r\nexcludes process related debt.", "artifact_link": ["https://www.sonarplugins.com/sqale"], "artifact_sdlc": ["Implementation"], "artifact_sdlc_evidence": null, "artifact_type": "Plugin", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "The first one is that no SQALE index takes into account\r\nthe relative importance of non-conformities for business or\r\noperations.\r\n\r\nThe second remark is not really a SQALE issue, but\r\nusers are expecting a standardized consensus on the\r\ndefinition of \u201cright code\u201d. This is work in progress with the\r\nongoing CISQ initiative", "artifact_other_comments": "IMPORTANT", "study_code": "Zengyang-S50", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculation of TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufZo_rwEPuZqXpJs94YRsWEITfgvyZ-_caklB4V2_ZwC3ONykkw5fRUNM0xvg5J2cs"}, "Zengyang-S55": {"selection_timestamp": "8/16/2022 15:54:36", "study_title": "Assessing technical debt by identifying design flaws in software systems", "study_authors": "Radu Marinescu", "study_author_type": "Academia", "study_year": 2012.0, "study_venue": "IBM Journal of Research and Development", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1147/jrd.2012.2204512", "study_bibtex": "@article{Marinescu2012,\r\n  doi = {10.1147/jrd.2012.2204512},\r\n  url = {https://doi.org/10.1147/jrd.2012.2204512},\r\n  year = {2012},\r\n  month = sep,\r\n  publisher = {{IBM}},\r\n  volume = {56},\r\n  number = {5},\r\n  pages = {9:1--9:13},\r\n  author = {R. Marinescu},\r\n  title = {Assessing technical debt by identifying design flaws in software systems},\r\n  journal = {{IBM} Journal of Research and Development}\r\n}", "study_summary": null, "study_problem": null, "study_objective": "In this paper, we propose a\r\nnovel framework for assessing technical debt using a technique for\r\ndetecting design flaws, i.e., specific violations of well-established\r\ndesign principles and rules.", "study_results": null, "artifact_name": ["inFusion"], "artifact_description": "For each release, the source code, together 397\r\nwith the depending libraries, was extracted and analyzed 398\r\nusing inFusion [31], a quality-assessment tool that 399\r\nautomatically detects a large set of design flaws.\r\n\r\nIn 403\r\naddition, inFusion was extended with the capability of 404\r\ncomparing two consecutive releases and identifying all the 405\r\nchanges that occurred, in terms of number of instances and 406\r\nseverities of detected design flaws.", "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Assuming that detection rules for\r\nproject-specific debt symptoms can be defined, the\r\nframework is sufficiently flexible to accommodate them\r\nnext to the general rules for design quality presented here.\r\nIn addition, the framework is not aimed to measure or predict\r\nthe actual effort or financial cost associated with technical\r\ndebt [4]. This is a highly challenging task that needs to be\r\naddressed in the future.", "artifact_other_comments": null, "study_code": "Zengyang-S55", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Identification of Design Flaws"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuetnXAqbrRR3HRTAx_tyUw2pI9pAWBSR77zz9_nFgEiZwg0PGQ_tPty02yeFq84zIQ"}, "Zengyang-S58": {"selection_timestamp": "8/16/2022 16:03:23", "study_title": "Exploring Software Supply Chains From a Technical Debt Perspective", "study_authors": "J. Yates Monteith\r\nJohn D. McGregor", "study_author_type": "Academia", "study_year": 2013.0, "study_venue": "International Workshop on Managing Technical Debt", "study_venue_type": "Workshop", "study_link": "https://doi.org/10.1109/MTD.2013.6608676", "study_bibtex": "@inproceedings{Monteith2013,\r\n  doi = {10.1109/mtd.2013.6608676},\r\n  url = {https://doi.org/10.1109/mtd.2013.6608676},\r\n  year = {2013},\r\n  month = may,\r\n  publisher = {{IEEE}},\r\n  author = {J. Yates Monteith and John D. McGregor},\r\n  title = {Exploring software supply chains from a technical debt perspective},\r\n  booktitle = {2013 4th International Workshop on Managing Technical Debt ({MTD})}\r\n}", "study_summary": null, "study_problem": "Our objective is to\r\nillustrate how a manager might use supply chain information to\r\nevaluate software being considered for inclusion in a product.", "study_objective": "We investigated the Eclipse platform code to illustrate analysis\r\nmethods that produce information of use to decision makers.\r\nThe technical debt of the software pieces was measured using\r\nthe Technical Debt plug-in to Sonar as one input into the\r\nevaluation of supply chain quality.", "study_results": null, "artifact_name": ["Sonar", "Understand", "Cytoscape"], "artifact_description": "Understand, and Sonar were used to compute various code metrics (LOC, etc.),\r\nwhile Cytoscape was used to compute graphic metrics (e.g.,\r\nbetweenness centrality) and visualize our graphs. The graphs\r\nshown in Figures IV-A, IV-A, and IV-A were created using\r\nthe edge-weighted spring-embedded layout.", "artifact_link": ["https://cytoscape.org/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "Our heuristic pointed to an area in the internal\r\nsupply chain which the experienced developers of the Eclipse\r\nplatform also identified as needing rework. This distinction is\r\nthe object of further study.", "artifact_other_comments": null, "study_code": "Zengyang-S58", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate Code Metrics", "Visualize dependencies"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuds51xhsL3GXxCQ9O2Y17zV6X5Znqdm-qQ7acpbo9iApgHX6PEhFL6WhxubMKMH6hc"}, "Zengyang-S87": {"selection_timestamp": "8/16/2022 16:32:39", "study_title": "Using Automatic Static Analysis to Identify Technical Debt", "study_authors": "Antonio Vetr\u00f2", "study_author_type": "Academia", "study_year": 2012.0, "study_venue": "International Conference on Software Engineering - Doctoral Symposium", "study_venue_type": "Conference", "study_link": "https://doi.org/10.1109/ICSE.2012.6227226", "study_bibtex": "@inproceedings{Vetro2012,\r\n  doi = {10.1109/icse.2012.6227226},\r\n  url = {https://doi.org/10.1109/icse.2012.6227226},\r\n  year = {2012},\r\n  month = jun,\r\n  publisher = {{IEEE}},\r\n  author = {Antonio Vetro},\r\n  title = {Using automatic static analysis to identify technical debt},\r\n  booktitle = {2012 34th International Conference on Software Engineering ({ICSE})}\r\n}", "study_summary": null, "study_problem": "Since TD produces interests in terms of time spent to\r\ncorrect the code and accomplish quality goals, accumulation of\r\nTD in software systems is dangerous because it could lead to\r\nmore difficult and expensive maintenance.", "study_objective": "The research  presented in this paper is focused on the usage of automatic\r\nstatic analysis to identify Technical Debt at code level with\r\nrespect to different quality dimensions.", "study_results": null, "artifact_name": ["FindBugs", "Resharper"], "artifact_description": "Resharper can be included into the CI.", "artifact_link": ["https://www.jetbrains.com/help/resharper/ReSharper_Command_Line_Tools.html"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "Zengyang-S87", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Automatic Static Code Analysis"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnuc24JgAHHZ3-6mBP2tn6c5wfCbsy5uMEXxNVb2Sy5ZtAkBJ5Axrx9d8yt_eGFb1VK8"}, "Zengyang-S88": {"selection_timestamp": "8/16/2022 17:28:02", "study_title": "Generating Precise Dependencies for Large Software", "study_authors": "Pei Wang\r\nJinqiu Yang\r\nLin Tan\r\nRobert Kroeger\r\nJ. David Morgenthaler", "study_author_type": "Both", "study_year": 2013.0, "study_venue": "International Workshop on Managing Technical Debt", "study_venue_type": "Workshop", "study_link": "https://doi.org/10.1109/mtd.2013.6608678", "study_bibtex": "@inproceedings{Wang2013,\r\n  doi = {10.1109/mtd.2013.6608678},\r\n  url = {https://doi.org/10.1109/mtd.2013.6608678},\r\n  year = {2013},\r\n  month = may,\r\n  publisher = {{IEEE}},\r\n  author = {Pei Wang and Jingiu Yang and Lin Tan and Robert Kroeger and J. David Morgenthaler},\r\n  title = {Generating precise dependencies for large software},\r\n  booktitle = {2013 4th International Workshop on Managing Technical Debt ({MTD})}\r\n}", "study_summary": null, "study_problem": null, "study_objective": "This paper designs and implements a precise and scalable\r\ntool that extracts code dependencies and their utilization for\r\n\r\nlarge C/C++ software projects.", "study_results": null, "artifact_name": ["CodeSurfer", "CppDepend"], "artifact_description": null, "artifact_link": ["https://www.cppdepend.com/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in relevant environment", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "Zengyang-S88", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Commercial/Private", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify bad dependencies"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnucaBcQmQNhP45b8nlWIvOr9OR1_Nh9FKYZRsftRf6j-om5d0WalRyCIBkJr4xgIffc"}, "Zengyang-S17": {"selection_timestamp": "8/17/2022 9:10:45", "study_title": "Estimating the Size, Cost, and Types of Technical Debt", "study_authors": "Bill Curtis\r\nJay Sappidi\r\nAlexandra Szynkarski", "study_author_type": "Industry", "study_year": 2012.0, "study_venue": "International Workshop on Managing Technical Debt", "study_venue_type": "Workshop", "study_link": "https://doi.org/10.1109/MTD.2012.6226000", "study_bibtex": "@inproceedings{Curtis2012,\r\n  doi = {10.1109/mtd.2012.6226000},\r\n  url = {https://doi.org/10.1109/mtd.2012.6226000},\r\n  year = {2012},\r\n  month = jun,\r\n  publisher = {{IEEE}},\r\n  author = {Bill Curtis and Jay Sappidi and Alexandra Szynkarski},\r\n  title = {Estimating the size,  cost,  and types of Technical Debt},\r\n  booktitle = {2012 Third International Workshop on Managing Technical Debt ({MTD})}\r\n}", "study_summary": null, "study_problem": "This study summarizes results of a study of Technical Debt across 745 business applications comprising 365 million lines of code collected from 160 companies in 10\r\nindustry segments. These applications were submitted to a static analysis that evaluates quality within and across application layers that may be coded in different languages.", "study_objective": null, "study_results": null, "artifact_name": ["CAST"], "artifact_description": "These business applications were analyzed using CAST\u2019s\r\nApplication Intelligence Platform (AIP) which performs a\r\nstatic analysis of an entire application using over 1200 rules\r\nto detect violations of good architectural and coding practice.", "artifact_link": ["https://www.castsoftware.com/"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": "The AIP includes parsers for the 28 languages such as Java, JavaEE, .NET, Visual Basic, JSP, PHP, C, C++, C#, ABAP, XML, Javascript, SQL, COBOL, and a universal analyzer that provides and 80% parse for languages lacking a dedicated parser.", "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": "Support for different languages", "study_code": "Zengyang-S17", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Commercial/Private", "artifact_license_evidence": null, "artifact_automation_provided": ["Static Code Analysis"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudo95nPQweaO7GJ8zCaVFb2XkSJIk0M4nyNSCI33eveZ7YJDG7YgvlYqVOTxXEjJMg"}, "Zengyang-S37": {"selection_timestamp": "8/17/2022 9:24:38", "study_title": "Metrics Functions for Kanban Guards", "study_authors": "Jeanette Heidenberg\r\nIvan Porres", "study_author_type": "Academia", "study_year": 2010.0, "study_venue": "International Conference and Workshops on Engineering of Computer-Based Systems", "study_venue_type": "Conference", "study_link": "http://doi.org/10.1109/ECBS.2010.43", "study_bibtex": "@inproceedings{Heidenberg2010,\r\n  doi = {10.1109/ecbs.2010.43},\r\n  url = {https://doi.org/10.1109/ecbs.2010.43},\r\n  year = {2010},\r\n  publisher = {{IEEE}},\r\n  author = {Jeanette Heidenberg and Ivan Porres},\r\n  title = {Metrics Functions for Kanban Guards},\r\n  booktitle = {2010 17th {IEEE} International Conference and Workshops on Engineering of Computer Based Systems}\r\n}", "study_summary": null, "study_problem": "We consider this approach to have many benefits, but we also recognize that there is information in software projects that does not readily lend itself to low-tech types of visualization. Different characteristics of the code base is one such example", "study_objective": "In this paper, we outline metrics functions that can take advantage of more advanced information of the development artifacts and provide the lean or agile team with partially automated decision support for quality assurance actions", "study_results": null, "artifact_name": ["STAN", "Resource standard metrics"], "artifact_description": "Maybe this is done by\r\nrunning quality assessment scripts on the code base during\r\nthe nightly build procedure. An example of such a tool is\r\nResource Standard Metrics [22]. Or it may be embedded\r\nin the IDE to provide real-time feedback to the developers.\r\nAn example of such a tool is STAN [11], a structure analysis\r\ntool for Java that is integrated in the Eclipse environment", "artifact_link": ["www.stan4j.com", "www.msquaredtechnologies.com."], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Academic Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Proof-of-concept", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": "In the future, we plan to perform a series of controlled experiments, implementing the kanban guard concept in  lean software projects in order to measure its real impact on\r\nthe quality and performance of the project. This implementation includes the integration of the complete tool chain, but also the adoption of lean working practices and their interaction with the kanban guards in order to assure software quality using autonomation mechanisms.", "artifact_other_comments": "Java", "study_code": "Zengyang-S37", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculation of code metrics"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudGhOstPy-tbhYovUqLKoB96tPB7N8gaGWiGhaSfQXKb4Wr3kHfVHi9LuBFAVWBOMk"}, "Zengyang-S83": {"selection_timestamp": "8/17/2022 9:42:58", "study_title": "Value-Based Technical Debt Model and Its Application", "study_authors": "Marek G. Stochel\r\nMariusz R. Wawrowski\r\nMagdalena Rabiej", "study_author_type": "Industry", "study_year": 2012.0, "study_venue": "International Conference on Software Engineering Advances", "study_venue_type": "Conference", "study_link": null, "study_bibtex": "@inproceedings{Stochel2012ValueBasedTD,\r\n  title={Value-Based Technical Debt Model and Its Application},\r\n  author={Marek Grzegorz Stochel and Mariusz R. Wawrowski and M. Rabiej},\r\n  booktitle={ICSEA 2012},\r\n  year={2012}\r\n}", "study_summary": null, "study_problem": "This limited visibility of the real value perceived by customer inside software engineering \r\norganizational departments has significant consequences in the way the technical quality of the product is being evaluated and maintained. The relentless pursuit of efficiency in the software engineering domain requires a broader view of long-term economical consequences of any product-related decision. Technical debt typically is an internalized (engineering-based) assessment.", "study_objective": "We propose to expand the understanding and  visibility of the technical debt by introducing a model driven  approach to provide the means to assess the technical debt  impact on perceived product quality parameters, such as  codebase/design and architecture, engineering productivity,  and finally the company\u2019s business return on the engineering \r\n investment.", "study_results": null, "artifact_name": ["PMD", "Checkstyle", "Cobertura", "FXCop", "Klocwork", "Sonar TD Plugin"], "artifact_description": "One approach, proposed for Java-based projects, is the Sonar approach [14]. Sonar is an Open Source Software quality management tool, which leverages the existing  ecosystem of quality open source tools (for example:  Checkstyle [4], PMD [20], Maven [18], and Cobertura [6]), to offer a fully integrated solution for development  environments and continuous integration tools. Being  accompanied by technical debt plug-in, Sonar is able to  monitor static and dynamic metrics on the project and  enforce coding best-practice rules,  upporting defect  prevention effort.", "artifact_link": ["http://msdn.microsoft.com/en-us/library/bb429476.aspx", "http://pmd.sourceforge.net ", "http://www.klocwork.com"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Measurement", "Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Design TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": null, "artifact_limitations": null, "artifact_gaps": null, "artifact_other_comments": null, "study_code": "Zengyang-S83", "artifact_vendor": "No", "artifact_level_automation": "It automates a process", "artifact_level_automation_evidence": null, "artifact_license": "Free", "artifact_license_evidence": null, "artifact_automation_provided": ["Calculate code metrics", "Calculate TD"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnufNmEzXwlg35djZdvD3f1XqIzOEfXSMm4n2bPcpRKkiriqM_M_MucBRv3r9utyrbM0"}, "Zengyang-S16": {"selection_timestamp": "8/17/2022 9:53:20", "study_title": "Estimating the Principal of an Application\u2019s Technical Debt", "study_authors": "Bill Curtis\r\nJay Sappidi\r\nAlexandra Szynkarski", "study_author_type": "Industry", "study_year": 2012.0, "study_venue": "IEEE Software", "study_venue_type": "Journal", "study_link": "https://doi.org/10.1109/ms.2012.156", "study_bibtex": "@article{Curtis2012,\r\n  doi = {10.1109/ms.2012.156},\r\n  url = {https://doi.org/10.1109/ms.2012.156},\r\n  year = {2012},\r\n  month = nov,\r\n  publisher = {Institute of Electrical and Electronics Engineers ({IEEE})},\r\n  volume = {29},\r\n  number = {6},\r\n  pages = {34--42},\r\n  author = {Bill Curtis and Jay Sappidi and Alexandra Szynkarski},\r\n  title = {Estimating the Principal of an Application{\\textquotesingle}s Technical Debt},\r\n  journal = {{IEEE} Software}\r\n}", "study_summary": null, "study_problem": null, "study_objective": "A formula with adjustable parameters can\r\nhelp in estimating the principal of technical\r\ndebt from structural quality data", "study_results": null, "artifact_name": ["CAST"], "artifact_description": "\u2022\t robustness, the stability or resilience of an application and its\r\nability to avoid outages or recover\r\nquickly from them;\r\n\u2022\t performance efficiency, the application\u2019s responsiveness and its efficient use of resources;\r\n\u2022\t security, an application\u2019s ability to prevent unauthorized intrusions and protect confidential\r\ninformation;\r\n\u2022\t transferability, the ease with which\r\na new team can understand the application and quickly become productive in working with it; and", "artifact_link": ["nan"], "artifact_sdlc": ["Not cited"], "artifact_sdlc_evidence": null, "artifact_type": "Tool", "artifact_type_evidence": null, "artifact_td_activities": ["Identification"], "artifact_td_activities_evidence": null, "artifact_td_type": ["Architectural TD", "Code TD"], "artifact_td_type_evidence": null, "artificat_evidence_level": "Industrial Studies", "artifact_evidence_level_evidence": null, "artifact_maturity": "Demonstration in real environment", "artifact_maturity_level_evidence": null, "artifact_advantages": "This technology analyzes all the source code of an application and reintegrates\r\nthe metadata across languages to detect violations of more than 1,200 rules of good architectural and coding practice. These violations are aggregated into measures of several quality characteristics, which are provided to both management and the developers.", "artifact_limitations": null, "artifact_gaps": "The next step in our exploration of TD-principal is to provide individual ratings for the effort to fix each of the 1,200+ violations. These effort ratings will be further adjusted by the number of components involved in fixing the violation and the complexity of each component. This refinement will make the calculation of TD-principal more\r\ngranular and could provide better indicators of components most in need of refactoring.", "artifact_other_comments": null, "study_code": "Zengyang-S16", "artifact_vendor": "No", "artifact_level_automation": "It automates a task", "artifact_level_automation_evidence": null, "artifact_license": "Commercial/Private", "artifact_license_evidence": null, "artifact_automation_provided": ["Identify Rule Violations"], "artifact_input": "Source Code", "selection_response_link": "https://docs.google.com/forms/d/e/1FAIpQLSefgYD_Gcj1apq3rDziLrwX4OXauvpfamxWNhrqGkRm_5IpeQ/viewform?edit2=2_ABaOnudbNmBg5LBefTtitiF5Q4JyE_K_ZId_4rmzsqLNJEPGZbUUCQN_PVwAQ5dOL_enKD8"}}